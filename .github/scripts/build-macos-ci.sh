#!/bin/bash\n# build-macos-ci.sh - Main orchestration script for macOS builds in CI/CD\nset -euo pipefail\n\nUSAGE=\"Usage: $0 [--version VERSION] [--build-type TYPE] [--skip-notarize] [--dev]\"\n\n# Default values\nVERSION=\"\"\nBUILD_TYPE=\"production\"\nSKIP_NOTARIZATION=false\nSKIP_SIGNING=false\n\n# Parse arguments\nwhile [[ $# -gt 0 ]]; do\n    case $1 in\n        --version)\n            VERSION=\"$2\"\n            shift 2\n            ;;\n        --build-type)\n            BUILD_TYPE=\"$2\"\n            shift 2\n            ;;\n        --skip-notarize)\n            SKIP_NOTARIZATION=true\n            shift\n            ;;\n        --skip-sign)\n            SKIP_SIGNING=true\n            shift\n            ;;\n        --dev)\n            BUILD_TYPE=\"dev\"\n            SKIP_NOTARIZATION=true\n            shift\n            ;;\n        --help)\n            echo \"$USAGE\"\n            echo \"Options:\"\n            echo \"  --version VERSION     Specify version (auto-detected if not provided)\"\n            echo \"  --build-type TYPE     Build type: dev|staging|production (default: production)\"\n            echo \"  --skip-notarize       Skip notarization step\"\n            echo \"  --skip-sign           Skip code signing\"\n            echo \"  --dev                 Development build (implies --skip-notarize)\"\n            exit 0\n            ;;\n        *)\n            echo \"Unknown option: $1\"\n            echo \"$USAGE\"\n            exit 1\n            ;;\n    esac\ndone\n\necho \"🍎 R2MIDI macOS CI/CD Build System\"\necho \"==================================\"\necho \"📋 Build Type: $BUILD_TYPE\"\necho \"🚫 Skip Signing: $SKIP_SIGNING\"\necho \"🚫 Skip Notarization: $SKIP_NOTARIZATION\"\necho \"\"\n\n# Logging functions\nlog_step() { echo \"\"; echo \"🔄 $1\"; echo \"$(printf '=%.0s' {1..50})\"; }\nlog_info() { echo \"ℹ️  $1\"; }\nlog_success() { echo \"✅ $1\"; }\nlog_warning() { echo \"⚠️  $1\"; }\nlog_error() { echo \"❌ $1\"; }\n\n# Track build progress\nBUILD_STEPS_COMPLETED=()\nBUILD_STEPS_FAILED=()\n\n# Add step tracking\ntrack_step() {\n    local step=\"$1\"\n    local status=\"$2\"\n    \n    if [ \"$status\" = \"success\" ]; then\n        BUILD_STEPS_COMPLETED+=(\"$step\")\n        log_success \"Step completed: $step\"\n    else\n        BUILD_STEPS_FAILED+=(\"$step\")\n        log_error \"Step failed: $step\"\n    fi\n}\n\n# Check if we're in the right environment\ncheck_environment() {\n    log_step \"Environment Check\"\n    \n    # Check if we're on macOS\n    if [ \"$(uname)\" != \"Darwin\" ]; then\n        log_error \"This script requires macOS\"\n        exit 1\n    fi\n    \n    # Check if we're in the project root\n    if [ ! -f \"build-all-local.sh\" ] || [ ! -d \".github/scripts\" ]; then\n        log_error \"Must be run from R2MIDI project root directory\"\n        exit 1\n    fi\n    \n    # Check for required scripts\n    local required_scripts=(\n        \".github/scripts/detect-runner-environment.sh\"\n        \".github/scripts/setup-certificates-ci.sh\"\n        \".github/scripts/sign-application.sh\"\n        \".github/scripts/create-packages.sh\"\n        \".github/scripts/notarize-package.sh\"\n    )\n    \n    for script in \"${required_scripts[@]}\"; do\n        if [ ! -f \"$script\" ]; then\n            log_error \"Required script not found: $script\"\n            exit 1\n        fi\n        \n        # Make sure it's executable\n        chmod +x \"$script\"\n    done\n    \n    log_success \"Environment check passed\"\n    track_step \"environment_check\" \"success\"\n}\n\n# Detect runner environment\ndetect_environment() {\n    log_step \"Detecting Runner Environment\"\n    \n    if ./.github/scripts/detect-runner-environment.sh; then\n        track_step \"detect_environment\" \"success\"\n        \n        # Load environment\n        if [ -f \".runner_environment\" ]; then\n            source .runner_environment\n            log_info \"Runner type: $RUNNER_TYPE\"\n            log_info \"Self-hosted: $IS_SELF_HOSTED\"\n            log_info \"Capabilities: ${BUILD_CAPABILITIES:-none}\"\n        fi\n    else\n        track_step \"detect_environment\" \"failed\"\n        log_error \"Failed to detect runner environment\"\n        exit 1\n    fi\n}\n\n# Setup certificates\nsetup_certificates() {\n    if [ \"$SKIP_SIGNING\" = true ]; then\n        log_info \"Skipping certificate setup (signing disabled)\"\n        return 0\n    fi\n    \n    log_step \"Setting Up Certificates\"\n    \n    if ./.github/scripts/setup-certificates-ci.sh; then\n        track_step \"setup_certificates\" \"success\"\n        \n        # Load certificate environment\n        if [ -f \".cert_environment\" ]; then\n            source .cert_environment\n            log_info \"Certificate setup completed\"\n        fi\n    else\n        track_step \"setup_certificates\" \"failed\"\n        log_error \"Failed to setup certificates\"\n        exit 1\n    fi\n}\n\n# Extract version\nextract_version() {\n    if [ -n \"$VERSION\" ]; then\n        log_info \"Using specified version: $VERSION\"\n        return 0\n    fi\n    \n    log_step \"Extracting Version\"\n    \n    if [ -f \".github/scripts/extract-version.sh\" ]; then\n        if VERSION=$(./.github/scripts/extract-version.sh); then\n            log_success \"Extracted version: $VERSION\"\n            track_step \"extract_version\" \"success\"\n        else\n            log_warning \"Failed to extract version, using fallback\"\n            VERSION=\"1.0.0-ci-$(date +%Y%m%d)\"\n            log_info \"Fallback version: $VERSION\"\n            track_step \"extract_version\" \"success\"\n        fi\n    else\n        # Fallback version extraction\n        if [ -f \"server/version.py\" ]; then\n            VERSION=$(python3 -c \"import sys; sys.path.insert(0, 'server'); from version import __version__; print(__version__)\" 2>/dev/null || echo \"\")\n        fi\n        \n        if [ -z \"$VERSION\" ]; then\n            VERSION=\"1.0.0-ci-$(date +%Y%m%d)\"\n            log_warning \"Using fallback version: $VERSION\"\n        else\n            log_success \"Extracted version: $VERSION\"\n        fi\n        \n        track_step \"extract_version\" \"success\"\n    fi\n}\n\n# Build applications\nbuild_applications() {\n    log_step \"Building Applications\"\n    \n    # Check virtual environments\n    if [ ! -d \"venv_server\" ] || [ ! -d \"venv_client\" ]; then\n        log_error \"Virtual environments not found\"\n        log_error \"Run: ./setup-virtual-environments.sh\"\n        track_step \"build_applications\" \"failed\"\n        exit 1\n    fi\n    \n    # Build server\n    log_info \"Building R2MIDI Server...\"\n    if ./build-server-local.sh --version \"$VERSION\" --no-sign --no-notarize; then\n        log_success \"Server build completed\"\n    else\n        log_error \"Server build failed\"\n        track_step \"build_applications\" \"failed\"\n        exit 1\n    fi\n    \n    # Build client\n    log_info \"Building R2MIDI Client...\"\n    if ./build-client-local.sh --version \"$VERSION\" --no-sign --no-notarize; then\n        log_success \"Client build completed\"\n    else\n        log_error \"Client build failed\"\n        track_step \"build_applications\" \"failed\"\n        exit 1\n    fi\n    \n    track_step \"build_applications\" \"success\"\n}\n\n# Sign applications\nsign_applications() {\n    if [ \"$SKIP_SIGNING\" = true ]; then\n        log_info \"Skipping application signing\"\n        return 0\n    fi\n    \n    log_step \"Signing Applications\"\n    \n    local apps_to_sign=(\n        \"build_server/dist/R2MIDI Server.app:server\"\n        \"build_client/dist/R2MIDI Client.app:client\"\n    )\n    \n    local signed_count=0\n    \n    for app_info in \"${apps_to_sign[@]}\"; do\n        local app_path=\"${app_info%:*}\"\n        local app_type=\"${app_info#*:}\"\n        \n        if [ -d \"$app_path\" ]; then\n            log_info \"Signing $(basename \"$app_path\")...\"\n            \n            if ./.github/scripts/sign-application.sh \"$app_path\" \"$app_type\" \"developer_id\"; then\n                log_success \"Successfully signed $(basename \"$app_path\")\"\n                ((signed_count++))\n            else\n                log_error \"Failed to sign $(basename \"$app_path\")\"\n                track_step \"sign_applications\" \"failed\"\n                exit 1\n            fi\n        else\n            log_warning \"App not found: $app_path\"\n        fi\n    done\n    \n    if [ $signed_count -gt 0 ]; then\n        log_success \"Signed $signed_count applications\"\n        track_step \"sign_applications\" \"success\"\n    else\n        log_error \"No applications were signed\"\n        track_step \"sign_applications\" \"failed\"\n        exit 1\n    fi\n}\n\n# Create packages\ncreate_packages() {\n    log_step \"Creating Packages\"\n    \n    local packages_to_create=(\n        \"build_server/dist/R2MIDI Server.app:R2MIDI-Server:com.r2midi.server\"\n        \"build_client/dist/R2MIDI Client.app:R2MIDI-Client:com.r2midi.client\"\n    )\n    \n    local package_count=0\n    \n    for package_info in \"${packages_to_create[@]}\"; do\n        local app_path=\"${package_info%%:*}\"\n        local remaining=\"${package_info#*:}\"\n        local app_name=\"${remaining%:*}\"\n        local identifier=\"${remaining##*:}\"\n        \n        if [ -d \"$app_path\" ]; then\n            log_info \"Creating packages for $(basename \"$app_path\")...\"\n            \n            if ./.github/scripts/create-packages.sh \"$app_path\" \"$app_name\" \"$VERSION\" \"$identifier\"; then\n                log_success \"Successfully created packages for $app_name\"\n                ((package_count++))\n            else\n                log_error \"Failed to create packages for $app_name\"\n                track_step \"create_packages\" \"failed\"\n                exit 1\n            fi\n        else\n            log_warning \"App not found for packaging: $app_path\"\n        fi\n    done\n    \n    if [ $package_count -gt 0 ]; then\n        log_success \"Created packages for $package_count applications\"\n        track_step \"create_packages\" \"success\"\n    else\n        log_error \"No packages were created\"\n        track_step \"create_packages\" \"failed\"\n        exit 1\n    fi\n}\n\n# Notarize packages\nnotarize_packages() {\n    if [ \"$SKIP_NOTARIZATION\" = true ] || [ \"$SKIP_SIGNING\" = true ]; then\n        log_info \"Skipping notarization\"\n        return 0\n    fi\n    \n    log_step \"Notarizing Packages\"\n    \n    # Find Developer ID packages (App Store packages don't need notarization)\n    local packages_to_notarize=()\n    while IFS= read -r -d '' pkg; do\n        if [[ \"$(basename \"$pkg\")\" == *\"indi.pkg\" ]]; then\n            packages_to_notarize+=(\"$pkg\")\n        fi\n    done < <(find artifacts -name \"*.pkg\" -print0 2>/dev/null)\n    \n    if [ ${#packages_to_notarize[@]} -eq 0 ]; then\n        log_warning \"No packages found for notarization\"\n        track_step \"notarize_packages\" \"success\"\n        return 0\n    fi\n    \n    local notarized_count=0\n    local failed_count=0\n    \n    for pkg in \"${packages_to_notarize[@]}\"; do\n        log_info \"Notarizing $(basename \"$pkg\")...\"\n        \n        if ./.github/scripts/notarize-package.sh \"$pkg\"; then\n            log_success \"Successfully notarized $(basename \"$pkg\")\"\n            ((notarized_count++))\n        else\n            log_error \"Failed to notarize $(basename \"$pkg\")\"\n            ((failed_count++))\n            \n            # Don't exit immediately - try to notarize other packages\n            # In self-hosted environments, notarization failures might be acceptable\n            if [ \"${IS_SELF_HOSTED:-false}\" != \"true\" ]; then\n                track_step \"notarize_packages\" \"failed\"\n                exit 1\n            fi\n        fi\n    done\n    \n    log_info \"Notarization summary: $notarized_count successful, $failed_count failed\"\n    \n    if [ $notarized_count -gt 0 ]; then\n        track_step \"notarize_packages\" \"success\"\n    elif [ $failed_count -gt 0 ] && [ \"${IS_SELF_HOSTED:-false}\" != \"true\" ]; then\n        track_step \"notarize_packages\" \"failed\"\n        exit 1\n    else\n        track_step \"notarize_packages\" \"success\"\n    fi\n}\n\n# Create final package bundle\ncreate_package_bundle() {\n    log_step \"Creating Package Bundle\"\n    \n    if [ -f \".github/scripts/package-macos-apps.sh\" ]; then\n        if ./.github/scripts/package-macos-apps.sh \"$VERSION\" \"$BUILD_TYPE\"; then\n            log_success \"Package bundle created successfully\"\n            track_step \"create_package_bundle\" \"success\"\n        else\n            log_warning \"Package bundle creation failed (non-critical)\"\n            track_step \"create_package_bundle\" \"success\"\n        fi\n    else\n        log_info \"Package bundling script not found, skipping\"\n        track_step \"create_package_bundle\" \"success\"\n    fi\n}\n\n# Generate build summary\ngenerate_build_summary() {\n    log_step \"Generating Build Summary\"\n    \n    local summary_file=\"artifacts/BUILD_SUMMARY_CI_${VERSION}.md\"\n    mkdir -p artifacts\n    \n    cat > \"$summary_file\" << EOF\n# R2MIDI CI/CD Build Summary\n\n**Version:** $VERSION  \n**Build Type:** $BUILD_TYPE  \n**Build Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')  \n**Platform:** macOS (CI/CD)  \n**Runner Type:** ${RUNNER_TYPE:-unknown}  \n**Self-hosted:** ${IS_SELF_HOSTED:-unknown}  \n\n## Build Configuration\n\n- **Signing:** $([ \"$SKIP_SIGNING\" = true ] && echo \"Disabled\" || echo \"Enabled\")\n- **Notarization:** $([ \"$SKIP_NOTARIZATION\" = true ] && echo \"Disabled\" || echo \"Enabled\")\n- **Build Capabilities:** ${BUILD_CAPABILITIES:-none}\n\n## Build Steps\n\n### ✅ Completed Steps\nEOF\n\n    for step in \"${BUILD_STEPS_COMPLETED[@]}\"; do\n        echo \"- $step\" >> \"$summary_file\"\n    done\n    \n    if [ ${#BUILD_STEPS_FAILED[@]} -gt 0 ]; then\n        echo \"\" >> \"$summary_file\"\n        echo \"### ❌ Failed Steps\" >> \"$summary_file\"\n        for step in \"${BUILD_STEPS_FAILED[@]}\"; do\n            echo \"- $step\" >> \"$summary_file\"\n        done\n    fi\n    \n    cat >> \"$summary_file\" << EOF\n\n## Generated Artifacts\n\nEOF\n\n    # List artifacts\n    if [ -d \"artifacts\" ]; then\n        find artifacts -name \"*.pkg\" -o -name \"*.dmg\" -o -name \"*.zip\" | sort | while read artifact; do\n            if [ -f \"$artifact\" ]; then\n                local size=$(du -sh \"$artifact\" 2>/dev/null | cut -f1 || echo \"unknown\")\n                echo \"- **$(basename \"$artifact\")** ($size)\" >> \"$summary_file\"\n            fi\n        done\n    fi\n    \n    cat >> \"$summary_file\" << EOF\n\n## Next Steps\n\n1. **Download artifacts** from the CI/CD pipeline\n2. **Test installation** on clean macOS systems\n3. **Distribute packages** through appropriate channels\n\n---\nGenerated by build-macos-ci.sh\nEOF\n\n    log_success \"Build summary created: $summary_file\"\n    track_step \"generate_build_summary\" \"success\"\n}\n\n# Cleanup (if needed)\ncleanup_build() {\n    if [ \"${AGGRESSIVE_CLEANUP:-false}\" = \"true\" ]; then\n        log_step \"Cleaning Up Build Environment\"\n        \n        if [ -f \".github/scripts/cleanup-build.sh\" ]; then\n            ./.github/scripts/cleanup-build.sh --keep-artifacts\n            log_success \"Build cleanup completed\"\n        fi\n    fi\n}\n\n# Main execution workflow\nmain() {\n    echo \"🚀 Starting R2MIDI CI/CD build workflow...\"\n    \n    # Core workflow steps\n    check_environment\n    detect_environment\n    extract_version\n    setup_certificates\n    build_applications\n    sign_applications\n    create_packages\n    notarize_packages\n    create_package_bundle\n    generate_build_summary\n    cleanup_build\n    \n    # Final summary\n    log_step \"Build Complete\"\n    \n    log_success \"🎉 R2MIDI CI/CD build completed successfully!\"\n    echo \"\"\n    echo \"📋 Build Summary:\"\n    echo \"  📦 Version: $VERSION\"\n    echo \"  🏗️ Build Type: $BUILD_TYPE\"\n    echo \"  ✅ Completed Steps: ${#BUILD_STEPS_COMPLETED[@]}\"\n    echo \"  ❌ Failed Steps: ${#BUILD_STEPS_FAILED[@]}\"\n    \n    if [ -d \"artifacts\" ]; then\n        echo \"\"\n        echo \"📦 Generated Artifacts:\"\n        find artifacts -name \"*.pkg\" -o -name \"*.dmg\" -o -name \"*.zip\" | sort | while read artifact; do\n            if [ -f \"$artifact\" ]; then\n                local size=$(du -sh \"$artifact\" 2>/dev/null | cut -f1 || echo \"unknown\")\n                echo \"  - $(basename \"$artifact\") ($size)\"\n            fi\n        done\n    fi\n    \n    echo \"\"\n    echo \"📋 Check artifacts/ directory for all generated files\"\n    echo \"📄 Build summary: artifacts/BUILD_SUMMARY_CI_${VERSION}.md\"\n    \n    return 0\n}\n\n# Error handling\ntrap 'echo \"❌ Build failed at step: ${BASH_LINENO[0]}\"; exit 1' ERR\n\n# Run main workflow\nmain \"$@\"