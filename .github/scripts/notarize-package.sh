#!/bin/bash\n# notarize-package.sh - Notarize a single macOS package\nset -euo pipefail\n\nUSAGE=\"Usage: $0 <package_path> [timeout]\"\n\n# Parse arguments\nif [ $# -lt 1 ]; then\n    echo \"$USAGE\"\n    echo \"timeout: optional timeout (default: 30m for GitHub-hosted, 60m for self-hosted)\"\n    exit 1\nfi\n\nPACKAGE_PATH=\"$1\"\nTIMEOUT=\"${2:-}\"\n\necho \"üçé Notarizing macOS package...\"\necho \"üì¶ Package: $(basename \"$PACKAGE_PATH\")\"\n\n# Load certificate environment\nif [ -f \".cert_environment\" ]; then\n    source .cert_environment\nelse\n    echo \"‚ùå Certificate environment not found. Run setup-certificates-ci.sh first.\"\n    exit 1\nfi\n\n# Load runner environment\nif [ -f \".runner_environment\" ]; then\n    source .runner_environment\nfi\n\n# Set default timeout based on runner type\nif [ -z \"$TIMEOUT\" ]; then\n    if [ \"${IS_SELF_HOSTED:-false}\" = \"true\" ]; then\n        TIMEOUT=\"60m\"\n        echo \"üìã Using extended timeout for self-hosted runner: $TIMEOUT\"\n    else\n        TIMEOUT=\"30m\"\n        echo \"üìã Using standard timeout for GitHub-hosted runner: $TIMEOUT\"\n    fi\nfi\n\n# Verify package exists\nif [ ! -f \"$PACKAGE_PATH\" ]; then\n    echo \"‚ùå Package not found: $PACKAGE_PATH\"\n    exit 1\nfi\n\n# Verify package is signed\nverify_package_signature() {\n    echo \"üîç Verifying package signature before notarization...\"\n    \n    if pkgutil --check-signature \"$PACKAGE_PATH\" >/dev/null 2>&1; then\n        echo \"‚úÖ Package signature verified\"\n        \n        # Show signature details\n        echo \"üìã Package signature details:\"\n        pkgutil --check-signature \"$PACKAGE_PATH\" | head -10\n        \n        return 0\n    else\n        echo \"‚ùå Package signature verification failed\"\n        echo \"‚ùå Cannot notarize unsigned package\"\n        return 1\n    fi\n}\n\n# Check authentication method\ncheck_authentication() {\n    echo \"üîê Checking notarization authentication...\"\n    \n    # Check if App Store Connect API is available\n    if [ -n \"${APP_STORE_CONNECT_API_KEY:-}\" ] && [ -n \"${APP_STORE_CONNECT_KEY_ID:-}\" ] && [ -n \"${APP_STORE_CONNECT_ISSUER_ID:-}\" ]; then\n        echo \"‚úÖ App Store Connect API credentials available\"\n        \n        # Check if notarytool profile exists\n        if xcrun notarytool history --keychain-profile \"r2midi-ci\" --limit 1 >/dev/null 2>&1; then\n            echo \"‚úÖ App Store Connect API profile configured\"\n            export USE_API_KEY=\"true\"\n            return 0\n        else\n            echo \"‚ö†Ô∏è App Store Connect API profile not configured, falling back to Apple ID\"\n        fi\n    fi\n    \n    # Check Apple ID credentials\n    if [ -n \"${APPLE_ID:-}\" ] && [ -n \"${APPLE_ID_PASSWORD:-}\" ] && [ -n \"${APPLE_TEAM_ID:-}\" ]; then\n        echo \"‚úÖ Apple ID credentials available\"\n        export USE_API_KEY=\"false\"\n        return 0\n    else\n        echo \"‚ùå No valid authentication credentials found\"\n        echo \"‚ùå Required: APPLE_ID, APPLE_ID_PASSWORD, APPLE_TEAM_ID\"\n        echo \"‚ùå Or: APP_STORE_CONNECT_API_KEY, APP_STORE_CONNECT_KEY_ID, APP_STORE_CONNECT_ISSUER_ID\"\n        return 1\n    fi\n}\n\n# Submit package for notarization using App Store Connect API\nnotarize_with_api_key() {\n    echo \"üîê Submitting for notarization using App Store Connect API...\"\n    \n    local submit_output\n    submit_output=$(xcrun notarytool submit \"$PACKAGE_PATH\" \\\n        --keychain-profile \"r2midi-ci\" \\\n        --wait \\\n        --timeout \"$TIMEOUT\" 2>&1)\n    \n    local exit_code=$?\n    \n    echo \"üìã Notarization output:\"\n    echo \"$submit_output\"\n    \n    if [ $exit_code -eq 0 ] && echo \"$submit_output\" | grep -q \"status: Accepted\"; then\n        echo \"‚úÖ Notarization successful with App Store Connect API\"\n        return 0\n    else\n        echo \"‚ùå Notarization failed with App Store Connect API\"\n        \n        # Try to get submission ID for detailed log\n        local submission_id\n        submission_id=$(echo \"$submit_output\" | grep -o 'id: [a-f0-9-]*' | cut -d' ' -f2 | head -1)\n        \n        if [ -n \"$submission_id\" ]; then\n            echo \"üìã Getting detailed log for submission: $submission_id\"\n            xcrun notarytool log \"$submission_id\" \\\n                --keychain-profile \"r2midi-ci\" 2>&1 || true\n        fi\n        \n        return 1\n    fi\n}\n\n# Submit package for notarization using Apple ID\nnotarize_with_apple_id() {\n    echo \"üçé Submitting for notarization using Apple ID...\"\n    \n    local submit_output\n    submit_output=$(xcrun notarytool submit \"$PACKAGE_PATH\" \\\n        --apple-id \"$APPLE_ID\" \\\n        --password \"$APPLE_ID_PASSWORD\" \\\n        --team-id \"$APPLE_TEAM_ID\" \\\n        --wait \\\n        --timeout \"$TIMEOUT\" 2>&1)\n    \n    local exit_code=$?\n    \n    echo \"üìã Notarization output:\"\n    echo \"$submit_output\"\n    \n    if [ $exit_code -eq 0 ] && echo \"$submit_output\" | grep -q \"status: Accepted\"; then\n        echo \"‚úÖ Notarization successful with Apple ID\"\n        return 0\n    else\n        echo \"‚ùå Notarization failed with Apple ID\"\n        \n        # Try to get submission ID for detailed log\n        local submission_id\n        submission_id=$(echo \"$submit_output\" | grep -o 'id: [a-f0-9-]*' | cut -d' ' -f2 | head -1)\n        \n        if [ -n \"$submission_id\" ]; then\n            echo \"üìã Getting detailed log for submission: $submission_id\"\n            xcrun notarytool log \"$submission_id\" \\\n                --apple-id \"$APPLE_ID\" \\\n                --password \"$APPLE_ID_PASSWORD\" \\\n                --team-id \"$APPLE_TEAM_ID\" 2>&1 || true\n        fi\n        \n        return 1\n    fi\n}\n\n# Staple notarization ticket\nstaple_notarization() {\n    echo \"üìé Stapling notarization ticket...\"\n    \n    if xcrun stapler staple \"$PACKAGE_PATH\"; then\n        echo \"‚úÖ Notarization ticket stapled successfully\"\n        \n        # Verify stapling\n        echo \"üîç Verifying stapled ticket...\"\n        if xcrun stapler validate \"$PACKAGE_PATH\"; then\n            echo \"‚úÖ Stapled ticket validation passed\"\n        else\n            echo \"‚ö†Ô∏è Stapled ticket validation failed\"\n        fi\n        \n        return 0\n    else\n        echo \"‚ö†Ô∏è Failed to staple notarization ticket (package is still notarized)\"\n        return 1\n    fi\n}\n\n# Final Gatekeeper verification\nfinal_verification() {\n    echo \"üîç Performing final Gatekeeper verification...\"\n    \n    if spctl --assess --type install --verbose \"$PACKAGE_PATH\"; then\n        echo \"‚úÖ Final Gatekeeper assessment passed\"\n        return 0\n    else\n        echo \"‚ùå Final Gatekeeper assessment failed\"\n        return 1\n    fi\n}\n\n# Save notarization status\nsave_notarization_status() {\n    local status=\"$1\"\n    local package_name=$(basename \"$PACKAGE_PATH\")\n    local status_file=\"artifacts/NOTARIZATION_STATUS.txt\"\n    \n    # Create or append to status file\n    if [ ! -f \"$status_file\" ]; then\n        cat > \"$status_file\" << EOF\nR2MIDI Notarization Status Report\n==================================\n\nGenerated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')\n\nPackage Status:\nEOF\n    fi\n    \n    local timestamp=$(date -u '+%Y-%m-%d %H:%M:%S UTC')\n    echo \"$package_name: $status ($timestamp)\" >> \"$status_file\"\n    \n    echo \"üìã Notarization status saved to $status_file\"\n}\n\n# Main notarization workflow\nmain() {\n    echo \"üöÄ Starting notarization workflow...\"\n    \n    # Verify package signature first\n    if ! verify_package_signature; then\n        save_notarization_status \"FAILED - unsigned package\"\n        exit 1\n    fi\n    \n    # Check authentication\n    if ! check_authentication; then\n        save_notarization_status \"FAILED - no authentication\"\n        exit 1\n    fi\n    \n    # Submit for notarization\n    local notarization_success=false\n    \n    if [ \"${USE_API_KEY:-false}\" = \"true\" ]; then\n        if notarize_with_api_key; then\n            notarization_success=true\n        fi\n    fi\n    \n    # Fall back to Apple ID if API key failed or not available\n    if [ \"$notarization_success\" = false ] && [ \"${USE_API_KEY:-false}\" != \"true\" ]; then\n        if notarize_with_apple_id; then\n            notarization_success=true\n        fi\n    fi\n    \n    # Check if notarization succeeded\n    if [ \"$notarization_success\" = false ]; then\n        echo \"‚ùå Notarization failed with all available methods\"\n        save_notarization_status \"FAILED - notarization rejected\"\n        \n        # In self-hosted runners, this might be acceptable for development\n        if [ \"${IS_SELF_HOSTED:-false}\" = \"true\" ]; then\n            echo \"‚ö†Ô∏è Continuing on self-hosted runner despite notarization failure\"\n            return 0\n        fi\n        \n        exit 1\n    fi\n    \n    # Staple the notarization ticket\n    local stapling_success=false\n    if staple_notarization; then\n        stapling_success=true\n    fi\n    \n    # Final verification\n    local gatekeeper_success=false\n    if final_verification; then\n        gatekeeper_success=true\n    fi\n    \n    # Determine final status\n    if [ \"$notarization_success\" = true ] && [ \"$stapling_success\" = true ] && [ \"$gatekeeper_success\" = true ]; then\n        echo \"‚úÖ Notarization completed successfully!\"\n        echo \"üì¶ Package: $(basename \"$PACKAGE_PATH\")\"\n        echo \"üé´ Status: Notarized and stapled\"\n        echo \"üîí Gatekeeper: Passes assessment\"\n        \n        save_notarization_status \"SUCCESS - fully notarized\"\n        return 0\n    elif [ \"$notarization_success\" = true ]; then\n        echo \"‚úÖ Notarization succeeded (some post-processing issues)\"\n        echo \"üì¶ Package: $(basename \"$PACKAGE_PATH\")\"\n        echo \"üé´ Status: Notarized\"\n        \n        if [ \"$stapling_success\" = false ]; then\n            echo \"‚ö†Ô∏è Stapling: Failed (package is still notarized)\"\n        fi\n        \n        if [ \"$gatekeeper_success\" = false ]; then\n            echo \"‚ö†Ô∏è Gatekeeper: Assessment failed\"\n        fi\n        \n        save_notarization_status \"SUCCESS - notarized (post-processing issues)\"\n        return 0\n    else\n        echo \"‚ùå Notarization failed\"\n        save_notarization_status \"FAILED - unknown error\"\n        return 1\n    fi\n}\n\n# Run main function\nmain \"$@\"