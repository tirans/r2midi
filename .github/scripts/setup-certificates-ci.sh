#!/bin/bash\n# setup-certificates-ci.sh - Setup certificates for GitHub Actions/CI environment\nset -euo pipefail\n\necho \"🔐 Setting up certificates for CI environment...\"\n\n# Load runner environment\nif [ -f \".runner_environment\" ]; then\n    source .runner_environment\nelse\n    echo \"⚠️ Runner environment not detected, assuming GitHub Actions\"\n    IS_SELF_HOSTED=\"false\"\nfi\n\n# Check required environment variables\ncheck_required_vars() {\n    local missing_vars=()\n    \n    if [ -z \"${APPLE_DEVELOPER_ID_APPLICATION_CERT:-}\" ]; then\n        missing_vars+=(\"APPLE_DEVELOPER_ID_APPLICATION_CERT\")\n    fi\n    \n    if [ -z \"${APPLE_DEVELOPER_ID_INSTALLER_CERT:-}\" ]; then\n        missing_vars+=(\"APPLE_DEVELOPER_ID_INSTALLER_CERT\")\n    fi\n    \n    if [ -z \"${APPLE_CERT_PASSWORD:-}\" ]; then\n        missing_vars+=(\"APPLE_CERT_PASSWORD\")\n    fi\n    \n    if [ -z \"${APPLE_ID:-}\" ]; then\n        missing_vars+=(\"APPLE_ID\")\n    fi\n    \n    if [ -z \"${APPLE_ID_PASSWORD:-}\" ]; then\n        missing_vars+=(\"APPLE_ID_PASSWORD\")\n    fi\n    \n    if [ -z \"${APPLE_TEAM_ID:-}\" ]; then\n        missing_vars+=(\"APPLE_TEAM_ID\")\n    fi\n    \n    if [ ${#missing_vars[@]} -gt 0 ]; then\n        echo \"❌ Missing required environment variables:\"\n        for var in \"${missing_vars[@]}\"; do\n            echo \"  - $var\"\n        done\n        return 1\n    fi\n    \n    echo \"✅ All required environment variables found\"\n    return 0\n}\n\n# Create certificates directory\nsetup_cert_directory() {\n    echo \"📁 Setting up certificate directory...\"\n    \n    CERT_DIR=\"/tmp/github_certs\"\n    rm -rf \"$CERT_DIR\" 2>/dev/null || true\n    mkdir -p \"$CERT_DIR\"\n    \n    # Decode and save Developer ID certificates\n    echo \"📜 Decoding application certificate...\"\n    echo \"$APPLE_DEVELOPER_ID_APPLICATION_CERT\" | base64 --decode > \"$CERT_DIR/app_cert.p12\"\n    \n    echo \"📜 Decoding installer certificate...\"\n    echo \"$APPLE_DEVELOPER_ID_INSTALLER_CERT\" | base64 --decode > \"$CERT_DIR/installer_cert.p12\"\n    \n    # Decode App Store certificate if available\n    if [ -n \"${APPLE_APP_STORE_CERTIFICATE_P12:-}\" ]; then\n        echo \"📜 Decoding App Store certificate...\"\n        echo \"$APPLE_APP_STORE_CERTIFICATE_P12\" | base64 --decode > \"$CERT_DIR/app_store_cert.p12\"\n        export APP_STORE_CERT_AVAILABLE=\"true\"\n    else\n        echo \"⚠️ App Store certificate not provided (optional)\"\n        export APP_STORE_CERT_AVAILABLE=\"false\"\n    fi\n    \n    echo \"✅ Certificates decoded and saved to $CERT_DIR\"\n}\n\n# Create and configure keychain\nsetup_keychain() {\n    echo \"🔑 Setting up temporary keychain...\"\n    \n    # Create unique keychain name\n    TEMP_KEYCHAIN=\"r2midi-ci-$(date +%s)-$RANDOM.keychain\"\n    TEMP_KEYCHAIN_PASSWORD=\"ci_$(date +%s)_$(openssl rand -hex 8)\"\n    \n    echo \"🔑 Creating keychain: $TEMP_KEYCHAIN\"\n    \n    # Clean up any existing keychains from previous runs\n    if [ \"$IS_SELF_HOSTED\" = \"true\" ]; then\n        echo \"🧹 Cleaning up old keychains on self-hosted runner...\"\n        if security list-keychains -d user | grep -q \"r2midi-\"; then\n            security list-keychains -d user | grep \"r2midi-\" | sed 's/\"//g' | while read keychain; do\n                echo \"  Removing old keychain: $(basename \"$keychain\")\"\n                security delete-keychain \"$keychain\" 2>/dev/null || true\n            done\n        fi\n    fi\n    \n    # Create new keychain\n    security create-keychain -p \"$TEMP_KEYCHAIN_PASSWORD\" \"$TEMP_KEYCHAIN\"\n    security set-keychain-settings -lut 21600 \"$TEMP_KEYCHAIN\"  # 6 hours timeout\n    security unlock-keychain -p \"$TEMP_KEYCHAIN_PASSWORD\" \"$TEMP_KEYCHAIN\"\n    \n    # Add to keychain search list\n    existing_keychains=$(security list-keychains -d user | sed 's/\"//g' | grep -v \"r2midi-\" || true)\n    security list-keychains -d user -s \"$TEMP_KEYCHAIN\" $existing_keychains\n    \n    echo \"✅ Keychain created and configured\"\n}\n\n# Import certificates into keychain\nimport_certificates() {\n    echo \"📥 Importing certificates into keychain...\"\n    \n    # Import Developer ID Application certificate\n    echo \"📥 Importing application certificate...\"\n    security import \"$CERT_DIR/app_cert.p12\" \\\n        -k \"$TEMP_KEYCHAIN\" \\\n        -P \"$APPLE_CERT_PASSWORD\" \\\n        -T /usr/bin/codesign \\\n        -T /usr/bin/security\n    \n    # Import Developer ID Installer certificate\n    echo \"📥 Importing installer certificate...\"\n    security import \"$CERT_DIR/installer_cert.p12\" \\\n        -k \"$TEMP_KEYCHAIN\" \\\n        -P \"$APPLE_CERT_PASSWORD\" \\\n        -T /usr/bin/productsign \\\n        -T /usr/bin/security\n    \n    # Import App Store certificate if available\n    if [ \"$APP_STORE_CERT_AVAILABLE\" = \"true\" ]; then\n        echo \"📥 Importing App Store certificate...\"\n        local app_store_password=\"${APPLE_APP_STORE_CERTIFICATE_PASSWORD:-$APPLE_CERT_PASSWORD}\"\n        security import \"$CERT_DIR/app_store_cert.p12\" \\\n            -k \"$TEMP_KEYCHAIN\" \\\n            -P \"$app_store_password\" \\\n            -T /usr/bin/codesign \\\n            -T /usr/bin/security\n    fi\n    \n    # Set partition list to avoid prompts\n    echo \"🔓 Setting keychain partition list...\"\n    security set-key-partition-list \\\n        -S apple-tool:,apple:,codesign: \\\n        -s -k \"$TEMP_KEYCHAIN_PASSWORD\" \\\n        \"$TEMP_KEYCHAIN\"\n    \n    echo \"✅ All certificates imported successfully\"\n}\n\n# Find and verify signing identities\nfind_signing_identities() {\n    echo \"🔍 Finding signing identities...\"\n    \n    # Find Developer ID Application identity\n    DEVELOPER_ID_APP_SIGNING_IDENTITY=$(security find-identity -v -p codesigning \"$TEMP_KEYCHAIN\" | \\\n        grep \"Developer ID Application\" | head -1 | \\\n        sed 's/.*\"\\(.*\\)\".*/\\1/')\n    \n    # Find Developer ID Installer identity\n    DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY=$(security find-identity -v -p codesigning \"$TEMP_KEYCHAIN\" | \\\n        grep \"Developer ID Installer\" | head -1 | \\\n        sed 's/.*\"\\(.*\\)\".*/\\1/')\n    \n    # Find App Store identity if available\n    APP_STORE_SIGNING_IDENTITY=\"\"\n    if [ \"$APP_STORE_CERT_AVAILABLE\" = \"true\" ]; then\n        APP_STORE_SIGNING_IDENTITY=$(security find-identity -v -p codesigning \"$TEMP_KEYCHAIN\" | \\\n            grep -E \"(3rd Party Mac Developer Application|Apple Distribution)\" | head -1 | \\\n            sed 's/.*\"\\(.*\\)\".*/\\1/')\n    fi\n    \n    # Verify we found the required identities\n    if [ -z \"$DEVELOPER_ID_APP_SIGNING_IDENTITY\" ]; then\n        echo \"❌ No Developer ID Application signing identity found\"\n        return 1\n    fi\n    \n    if [ -z \"$DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY\" ]; then\n        echo \"❌ No Developer ID Installer signing identity found\"\n        return 1\n    fi\n    \n    echo \"✅ Developer ID App: $DEVELOPER_ID_APP_SIGNING_IDENTITY\"\n    echo \"✅ Developer ID Installer: $DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY\"\n    \n    if [ -n \"$APP_STORE_SIGNING_IDENTITY\" ]; then\n        echo \"✅ App Store: $APP_STORE_SIGNING_IDENTITY\"\n    else\n        echo \"ℹ️ App Store identity not available\"\n    fi\n}\n\n# Setup App Store Connect API if available\nsetup_app_store_connect_api() {\n    if [ -n \"${APP_STORE_CONNECT_API_KEY:-}\" ] && [ -n \"${APP_STORE_CONNECT_KEY_ID:-}\" ] && [ -n \"${APP_STORE_CONNECT_ISSUER_ID:-}\" ]; then\n        echo \"🔐 Setting up App Store Connect API...\"\n        \n        # Run the dedicated setup script\n        if [ -f \".github/scripts/setup-notarization-api.sh\" ]; then\n            ./.github/scripts/setup-notarization-api.sh\n        else\n            echo \"⚠️ setup-notarization-api.sh not found, using basic setup\"\n            \n            # Basic setup\n            API_KEY_DIR=\"$HOME/.appstoreconnect/private_keys\"\n            mkdir -p \"$API_KEY_DIR\"\n            API_KEY_FILE=\"$API_KEY_DIR/AuthKey_${APP_STORE_CONNECT_KEY_ID}.p8\"\n            echo \"$APP_STORE_CONNECT_API_KEY\" > \"$API_KEY_FILE\"\n            chmod 600 \"$API_KEY_FILE\"\n            \n            xcrun notarytool store-credentials \"r2midi-ci\" \\\n                --key \"$API_KEY_FILE\" \\\n                --key-id \"$APP_STORE_CONNECT_KEY_ID\" \\\n                --issuer \"$APP_STORE_CONNECT_ISSUER_ID\" 2>&1 || true\n        fi\n    else\n        echo \"ℹ️ App Store Connect API not configured, will use Apple ID for notarization\"\n    fi\n}\n\n# Create environment file for other scripts\ncreate_environment_file() {\n    echo \"📄 Creating certificate environment file...\"\n    \n    cat > .cert_environment << EOF\n# Certificate Environment Configuration\n# Generated by setup-certificates-ci.sh on $(date)\n\nexport TEMP_KEYCHAIN=\"$TEMP_KEYCHAIN\"\nexport TEMP_KEYCHAIN_PASSWORD=\"$TEMP_KEYCHAIN_PASSWORD\"\nexport DEVELOPER_ID_APP_SIGNING_IDENTITY=\"$DEVELOPER_ID_APP_SIGNING_IDENTITY\"\nexport DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY=\"$DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY\"\nexport APP_STORE_SIGNING_IDENTITY=\"$APP_STORE_SIGNING_IDENTITY\"\nexport APP_STORE_CERT_AVAILABLE=\"$APP_STORE_CERT_AVAILABLE\"\nexport CERTIFICATES_IMPORTED=\"true\"\n\n# Apple ID credentials\nexport APPLE_ID=\"$APPLE_ID\"\nexport APPLE_ID_PASSWORD=\"$APPLE_ID_PASSWORD\"\nexport APPLE_TEAM_ID=\"$APPLE_TEAM_ID\"\n\n# Compatibility aliases\nexport APP_SIGNING_IDENTITY=\"$DEVELOPER_ID_APP_SIGNING_IDENTITY\"\nexport INSTALLER_SIGNING_IDENTITY=\"$DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY\"\nEOF\n\n    echo \"✅ Certificate environment saved to .cert_environment\"\n}\n\n# Main execution\nmain() {\n    echo \"🚀 Starting certificate setup for CI...\"\n    \n    # Check prerequisites\n    if ! check_required_vars; then\n        exit 1\n    fi\n    \n    # Setup certificates\n    setup_cert_directory\n    setup_keychain\n    import_certificates\n    find_signing_identities\n    setup_app_store_connect_api\n    create_environment_file\n    \n    echo \"✅ Certificate setup complete!\"\n    echo \"📋 Keychain: $TEMP_KEYCHAIN\"\n    echo \"📋 App Identity: $DEVELOPER_ID_APP_SIGNING_IDENTITY\"\n    echo \"📋 Installer Identity: $DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY\"\n    \n    if [ -n \"$APP_STORE_SIGNING_IDENTITY\" ]; then\n        echo \"📋 App Store Identity: $APP_STORE_SIGNING_IDENTITY\"\n    fi\n    \n    echo \"📋 Environment file: .cert_environment\"\n}\n\n# Run main function\nmain \"$@\"