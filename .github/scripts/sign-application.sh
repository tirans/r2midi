#!/bin/bash\n# sign-application.sh - Sign a single macOS application with enhanced inside-out approach\nset -euo pipefail\n\nUSAGE=\"Usage: $0 <app_path> <app_type> [signing_type]\"\n\n# Parse arguments\nif [ $# -lt 2 ]; then\n    echo \"$USAGE\"\n    echo \"app_type: server|client\"\n    echo \"signing_type: developer_id|app_store (default: developer_id)\"\n    exit 1\nfi\n\nAPP_PATH=\"$1\"\nAPP_TYPE=\"$2\"\nSIGNING_TYPE=\"${3:-developer_id}\"\n\necho \"🔐 Signing application with enhanced inside-out approach...\"\necho \"📱 App: $(basename \"$APP_PATH\")\"\necho \"🏷️ Type: $APP_TYPE\"\necho \"🔖 Signing: $SIGNING_TYPE\"\n\n# Load certificate environment\nif [ -f \".cert_environment\" ]; then\n    source .cert_environment\nelse\n    echo \"❌ Certificate environment not found. Run setup-certificates-ci.sh first.\"\n    exit 1\nfi\n\n# Verify app exists\nif [ ! -d \"$APP_PATH\" ]; then\n    echo \"❌ App bundle not found: $APP_PATH\"\n    exit 1\nfi\n\n# Get signing identity based on type\nget_signing_identity() {\n    case \"$SIGNING_TYPE\" in\n        \"app_store\")\n            if [ -z \"${APP_STORE_SIGNING_IDENTITY:-}\" ]; then\n                echo \"❌ App Store signing identity not available\"\n                exit 1\n            fi\n            echo \"$APP_STORE_SIGNING_IDENTITY\"\n            ;;\n        \"developer_id\"|*)\n            if [ -z \"${DEVELOPER_ID_APP_SIGNING_IDENTITY:-}\" ]; then\n                echo \"❌ Developer ID signing identity not available\"\n                exit 1\n            fi\n            echo \"$DEVELOPER_ID_APP_SIGNING_IDENTITY\"\n            ;;\n    esac\n}\n\n# Create entitlements file\ncreate_entitlements() {\n    local entitlements_file=\"$(dirname \"$APP_PATH\")/entitlements-${APP_TYPE}.plist\"\n    \n    echo \"📝 Creating entitlements for $APP_TYPE...\"\n    \n    cat > \"$entitlements_file\" << EOF\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>com.apple.security.cs.allow-jit</key>\n    <true/>\n    <key>com.apple.security.cs.allow-unsigned-executable-memory</key>\n    <true/>\n    <key>com.apple.security.cs.disable-library-validation</key>\n    <true/>\n    <key>com.apple.security.cs.allow-dyld-environment-variables</key>\n    <true/>\n    <key>com.apple.security.network.client</key>\n    <true/>\n    <key>com.apple.security.files.user-selected.read-write</key>\n    <true/>\n    <key>com.apple.security.files.downloads.read-write</key>\n    <true/>\nEOF\n\n    # Add server-specific entitlements\n    if [ \"$APP_TYPE\" = \"server\" ]; then\n        cat >> \"$entitlements_file\" << EOF\n    <key>com.apple.security.network.server</key>\n    <true/>\n    <key>com.apple.security.device.audio-input</key>\n    <true/>\n    <key>com.apple.security.device.microphone</key>\n    <true/>\nEOF\n    fi\n\n    cat >> \"$entitlements_file\" << EOF\n</dict>\n</plist>\nEOF\n\n    echo \"✅ Entitlements created: $entitlements_file\"\n    echo \"$entitlements_file\"\n}\n\n# Remove existing signatures\nremove_existing_signatures() {\n    echo \"🧹 Removing existing signatures...\"\n    find \"$APP_PATH\" -name \"_CodeSignature\" -type d -exec rm -rf {} + 2>/dev/null || true\n    echo \"✅ Existing signatures removed\"\n}\n\n# Sign libraries and frameworks (inside-out approach)\nsign_embedded_components() {\n    local signing_identity=\"$1\"\n    local entitlements_file=\"$2\"\n    \n    echo \"📚 Signing embedded libraries and frameworks...\"\n    \n    # Sign .dylib and .so files\n    find \"$APP_PATH\" -type f \\( -name \"*.dylib\" -o -name \"*.so\" \\) | while read lib; do\n        if [ -f \"$lib\" ]; then\n            local lib_name=$(basename \"$lib\")\n            echo \"  🔗 Signing library: $lib_name\"\n            codesign --force --sign \"$signing_identity\" \\\n                     --options runtime \\\n                     --timestamp \\\n                     --keychain \"$TEMP_KEYCHAIN\" \\\n                     \"$lib\" || echo \"  ⚠️ Warning: Failed to sign library: $lib_name\"\n        fi\n    done\n    \n    # Sign frameworks (deepest first)\n    find \"$APP_PATH\" -name \"*.framework\" -type d | sort -r | while read framework; do\n        if [ -d \"$framework\" ]; then\n            local framework_name=$(basename \"$framework\")\n            echo \"  🔗 Signing framework: $framework_name\"\n            codesign --force --sign \"$signing_identity\" \\\n                     --options runtime \\\n                     --timestamp \\\n                     --keychain \"$TEMP_KEYCHAIN\" \\\n                     \"$framework\" || echo \"  ⚠️ Warning: Failed to sign framework: $framework_name\"\n        fi\n    done\n    \n    echo \"✅ Embedded components signed\"\n}\n\n# Sign executables in Contents/MacOS\nsign_executables() {\n    local signing_identity=\"$1\"\n    local entitlements_file=\"$2\"\n    \n    if [ ! -d \"$APP_PATH/Contents/MacOS\" ]; then\n        echo \"⚠️ No Contents/MacOS directory found\"\n        return 0\n    fi\n    \n    echo \"⚡ Signing executables in Contents/MacOS...\"\n    \n    find \"$APP_PATH/Contents/MacOS\" -type f | while read executable; do\n        if [ -f \"$executable\" ] && file \"$executable\" | grep -q \"Mach-O\"; then\n            local exec_name=$(basename \"$executable\")\n            echo \"  ⚡ Signing executable: $exec_name\"\n            \n            # Use entitlements for main executable and Python interpreter\n            if [[ \"$exec_name\" == \"python\"* ]] || [[ \"$exec_name\" == *\"Server\"* ]] || [[ \"$exec_name\" == *\"Client\"* ]]; then\n                echo \"    🔑 Signing $exec_name with entitlements\"\n                codesign --force --sign \"$signing_identity\" \\\n                         --options runtime \\\n                         --timestamp \\\n                         --entitlements \"$entitlements_file\" \\\n                         --keychain \"$TEMP_KEYCHAIN\" \\\n                         \"$executable\"\n            else\n                echo \"    🔓 Signing $exec_name without entitlements\"\n                codesign --force --sign \"$signing_identity\" \\\n                         --options runtime \\\n                         --timestamp \\\n                         --keychain \"$TEMP_KEYCHAIN\" \\\n                         \"$executable\"\n            fi\n            \n            if [ $? -ne 0 ]; then\n                echo \"    ❌ Failed to sign executable: $exec_name\"\n                return 1\n            fi\n            \n            # Verify critical executables\n            if [[ \"$exec_name\" == \"python\"* ]]; then\n                echo \"    🔍 Verifying Python executable signature...\"\n                if codesign --verify --verbose=2 --keychain \"$TEMP_KEYCHAIN\" \"$executable\"; then\n                    echo \"    ✅ Python executable signature verified\"\n                else\n                    echo \"    ❌ Python executable signature verification failed\"\n                    return 1\n                fi\n            fi\n        fi\n    done\n    \n    echo \"✅ All executables signed\"\n}\n\n# Sign nested applications\nsign_nested_apps() {\n    local signing_identity=\"$1\"\n    local entitlements_file=\"$2\"\n    \n    echo \"📱 Checking for nested applications...\"\n    \n    find \"$APP_PATH\" -name \"*.app\" -not -path \"$APP_PATH\" | while read nested_app; do\n        if [ -d \"$nested_app\" ]; then\n            local nested_name=$(basename \"$nested_app\")\n            echo \"  📱 Signing nested app: $nested_name\"\n            codesign --force --sign \"$signing_identity\" \\\n                     --options runtime \\\n                     --timestamp \\\n                     --entitlements \"$entitlements_file\" \\\n                     --keychain \"$TEMP_KEYCHAIN\" \\\n                     \"$nested_app\" || echo \"  ⚠️ Warning: Failed to sign nested app: $nested_name\"\n        fi\n    done\n    \n    echo \"✅ Nested applications processed\"\n}\n\n# Sign the main app bundle\nsign_main_bundle() {\n    local signing_identity=\"$1\"\n    local entitlements_file=\"$2\"\n    local app_name=$(basename \"$APP_PATH\")\n    \n    echo \"🎯 Signing main app bundle: $app_name\"\n    \n    # Unlock keychain before signing\n    security unlock-keychain -p \"$TEMP_KEYCHAIN_PASSWORD\" \"$TEMP_KEYCHAIN\"\n    \n    codesign --force --sign \"$signing_identity\" \\\n             --options runtime \\\n             --timestamp \\\n             --entitlements \"$entitlements_file\" \\\n             --keychain \"$TEMP_KEYCHAIN\" \\\n             \"$APP_PATH\"\n    \n    if [ $? -ne 0 ]; then\n        echo \"❌ Failed to sign main app bundle: $app_name\"\n        return 1\n    fi\n    \n    echo \"✅ Main app bundle signed successfully\"\n}\n\n# Verify app signature\nverify_signature() {\n    local app_name=$(basename \"$APP_PATH\")\n    \n    echo \"🔍 Verifying app bundle signature...\"\n    \n    # Deep verification\n    if codesign --verify --deep --strict --verbose=2 --keychain \"$TEMP_KEYCHAIN\" \"$APP_PATH\"; then\n        echo \"✅ Signature verification passed for $app_name\"\n    else\n        echo \"❌ Signature verification failed for $app_name\"\n        return 1\n    fi\n    \n    # Check Gatekeeper compatibility\n    echo \"🔍 Checking Gatekeeper compatibility...\"\n    if spctl --assess --type exec --verbose \"$APP_PATH\"; then\n        echo \"✅ Gatekeeper assessment passed\"\n    else\n        echo \"⚠️ Gatekeeper assessment failed (may pass after notarization)\"\n    fi\n    \n    # Display signature info\n    echo \"📋 Signature details:\"\n    codesign --display --verbose=2 \"$APP_PATH\" 2>&1 | grep -E \"(Authority|TeamIdentifier|Signature)\" | head -5\n    \n    return 0\n}\n\n# Main signing workflow\nmain() {\n    local signing_identity\n    signing_identity=$(get_signing_identity)\n    \n    echo \"🔐 Using signing identity: $signing_identity\"\n    \n    # Create entitlements\n    local entitlements_file\n    entitlements_file=$(create_entitlements)\n    \n    # Remove existing signatures\n    remove_existing_signatures\n    \n    # Enhanced inside-out signing\n    sign_embedded_components \"$signing_identity\" \"$entitlements_file\"\n    sign_nested_apps \"$signing_identity\" \"$entitlements_file\"\n    sign_executables \"$signing_identity\" \"$entitlements_file\"\n    sign_main_bundle \"$signing_identity\" \"$entitlements_file\"\n    \n    # Verify the signature\n    verify_signature\n    \n    echo \"✅ Application signing completed successfully!\"\n    echo \"📱 Signed app: $APP_PATH\"\n    echo \"🔖 Signing type: $SIGNING_TYPE\"\n    echo \"🏷️ App type: $APP_TYPE\"\n    \n    return 0\n}\n\n# Run main function\nmain \"$@\"