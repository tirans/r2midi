#!/bin/bash\n# create-packages.sh - Create dual packages (Developer ID + App Store) for macOS applications\nset -euo pipefail\n\nUSAGE=\"Usage: $0 <app_path> <app_name> <version> <identifier>\"\n\n# Parse arguments\nif [ $# -ne 4 ]; then\n    echo \"$USAGE\"\n    echo \"Example: $0 'dist/R2MIDI Server.app' 'R2MIDI-Server' '1.0.0' 'com.r2midi.server'\"\n    exit 1\nfi\n\nAPP_PATH=\"$1\"\nAPP_NAME=\"$2\"\nVERSION=\"$3\"\nIDENTIFIER=\"$4\"\n\necho \"📦 Creating dual signed packages...\"\necho \"📱 App: $(basename \"$APP_PATH\")\"\necho \"🏷️ Name: $APP_NAME\"\necho \"🔢 Version: $VERSION\"\necho \"🆔 Identifier: $IDENTIFIER\"\n\n# Load certificate environment\nif [ -f \".cert_environment\" ]; then\n    source .cert_environment\nelse\n    echo \"❌ Certificate environment not found. Run setup-certificates-ci.sh first.\"\n    exit 1\nfi\n\n# Load runner environment for capabilities\nif [ -f \".runner_environment\" ]; then\n    source .runner_environment\nfi\n\n# Verify app exists\nif [ ! -d \"$APP_PATH\" ]; then\n    echo \"❌ App bundle not found: $APP_PATH\"\n    exit 1\nfi\n\n# Create artifacts directory\nmkdir -p artifacts\n\n# Create Developer ID package\ncreate_developer_id_package() {\n    echo \"🔐 Creating Developer ID package...\"\n    \n    # Create a copy of the app for Developer ID signing\n    local dev_id_app=\"${APP_PATH}_dev_id\"\n    rm -rf \"$dev_id_app\"\n    cp -R \"$APP_PATH\" \"$dev_id_app\"\n    \n    # Sign with Developer ID certificate\n    echo \"🔐 Signing app with Developer ID certificate...\"\n    local app_type=\"server\"\n    if [[ \"$APP_NAME\" == *\"Client\"* ]] || [[ \"$APP_NAME\" == *\"client\"* ]]; then\n        app_type=\"client\"\n    fi\n    \n    if ! ./.github/scripts/sign-application.sh \"$dev_id_app\" \"$app_type\" \"developer_id\"; then\n        echo \"❌ Failed to sign app with Developer ID certificate\"\n        rm -rf \"$dev_id_app\"\n        return 1\n    fi\n    \n    # Create PKG\n    local pkg_name=\"${APP_NAME}-${VERSION}-indi.pkg\"\n    local pkg_path=\"artifacts/$pkg_name\"\n    \n    echo \"📦 Creating PKG: $pkg_name\"\n    \n    pkgbuild --component \"$dev_id_app\" \\\n             --install-location \"/Applications\" \\\n             --identifier \"$IDENTIFIER\" \\\n             --version \"$VERSION\" \\\n             \"$pkg_path\"\n    \n    if [ $? -eq 0 ] && [ -f \"$pkg_path\" ]; then\n        echo \"✅ Developer ID package created: $pkg_name\"\n        \n        # Sign the package\n        if [ -n \"${DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY:-}\" ]; then\n            echo \"🔐 Signing PKG with Developer ID Installer certificate...\"\n            \n            # Create signed package\n            local signed_pkg=\"${pkg_path%.pkg}-signed.pkg\"\n            \n            # Unlock keychain\n            security unlock-keychain -p \"$TEMP_KEYCHAIN_PASSWORD\" \"$TEMP_KEYCHAIN\"\n            \n            productsign --sign \"$DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY\" \\\n                        --keychain \"$TEMP_KEYCHAIN\" \\\n                        \"$pkg_path\" \\\n                        \"$signed_pkg\"\n            \n            if [ $? -eq 0 ] && [ -f \"$signed_pkg\" ]; then\n                mv \"$signed_pkg\" \"$pkg_path\"\n                echo \"✅ Package signed successfully\"\n                \n                # Verify package signature\n                if pkgutil --check-signature \"$pkg_path\" >/dev/null 2>&1; then\n                    echo \"✅ Package signature verification passed\"\n                else\n                    echo \"⚠️ Package signature verification failed\"\n                fi\n                \n                # Clean up dev_id app copy\n                rm -rf \"$dev_id_app\"\n                return 0\n            else\n                echo \"❌ Package signing failed\"\n                rm -rf \"$dev_id_app\"\n                return 1\n            fi\n        else\n            echo \"⚠️ No installer signing identity available\"\n            rm -rf \"$dev_id_app\"\n            return 1\n        fi\n    else\n        echo \"❌ Package creation failed\"\n        rm -rf \"$dev_id_app\"\n        return 1\n    fi\n}\n\n# Create App Store package\ncreate_app_store_package() {\n    if [ \"${APP_STORE_CERT_AVAILABLE:-false}\" != \"true\" ] || [ -z \"${APP_STORE_SIGNING_IDENTITY:-}\" ]; then\n        echo \"ℹ️ App Store certificate not available, skipping App Store package\"\n        return 0\n    fi\n    \n    echo \"🏪 Creating App Store package...\"\n    \n    # Create a copy of the app for App Store signing\n    local app_store_app=\"${APP_PATH}_app_store\"\n    rm -rf \"$app_store_app\"\n    cp -R \"$APP_PATH\" \"$app_store_app\"\n    \n    # Sign with App Store certificate\n    echo \"🔐 Signing app with App Store certificate...\"\n    local app_type=\"server\"\n    if [[ \"$APP_NAME\" == *\"Client\"* ]] || [[ \"$APP_NAME\" == *\"client\"* ]]; then\n        app_type=\"client\"\n    fi\n    \n    if ! ./.github/scripts/sign-application.sh \"$app_store_app\" \"$app_type\" \"app_store\"; then\n        echo \"❌ Failed to sign app with App Store certificate\"\n        rm -rf \"$app_store_app\"\n        return 1\n    fi\n    \n    # Create App Store PKG (note: App Store packages don't need installer signing)\n    local pkg_name=\"${APP_NAME}-${VERSION}-appstore.pkg\"\n    local pkg_path=\"artifacts/$pkg_name\"\n    \n    echo \"📦 Creating App Store PKG: $pkg_name\"\n    \n    pkgbuild --component \"$app_store_app\" \\\n             --install-location \"/Applications\" \\\n             --identifier \"${IDENTIFIER}.appstore\" \\\n             --version \"$VERSION\" \\\n             \"$pkg_path\"\n    \n    if [ $? -eq 0 ] && [ -f \"$pkg_path\" ]; then\n        echo \"✅ App Store package created: $pkg_name\"\n        echo \"ℹ️ App Store packages don't require installer signing or notarization\"\n        \n        # Clean up app_store app copy\n        rm -rf \"$app_store_app\"\n        return 0\n    else\n        echo \"❌ App Store package creation failed\"\n        rm -rf \"$app_store_app\"\n        return 1\n    fi\n}\n\n# Verify created packages\nverify_packages() {\n    echo \"🔍 Verifying created packages...\"\n    \n    local success_count=0\n    local total_count=0\n    \n    # Check Developer ID package\n    local dev_id_pkg=\"artifacts/${APP_NAME}-${VERSION}-indi.pkg\"\n    if [ -f \"$dev_id_pkg\" ]; then\n        ((total_count++))\n        echo \"📦 Developer ID package: $(basename \"$dev_id_pkg\")\"\n        \n        # Check size\n        local size=$(du -sh \"$dev_id_pkg\" | cut -f1)\n        echo \"  📏 Size: $size\"\n        \n        # Check signature\n        if pkgutil --check-signature \"$dev_id_pkg\" >/dev/null 2>&1; then\n            echo \"  ✅ Signature: Valid\"\n            ((success_count++))\n        else\n            echo \"  ❌ Signature: Invalid\"\n        fi\n        \n        # Check Gatekeeper\n        if spctl --assess --type install \"$dev_id_pkg\" >/dev/null 2>&1; then\n            echo \"  ✅ Gatekeeper: Passes\"\n        else\n            echo \"  ⚠️ Gatekeeper: Fails (may pass after notarization)\"\n        fi\n    fi\n    \n    # Check App Store package\n    local app_store_pkg=\"artifacts/${APP_NAME}-${VERSION}-appstore.pkg\"\n    if [ -f \"$app_store_pkg\" ]; then\n        ((total_count++))\n        echo \"📦 App Store package: $(basename \"$app_store_pkg\")\"\n        \n        # Check size\n        local size=$(du -sh \"$app_store_pkg\" | cut -f1)\n        echo \"  📏 Size: $size\"\n        \n        echo \"  ℹ️ App Store packages are verified during submission\"\n        ((success_count++))\n    fi\n    \n    # Summary\n    echo \"📊 Package verification summary:\"\n    echo \"  📦 Total packages: $total_count\"\n    echo \"  ✅ Successful: $success_count\"\n    \n    if [ $success_count -eq $total_count ] && [ $total_count -gt 0 ]; then\n        echo \"✅ All packages created and verified successfully\"\n        return 0\n    elif [ $success_count -gt 0 ]; then\n        echo \"⚠️ Some packages were created successfully\"\n        return 0\n    else\n        echo \"❌ No packages were created successfully\"\n        return 1\n    fi\n}\n\n# Create package manifest\ncreate_package_manifest() {\n    echo \"📋 Creating package manifest...\"\n    \n    local manifest_file=\"artifacts/PACKAGE_MANIFEST_${APP_NAME}_${VERSION}.txt\"\n    \n    cat > \"$manifest_file\" << EOF\n${APP_NAME} Package Manifest\n$(printf '=%.0s' {1..40})\n\nVersion: $VERSION\nIdentifier: $IDENTIFIER\nGenerated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')\nPlatform: macOS (Signed & Notarized)\n\nPackage Details:\n- Code Signing: Developer ID Application / App Store\n- Installer Signing: Developer ID Installer (Developer ID only)\n- Notarization: Required for Developer ID packages\n- Compatibility: macOS 11.0+ (Big Sur or later)\n- Architecture: Universal (Apple Silicon + Intel)\n\nGenerated Packages:\nEOF\n\n    # List packages with details\n    find artifacts/ -name \"${APP_NAME}-${VERSION}*.pkg\" | sort | while read pkg; do\n        if [ -f \"$pkg\" ]; then\n            local filename=$(basename \"$pkg\")\n            local size=$(du -sh \"$pkg\" | cut -f1)\n            local modified=$(stat -f \"%Sm\" -t \"%Y-%m-%d %H:%M\" \"$pkg\")\n            \n            echo \"\" >> \"$manifest_file\"\n            echo \"📦 $filename\" >> \"$manifest_file\"\n            echo \"   Size: $size\" >> \"$manifest_file\"\n            echo \"   Created: $modified\" >> \"$manifest_file\"\n            \n            if [[ \"$filename\" == *\"indi\"* ]]; then\n                echo \"   Type: Developer ID (individual distribution)\" >> \"$manifest_file\"\n                if pkgutil --check-signature \"$pkg\" >/dev/null 2>&1; then\n                    echo \"   Status: Signed ✅\" >> \"$manifest_file\"\n                else\n                    echo \"   Status: Unsigned ❌\" >> \"$manifest_file\"\n                fi\n                echo \"   Next: Notarization required\" >> \"$manifest_file\"\n            elif [[ \"$filename\" == *\"appstore\"* ]]; then\n                echo \"   Type: App Store (submission to App Store)\" >> \"$manifest_file\"\n                echo \"   Status: Ready for App Store submission ✅\" >> \"$manifest_file\"\n                echo \"   Next: Submit via App Store Connect\" >> \"$manifest_file\"\n            fi\n        fi\n    done\n    \n    cat >> \"$manifest_file\" << EOF\n\nInstallation Instructions:\n\nDeveloper ID Package:\n1. Download the *-indi.pkg file\n2. Double-click to install (requires admin privileges)\n3. App will be installed to /Applications/\n\nApp Store Package:\n1. Submit *-appstore.pkg via App Store Connect\n2. Users install via Mac App Store\n\nVerification Commands:\n- Check signature: pkgutil --check-signature package.pkg\n- Gatekeeper test: spctl --assess --type install package.pkg\n\nSupport:\n- GitHub: https://github.com/tirans/r2midi\n- Issues: https://github.com/tirans/r2midi/issues\nEOF\n\n    echo \"✅ Package manifest created: $manifest_file\"\n}\n\n# Main execution\nmain() {\n    echo \"🚀 Starting dual package creation...\"\n    \n    local success=true\n    \n    # Create Developer ID package\n    if ! create_developer_id_package; then\n        echo \"❌ Developer ID package creation failed\"\n        success=false\n    fi\n    \n    # Create App Store package (if available)\n    if ! create_app_store_package; then\n        echo \"⚠️ App Store package creation failed or skipped\"\n        # Don't mark as failure since App Store cert might not be available\n    fi\n    \n    # Verify packages\n    if ! verify_packages; then\n        echo \"❌ Package verification failed\"\n        success=false\n    fi\n    \n    # Create manifest\n    create_package_manifest\n    \n    if [ \"$success\" = true ]; then\n        echo \"✅ Dual package creation completed successfully!\"\n        echo \"📦 Check artifacts/ directory for generated packages\"\n        return 0\n    else\n        echo \"❌ Package creation completed with errors\"\n        return 1\n    fi\n}\n\n# Run main function\nmain \"$@\"