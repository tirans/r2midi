#!/bin/bash\n# cleanup-build.sh - Clean up build artifacts and temporary files\nset -euo pipefail\n\nUSAGE=\"Usage: $0 [--aggressive] [--keep-artifacts] [--dry-run]\"\n\n# Default options\nAGGRESSIVE=false\nKEEP_ARTIFACTS=false\nDRY_RUN=false\n\n# Parse arguments\nwhile [[ $# -gt 0 ]]; do\n    case $1 in\n        --aggressive)\n            AGGRESSIVE=true\n            shift\n            ;;\n        --keep-artifacts)\n            KEEP_ARTIFACTS=true\n            shift\n            ;;\n        --dry-run)\n            DRY_RUN=true\n            shift\n            ;;\n        --help)\n            echo \"$USAGE\"\n            echo \"Options:\"\n            echo \"  --aggressive      Remove additional temporary files\"\n            echo \"  --keep-artifacts  Keep final build artifacts\"\n            echo \"  --dry-run         Show what would be cleaned without doing it\"\n            exit 0\n            ;;\n        *)\n            echo \"Unknown option: $1\"\n            echo \"$USAGE\"\n            exit 1\n            ;;\n    esac\ndone\n\necho \"🧹 Starting build cleanup...\"\necho \"🔧 Aggressive: $AGGRESSIVE\"\necho \"📦 Keep artifacts: $KEEP_ARTIFACTS\"\necho \"🔍 Dry run: $DRY_RUN\"\n\n# Load environments to get cleanup info\nif [ -f \".runner_environment\" ]; then\n    source .runner_environment\nfi\n\nif [ -f \".cert_environment\" ]; then\n    source .cert_environment\nfi\n\n# Dry run function\nrun_or_show() {\n    local cmd=\"$1\"\n    local description=\"$2\"\n    \n    if [ \"$DRY_RUN\" = true ]; then\n        echo \"[DRY RUN] $description: $cmd\"\n    else\n        echo \"🧹 $description...\"\n        eval \"$cmd\" 2>/dev/null || true\n    fi\n}\n\n# Clean up temporary keychains\ncleanup_keychains() {\n    echo \"🔑 Cleaning up temporary keychains...\"\n    \n    # Clean up specific keychain if we know about it\n    if [ -n \"${TEMP_KEYCHAIN:-}\" ]; then\n        run_or_show \"security delete-keychain '$TEMP_KEYCHAIN'\" \"Removing specific keychain: $TEMP_KEYCHAIN\"\n    fi\n    \n    # Clean up any r2midi keychains\n    if security list-keychains -d user | grep -q \"r2midi-\"; then\n        echo \"📋 Found r2midi keychains to clean:\"\n        security list-keychains -d user | grep \"r2midi-\" | sed 's/\"//g' | while read keychain; do\n            local keychain_name=$(basename \"$keychain\")\n            run_or_show \"security delete-keychain '$keychain'\" \"Removing keychain: $keychain_name\"\n        done\n    else\n        echo \"✅ No r2midi keychains found\"\n    fi\n}\n\n# Clean up certificate files\ncleanup_certificates() {\n    echo \"📜 Cleaning up temporary certificate files...\"\n    \n    # Clean up GitHub Actions certificate directory\n    run_or_show \"rm -rf /tmp/github_certs\" \"Removing GitHub Actions certificates\"\n    \n    # Clean up App Store Connect API keys\n    run_or_show \"rm -rf ~/.appstoreconnect/private_keys/AuthKey_*.p8\" \"Removing App Store Connect API keys\"\n    \n    # Clean up temporary config files\n    run_or_show \"rm -f /tmp/github_app_config.json\" \"Removing temporary config files\"\n}\n\n# Clean up build directories\ncleanup_build_directories() {\n    echo \"🏗️ Cleaning up build directories...\"\n    \n    # Clean main build directories\n    run_or_show \"rm -rf build_client/build build_client/dist\" \"Removing client build artifacts\"\n    run_or_show \"rm -rf build_server/build build_server/dist\" \"Removing server build artifacts\"\n    \n    # Clean up any temporary app copies\n    run_or_show \"find . -name '*.app_dev_id' -type d -exec rm -rf {} +\" \"Removing temporary Developer ID app copies\"\n    run_or_show \"find . -name '*.app_app_store' -type d -exec rm -rf {} +\" \"Removing temporary App Store app copies\"\n    run_or_show \"find . -name '*.app_fresh_*' -type d -exec rm -rf {} +\" \"Removing temporary fresh app copies\"\n    \n    # Clean up entitlements files from build directories\n    run_or_show \"find build_client build_server -name 'entitlements-*.plist' -delete\" \"Removing temporary entitlements files\"\n}\n\n# Clean up Python cache\ncleanup_python_cache() {\n    echo \"🐍 Cleaning up Python cache...\"\n    \n    run_or_show \"find . -name '__pycache__' -type d -exec rm -rf {} +\" \"Removing __pycache__ directories\"\n    run_or_show \"find . -name '*.pyc' -delete\" \"Removing .pyc files\"\n    run_or_show \"find . -name '*.pyo' -delete\" \"Removing .pyo files\"\n    \n    # Clean up py2app cache\n    run_or_show \"rm -rf ~/.py2app\" \"Removing py2app cache\"\n    \n    # Clean up pip cache if aggressive\n    if [ \"$AGGRESSIVE\" = true ]; then\n        run_or_show \"python3 -m pip cache purge\" \"Purging pip cache\"\n    fi\n}\n\n# Clean up environment files\ncleanup_environment_files() {\n    echo \"📄 Cleaning up environment files...\"\n    \n    run_or_show \"rm -f .cert_environment\" \"Removing certificate environment\"\n    run_or_show \"rm -f .runner_environment\" \"Removing runner environment\"\n    run_or_show \"rm -f .local_build_env\" \"Removing local build environment\"\n}\n\n# Clean up logs and temporary files\ncleanup_logs_and_temp() {\n    echo \"📝 Cleaning up logs and temporary files...\"\n    \n    # Remove notarization logs\n    run_or_show \"find . -name 'notarization_*.log' -delete\" \"Removing notarization logs\"\n    \n    # Remove temporary files\n    run_or_show \"find . -name '.DS_Store' -delete\" \"Removing .DS_Store files\"\n    run_or_show \"find . -name '._*' -delete\" \"Removing resource fork files\"\n    \n    # Remove backup files\n    run_or_show \"find . -name '*.bak' -delete\" \"Removing backup files\"\n    run_or_show \"find . -name '*~' -delete\" \"Removing editor backup files\"\n    \n    # Clean up setup files\n    run_or_show \"find . -name 'setup_*.py' -path './build_*' -delete\" \"Removing copied setup files\"\n}\n\n# Clean up artifacts (optional)\ncleanup_artifacts() {\n    if [ \"$KEEP_ARTIFACTS\" = true ]; then\n        echo \"📦 Keeping build artifacts as requested\"\n        return 0\n    fi\n    \n    echo \"📦 Cleaning up build artifacts...\"\n    \n    if [ \"$AGGRESSIVE\" = true ]; then\n        run_or_show \"rm -rf artifacts/*\" \"Removing all artifacts\"\n    else\n        # Keep final packages but remove intermediate files\n        run_or_show \"find artifacts -name '*.txt' -not -name 'CHECKSUMS.txt' -delete\" \"Removing intermediate text files\"\n        run_or_show \"find artifacts -name '*.md' -delete\" \"Removing markdown files\"\n    fi\n}\n\n# Clean up virtual environments (aggressive only)\ncleanup_virtual_environments() {\n    if [ \"$AGGRESSIVE\" != true ]; then\n        echo \"🐍 Keeping virtual environments (use --aggressive to remove)\"\n        return 0\n    fi\n    \n    echo \"🐍 Cleaning up virtual environments (aggressive mode)...\"\n    \n    run_or_show \"rm -rf venv_client\" \"Removing client virtual environment\"\n    run_or_show \"rm -rf venv_server\" \"Removing server virtual environment\"\n}\n\n# Clean up system-wide temporary files (aggressive only)\ncleanup_system_temp() {\n    if [ \"$AGGRESSIVE\" != true ]; then\n        echo \"🗑️ Keeping system temporary files (use --aggressive to remove)\"\n        return 0\n    fi\n    \n    echo \"🗑️ Cleaning up system temporary files (aggressive mode)...\"\n    \n    # Clean up any r2midi temporary directories\n    run_or_show \"find /tmp -name '*r2midi*' -type d -exec rm -rf {} +\" \"Removing r2midi temporary directories\"\n    \n    # Clean up any leftover build files in /tmp\n    run_or_show \"find /tmp -name 'r2midi_build_*' -type d -exec rm -rf {} +\" \"Removing temporary build directories\"\n}\n\n# Generate cleanup report\ngenerate_cleanup_report() {\n    if [ \"$DRY_RUN\" = true ]; then\n        echo \"📋 Dry run completed - no files were actually removed\"\n        return 0\n    fi\n    \n    echo \"📋 Generating cleanup report...\"\n    \n    local report_file=\"CLEANUP_REPORT_$(date +%Y%m%d_%H%M%S).txt\"\n    \n    cat > \"$report_file\" << EOF\nR2MIDI Build Cleanup Report\n===========================\n\nCleanup Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')\nCleanup Mode: $([ \"$AGGRESSIVE\" = true ] && echo \"Aggressive\" || echo \"Standard\")\nArtifacts Kept: $([ \"$KEEP_ARTIFACTS\" = true ] && echo \"Yes\" || echo \"No\")\nRunner Type: ${RUNNER_TYPE:-unknown}\nSelf-hosted: ${IS_SELF_HOSTED:-unknown}\n\nCleaned Components:\n- ✅ Temporary keychains (r2midi-*)\n- ✅ Certificate files (/tmp/github_certs)\n- ✅ Build directories (build_*/build, build_*/dist)\n- ✅ Python cache (__pycache__, *.pyc)\n- ✅ Environment files (.cert_environment, .runner_environment)\n- ✅ Logs and temporary files\n$([ \"$KEEP_ARTIFACTS\" = false ] && echo \"- ✅ Build artifacts\" || echo \"- ⏭️ Build artifacts (kept)\")\n$([ \"$AGGRESSIVE\" = true ] && echo \"- ✅ Virtual environments\" || echo \"- ⏭️ Virtual environments (kept)\")\n$([ \"$AGGRESSIVE\" = true ] && echo \"- ✅ System temporary files\" || echo \"- ⏭️ System temporary files (kept)\")\n\nNext Steps:\n- Run ./setup-virtual-environments.sh to recreate Python environments\n- Run ./setup-local-certificates.sh to configure certificates for local builds\n- Use ./build-all-local.sh to rebuild applications\n\nNote: This cleanup is safe and can be run between builds.\nEOF\n\n    echo \"✅ Cleanup report saved: $report_file\"\n}\n\n# Main cleanup workflow\nmain() {\n    echo \"🚀 Starting cleanup workflow...\"\n    \n    # Check if we're in the right directory\n    if [ ! -f \"build-all-local.sh\" ]; then\n        echo \"⚠️ Warning: Not in R2MIDI project root directory\"\n        echo \"🔍 Current directory: $(pwd)\"\n        read -p \"Continue anyway? (y/N): \" -n 1 -r\n        echo\n        if [[ ! $REPLY =~ ^[Yy]$ ]]; then\n            echo \"❌ Cleanup cancelled\"\n            exit 1\n        fi\n    fi\n    \n    # Run cleanup steps\n    cleanup_keychains\n    cleanup_certificates\n    cleanup_build_directories\n    cleanup_python_cache\n    cleanup_environment_files\n    cleanup_logs_and_temp\n    cleanup_artifacts\n    cleanup_virtual_environments\n    cleanup_system_temp\n    \n    # Generate report\n    generate_cleanup_report\n    \n    echo \"✅ Cleanup completed successfully!\"\n    \n    if [ \"$DRY_RUN\" = false ]; then\n        echo \"📋 Summary:\"\n        echo \"  🔑 Keychains: Removed\"\n        echo \"  📜 Certificates: Removed\"\n        echo \"  🏗️ Build files: Removed\"\n        echo \"  🐍 Python cache: Removed\"\n        echo \"  📄 Environment files: Removed\"\n        echo \"  📦 Artifacts: $([ \"$KEEP_ARTIFACTS\" = true ] && echo \"Kept\" || echo \"Removed\")\"\n        echo \"  🐍 Virtual envs: $([ \"$AGGRESSIVE\" = true ] && echo \"Removed\" || echo \"Kept\")\"\n        \n        if [ \"$AGGRESSIVE\" = true ]; then\n            echo \"\"\n            echo \"⚠️ Aggressive cleanup completed. You'll need to:\"\n            echo \"  1. Run ./setup-virtual-environments.sh\"\n            echo \"  2. Run ./setup-local-certificates.sh\"\n            echo \"  3. Then you can build again with ./build-all-local.sh\"\n        fi\n    fi\n}\n\n# Run main function\nmain \"$@\"