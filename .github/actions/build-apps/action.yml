name: Build Applications
description: Build applications using appropriate tools for each platform

inputs:
  platform:
    description: 'Target platform (linux, windows, macOS)'
    required: true
  build-type:
    description: 'Build type (dev, staging, production)'
    required: true
    default: 'dev'
  version:
    description: 'Application version'
    required: true
  sign:
    description: 'Whether to sign builds'
    required: false
    default: 'false'

outputs:
  server-app-path:
    description: 'Path to the server application'
    value: ${{ steps.build.outputs.server-app-path }}
  client-app-path:
    description: 'Path to the client application'
    value: ${{ steps.build.outputs.client-app-path }}
  artifacts-path:
    description: 'Path to build artifacts directory'
    value: ${{ steps.build.outputs.artifacts-path }}

runs:
  using: "composite"
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        echo "🔍 Validating build inputs..."

        # Validate platform
        case "${{ inputs.platform }}" in
          linux|windows|macOS)
            echo "✅ Platform: ${{ inputs.platform }}"
            ;;
          *)
            echo "❌ Invalid platform: ${{ inputs.platform }}"
            echo "Valid platforms: linux, windows, macOS"
            exit 1
            ;;
        esac

        # Validate build type
        case "${{ inputs.build-type }}" in
          dev|staging|production)
            echo "✅ Build type: ${{ inputs.build-type }}"
            ;;
          *)
            echo "❌ Invalid build type: ${{ inputs.build-type }}"
            echo "Valid types: dev, staging, production"
            exit 1
            ;;
        esac

        echo "✅ Input validation complete"

    - name: Setup build environment
      shell: bash
      run: |
        echo "🔧 Setting up build environment for ${{ inputs.platform }}..."

        # Create build directories
        mkdir -p build/{server,client,artifacts}
        mkdir -p dist/{server,client}

        # Set environment variables
        echo "PLATFORM=${{ inputs.platform }}" >> $GITHUB_ENV
        echo "BUILD_TYPE=${{ inputs.build-type }}" >> $GITHUB_ENV
        echo "APP_VERSION=${{ inputs.version }}" >> $GITHUB_ENV
        echo "SHOULD_SIGN=${{ inputs.sign }}" >> $GITHUB_ENV

        # Platform-specific setup
        case "${{ inputs.platform }}" in
          linux)
            echo "BUILD_METHOD=briefcase" >> $GITHUB_ENV
            echo "APP_FORMAT=system" >> $GITHUB_ENV
            ;;
          windows)
            echo "BUILD_METHOD=briefcase" >> $GITHUB_ENV
            echo "APP_FORMAT=app" >> $GITHUB_ENV
            ;;
          macOS)
            echo "BUILD_METHOD=native" >> $GITHUB_ENV
            echo "APP_FORMAT=app" >> $GITHUB_ENV
            ;;
        esac

        echo "✅ Environment setup complete"

    - name: Build applications
      id: build
      shell: bash
      run: |
        echo "🔨 Building applications using $BUILD_METHOD method..."

        # Source the appropriate build script
        if [ "$BUILD_METHOD" = "briefcase" ]; then
          source "$GITHUB_ACTION_PATH/../../scripts/build-briefcase.sh"
        else
          source "$GITHUB_ACTION_PATH/../../scripts/build-macos.sh"
        fi

        # Execute the build
        build_applications

        # Set outputs
        if [ -n "$SERVER_APP_PATH" ]; then
          echo "server-app-path=$SERVER_APP_PATH" >> $GITHUB_OUTPUT
        fi
        if [ -n "$CLIENT_APP_PATH" ]; then
          echo "client-app-path=$CLIENT_APP_PATH" >> $GITHUB_OUTPUT
        fi
        echo "artifacts-path=$(pwd)/build/artifacts" >> $GITHUB_OUTPUT

    - name: Verify build results
      shell: bash
      run: |
        echo "🔍 Verifying build results..."

        # Check if builds were successful
        SUCCESS=true

        if [ -n "${{ steps.build.outputs.server-app-path }}" ]; then
          if [ -e "${{ steps.build.outputs.server-app-path }}" ]; then
            echo "✅ Server application built successfully"
          else
            echo "❌ Server application not found at ${{ steps.build.outputs.server-app-path }}"
            SUCCESS=false
          fi
        fi

        if [ -n "${{ steps.build.outputs.client-app-path }}" ]; then
          if [ -e "${{ steps.build.outputs.client-app-path }}" ]; then
            echo "✅ Client application built successfully"
          else
            echo "❌ Client application not found at ${{ steps.build.outputs.client-app-path }}"
            SUCCESS=false
          fi
        fi

        if [ "$SUCCESS" = "false" ]; then
          echo "❌ Build verification failed"
          exit 1
        fi

        echo "✅ Build verification complete"

    - name: Generate build summary
      shell: bash
      run: |
        echo "📋 Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "===============" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Platform:** ${{ inputs.platform }}" >> $GITHUB_STEP_SUMMARY
        echo "**Build Type:** ${{ inputs.build-type }}" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Method:** $BUILD_METHOD" >> $GITHUB_STEP_SUMMARY
        echo "**Signing:** ${{ inputs.sign }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ -n "${{ steps.build.outputs.server-app-path }}" ]; then
          echo "**Server App:** \`${{ steps.build.outputs.server-app-path }}\`" >> $GITHUB_STEP_SUMMARY
        fi
        if [ -n "${{ steps.build.outputs.client-app-path }}" ]; then
          echo "**Client App:** \`${{ steps.build.outputs.client-app-path }}\`" >> $GITHUB_STEP_SUMMARY
        fi
