name: Package Applications
description: Create installers and packages for distribution

inputs:
  platform:
    description: 'Target platform (linux, windows, macOS)'
    required: true
  build-type:
    description: 'Build type (dev, staging, production)'
    required: true
  version:
    description: 'Application version'
    required: true
  server-app-path:
    description: 'Path to server application'
    required: false
  client-app-path:
    description: 'Path to client application'
    required: false

runs:
  using: "composite"
  steps:
    - name: Validate packaging inputs
      shell: bash
      run: |
        echo "🔍 Validating packaging inputs..."
        echo "Platform: ${{ inputs.platform }}"
        echo "Build Type: ${{ inputs.build-type }}"
        echo "Version: ${{ inputs.version }}"
        echo "Server App: ${{ inputs.server-app-path }}"
        echo "Client App: ${{ inputs.client-app-path }}"

    - name: Create packages (Linux)
      if: inputs.platform == 'linux'
      shell: bash
      run: |
        echo "🐧 Creating Linux packages..."
        
        # Use Briefcase to create system packages
        if command -v briefcase >/dev/null 2>&1; then
          echo "📦 Creating DEB packages with Briefcase..."
          briefcase package linux system -a server || echo "⚠️ Server package failed"
          briefcase package linux system -a r2midi-client || echo "⚠️ Client package failed"
        fi
        
        # Create tar.gz archives as fallback
        echo "📦 Creating TAR.GZ archives..."
        
        if [ -n "${{ inputs.server-app-path }}" ] && [ -e "${{ inputs.server-app-path }}" ]; then
          DIRNAME=$(dirname "${{ inputs.server-app-path }}")
          tar -czf "r2midi-server-${{ inputs.version }}-linux.tar.gz" -C "$DIRNAME" .
        fi
        
        if [ -n "${{ inputs.client-app-path }}" ] && [ -e "${{ inputs.client-app-path }}" ]; then
          DIRNAME=$(dirname "${{ inputs.client-app-path }}")
          tar -czf "r2midi-client-${{ inputs.version }}-linux.tar.gz" -C "$DIRNAME" .
        fi

    - name: Create packages (Windows)
      if: inputs.platform == 'windows'
      shell: pwsh
      run: |
        Write-Host "🪟 Creating Windows packages..."
        
        # Use Briefcase to create MSI if possible
        if (Get-Command briefcase -ErrorAction SilentlyContinue) {
          Write-Host "📦 Creating MSI packages with Briefcase..."
          try {
            briefcase package windows app -a server
          } catch {
            Write-Host "⚠️ Server MSI package failed: $_"
          }
          
          try {
            briefcase package windows app -a r2midi-client
          } catch {
            Write-Host "⚠️ Client MSI package failed: $_"
          }
        }
        
        # Create ZIP archives as fallback
        Write-Host "📦 Creating ZIP archives..."
        
        if ("${{ inputs.server-app-path }}" -and (Test-Path "${{ inputs.server-app-path }}")) {
          $parentDir = Split-Path "${{ inputs.server-app-path }}" -Parent
          Compress-Archive -Path "$parentDir\*" -DestinationPath "r2midi-server-${{ inputs.version }}-windows.zip" -Force
        }
        
        if ("${{ inputs.client-app-path }}" -and (Test-Path "${{ inputs.client-app-path }}")) {
          $parentDir = Split-Path "${{ inputs.client-app-path }}" -Parent
          Compress-Archive -Path "$parentDir\*" -DestinationPath "r2midi-client-${{ inputs.version }}-windows.zip" -Force
        }

    - name: Create packages (macOS)
      if: inputs.platform == 'macOS'
      shell: bash
      run: |
        echo "🍎 Creating macOS packages..."
        
        # Create DMG files
        echo "💿 Creating DMG installers..."
        
        create_dmg() {
          local app_path="$1"
          local dmg_name="$2"
          
          if [ ! -d "$app_path" ]; then
            echo "⚠️ App not found: $app_path"
            return 1
          fi
          
          echo "Creating DMG for: $app_path"
          
          # Create temporary directory for DMG contents
          local temp_dir=$(mktemp -d)
          cp -R "$app_path" "$temp_dir/"
          ln -s /Applications "$temp_dir/Applications"
          
          # Create DMG
          hdiutil create -volname "$(basename "$app_path" .app)" \
            -srcfolder "$temp_dir" \
            -ov -format UDZO \
            -imagekey zlib-level=9 \
            "$dmg_name"
          
          # Clean up
          rm -rf "$temp_dir"
          
          if [ -f "$dmg_name" ]; then
            echo "✅ Created: $dmg_name"
          else
            echo "❌ Failed to create: $dmg_name"
            return 1
          fi
        }
        
        # Create server DMG
        if [ -n "${{ inputs.server-app-path }}" ] && [ -d "${{ inputs.server-app-path }}" ]; then
          create_dmg "${{ inputs.server-app-path }}" "R2MIDI-Server-${{ inputs.version }}.dmg"
        fi
        
        # Create client DMG
        if [ -n "${{ inputs.client-app-path }}" ] && [ -d "${{ inputs.client-app-path }}" ]; then
          create_dmg "${{ inputs.client-app-path }}" "R2MIDI-Client-${{ inputs.version }}.dmg"
        fi
        
        # Create ZIP archives as fallback
        echo "📦 Creating ZIP archives..."
        
        if [ -n "${{ inputs.server-app-path }}" ] && [ -d "${{ inputs.server-app-path }}" ]; then
          cd "$(dirname "${{ inputs.server-app-path }}")"
          zip -r "$GITHUB_WORKSPACE/r2midi-server-${{ inputs.version }}-macos.zip" "$(basename "${{ inputs.server-app-path }}")"
          cd "$GITHUB_WORKSPACE"
        fi
        
        if [ -n "${{ inputs.client-app-path }}" ] && [ -d "${{ inputs.client-app-path }}" ]; then
          cd "$(dirname "${{ inputs.client-app-path }}")"
          zip -r "$GITHUB_WORKSPACE/r2midi-client-${{ inputs.version }}-macos.zip" "$(basename "${{ inputs.client-app-path }}")"
          cd "$GITHUB_WORKSPACE"
        fi

    - name: List created packages
      shell: bash
      run: |
        echo "📋 Created packages:"
        
        # List all package files
        for ext in dmg pkg msi deb zip tar.gz; do
          files=$(find . -maxdepth 1 -name "*.$ext" 2>/dev/null || true)
          if [ -n "$files" ]; then
            echo "$ext files:"
            echo "$files" | while read file; do
              size=$(du -h "$file" 2>/dev/null | cut -f1 || echo "unknown")
              echo "  - $(basename "$file") ($size)"
            done
          fi
        done
        
        # Create a summary file
        cat > PACKAGES.txt << EOF
R2MIDI Package Summary
=====================

Platform: ${{ inputs.platform }}
Build Type: ${{ inputs.build-type }}
Version: ${{ inputs.version }}
Created: $(date -u +"%Y-%m-%d %H:%M:%S UTC")

Packages:
EOF
        
        find . -maxdepth 1 \( -name "*.dmg" -o -name "*.pkg" -o -name "*.msi" -o -name "*.deb" -o -name "*.zip" -o -name "*.tar.gz" \) | \
        while read file; do
          size=$(du -h "$file" 2>/dev/null | cut -f1 || echo "unknown")
          echo "- $(basename "$file") ($size)" >> PACKAGES.txt
        done
        
        echo "" >> PACKAGES.txt
        echo "Installation Instructions:" >> PACKAGES.txt
        echo "=========================" >> PACKAGES.txt
        
        case "${{ inputs.platform }}" in
          macOS)
            echo "- DMG: Double-click to mount, then drag apps to Applications folder" >> PACKAGES.txt
            echo "- ZIP: Extract and move .app files to Applications folder" >> PACKAGES.txt
            ;;
          windows)
            echo "- MSI: Double-click to run the installer" >> PACKAGES.txt
            echo "- ZIP: Extract to desired location and run the .exe files" >> PACKAGES.txt
            ;;
          linux)
            echo "- DEB: sudo dpkg -i package.deb" >> PACKAGES.txt
            echo "- TAR.GZ: Extract to desired location and run the binaries" >> PACKAGES.txt
            ;;
        esac
        
        echo "✅ Packaging complete for ${{ inputs.platform }}"
