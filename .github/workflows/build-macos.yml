name: Build macOS (Enhanced Virtual Environments)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build-type:
        description: 'Build type'
        required: false
        type: choice
        options: [dev, staging, production]
        default: 'production'
  workflow_call:
    inputs:
      version:
        description: 'Version to build'
        required: true
        type: string
      build-type:
        description: 'Build type'
        required: false
        type: string
        default: 'production'
      runner-type:
        description: 'Runner type to use'
        required: false
        type: string
        default: 'self-hosted'
    secrets:
      APPLE_DEVELOPER_ID_APPLICATION_CERT:
        required: true
      APPLE_DEVELOPER_ID_INSTALLER_CERT:
        required: true
      APPLE_CERT_PASSWORD:
        required: true
      APPLE_APP_STORE_CERTIFICATE_P12:
        required: false
      APPLE_APP_STORE_CERTIFICATE_PASSWORD:
        required: false
      APPLE_ID:
        required: true
      APPLE_ID_PASSWORD:
        required: true
      APPLE_TEAM_ID:
        required: true
      APP_STORE_CONNECT_API_KEY:
        required: false
      APP_STORE_CONNECT_ISSUER_ID:
        required: false
      APP_STORE_CONNECT_KEY_ID:
        required: false

jobs:
  build-macos-signed:
    name: üçé Enhanced macOS Build
    runs-on: ${{ inputs.runner-type || 'self-hosted' }}
    timeout-minutes: 45

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Clean environment
        shell: bash
        run: ./clean-environment.sh --keep-cache

      - name: Setup virtual environments
        shell: bash
        run: ./setup-virtual-environments.sh --use-uv

      - name: Test environments
        shell: bash
        run: ./test_environments.sh

      - name: Build applications
        shell: bash
        env:
          APPLE_DEVELOPER_ID_APPLICATION_CERT: ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION_CERT }}
          APPLE_DEVELOPER_ID_INSTALLER_CERT: ${{ secrets.APPLE_DEVELOPER_ID_INSTALLER_CERT }}
          APPLE_CERT_PASSWORD: ${{ secrets.APPLE_CERT_PASSWORD }}
          APPLE_APP_STORE_CERTIFICATE_P12: ${{ secrets.APPLE_APP_STORE_CERTIFICATE_P12 }}
          APPLE_APP_STORE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_APP_STORE_CERTIFICATE_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
        run: |
          VERSION="${{ inputs.version || '1.0.0-ci' }}"
          BUILD_TYPE="${{ inputs.build-type || 'production' }}"

          if [ "$BUILD_TYPE" = "dev" ]; then
            ./build-all-local.sh --dev --no-sign --version "$VERSION"
          elif [ "$BUILD_TYPE" = "staging" ]; then
            ./build-all-local.sh --staging --version "$VERSION"
          else
            ./build-all-local.sh --version "$VERSION"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-signed-${{ github.run_number }}
          path: artifacts/
          retention-days: 30
