name: Build macOS (Self-Hosted Optimized)

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
        description: 'Application version'
      build-type:
        required: false
        type: string
        default: 'production'
        description: 'Build type (dev, staging, production)'
    outputs:
      artifact-name:
        description: "Name of the uploaded artifact"
        value: ${{ jobs.build-macos-optimized.outputs.artifact-name }}
    secrets:
      APPLE_DEVELOPER_ID_APPLICATION_CERT:
        required: false
      APPLE_DEVELOPER_ID_INSTALLER_CERT:
        required: false
      APPLE_CERT_PASSWORD:
        required: false
      APPLE_ID:
        required: true
      APPLE_ID_PASSWORD:
        required: true
      APPLE_TEAM_ID:
        required: true
  workflow_dispatch:
    inputs:
      build-type:
        description: 'Build type'
        required: false
        type: choice
        options:
          - dev
          - staging
          - production
        default: 'dev'

jobs:
  build-macos-optimized:
    name: üöÄ Build macOS (Self-Hosted M3 Max - ~10min vs 60min)
    runs-on: self-hosted
    timeout-minutes: 15  # Even faster on M3 Max
    outputs:
      artifact-name: ${{ steps.upload.outputs.artifact-name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ‚ö° Setup Python (Self-Hosted)
        shell: bash
        run: |
          # Use existing Python from your venv
          echo "üñ•Ô∏è Using self-hosted runner Python..."
          python --version || python3 --version

          # Verify we're in the right environment
          echo "Current Python: $(which python)"
          echo "Python version: $(python --version)"

          # Set up environment variable for consistency
          echo "PYTHON_CMD=python" >> $GITHUB_ENV

      - name: Make scripts executable
        shell: bash
        run: |
          find .github/scripts/ -name "*.sh" -type f -exec chmod +x {} \;

      - name: Extract version information
        id: version
        shell: bash
        run: |
          ./.github/scripts/extract-version.sh "${{ inputs.version }}"

      - name: ‚ö° Fast environment validation (Self-Hosted)
        shell: bash
        run: |
          echo "üñ•Ô∏è M3 Max Self-Hosted Runner Environment Check..."
          echo "Python: $(python --version)"
          echo "Architecture: $(uname -m)"
          echo "macOS: $(sw_vers -productVersion)"
          echo "Working directory: $(pwd)"
          echo "User: $(whoami)"
          echo "‚úÖ Self-hosted environment ready"

      - name: ‚ö° Install system dependencies (Self-Hosted Optimized)
        shell: bash
        run: |
          echo "üñ•Ô∏è Checking system dependencies on self-hosted runner..."

          # Check if dependencies are already installed (common on self-hosted)
          if command -v brew >/dev/null 2>&1; then
            echo "‚úÖ Homebrew available"

            # Only install if not present (faster on self-hosted)
            if ! brew list python-tk >/dev/null 2>&1; then
              echo "üì¶ Installing python-tk..."
              brew install python-tk
            else
              echo "‚úÖ python-tk already installed"
            fi
          else
            echo "‚ö†Ô∏è Homebrew not found - installing..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            brew install python-tk
          fi

          echo "‚úÖ System dependencies ready"

      - name: ‚ö° Install Python dependencies (Self-Hosted Optimized)
        shell: bash
        run: |
          echo "üñ•Ô∏è Installing Python dependencies on M3 Max..."

          # Use existing Python
          python -m pip install --upgrade pip

          # Install briefcase if not present
          if ! python -c "import briefcase" 2>/dev/null; then
            echo "üì¶ Installing briefcase..."
            python -m pip install briefcase
          else
            echo "‚úÖ briefcase already available"
          fi

          # Install project dependencies
          python -m pip install -r requirements.txt
          python -m pip install -r r2midi_client/requirements.txt

          echo "‚úÖ Python dependencies installed"

      - name: Setup Apple Developer certificates
        shell: bash
        env:
          APPLE_DEVELOPER_ID_APPLICATION_CERT: ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION_CERT }}
          APPLE_DEVELOPER_ID_INSTALLER_CERT: ${{ secrets.APPLE_DEVELOPER_ID_INSTALLER_CERT }}
          APPLE_CERT_PASSWORD: ${{ secrets.APPLE_CERT_PASSWORD }}
        run: |
          ./.github/scripts/setup-certificates.sh

      - name: üîê Configure signing and entitlements for briefcase
        shell: bash
        run: |
          echo "üîß Configuring signing and entitlements for briefcase..."

          # Make scripts executable
          chmod +x scripts/select_entitlements.py
          chmod +x scripts/configure_briefcase_signing.py

          # Configure briefcase signing identity
          echo "üîê Setting up briefcase signing identity..."
          python scripts/configure_briefcase_signing.py

          # Select appropriate entitlements based on certificate availability
          echo "üîç Selecting appropriate entitlements..."
          python scripts/select_entitlements.py

          echo "‚úÖ Briefcase signing and entitlements configuration completed"

      - name: ‚ö° Build and package applications with proper signing (M3 Max Parallel Power)
        shell: bash
        run: |
          echo "üöÄ Building and packaging apps with Developer ID signing using M3 Max parallel processing..."

          # Export Python path for briefcase
          export PYTHONPATH="${PWD}:${PYTHONPATH:-}"

          # Package both apps in parallel (includes build + proper signing)
          echo "üì¶ Starting parallel packaging with Developer ID signing..."
          (
            echo "üñ•Ô∏è Packaging server app with Developer ID signing..."
            briefcase package macos app -a server
          ) &
          server_pid=$!

          (
            echo "üñ•Ô∏è Packaging client app with Developer ID signing..."  
            briefcase package macos app -a r2midi-client
          ) &
          client_pid=$!

          # Wait for both with progress
          echo "‚è≥ Waiting for parallel packaging on M3 Max..."
          wait $server_pid
          server_result=$?
          echo "‚úÖ Server packaging completed (exit: $server_result)"

          wait $client_pid  
          client_result=$?
          echo "‚úÖ Client packaging completed (exit: $client_result)"

          if [ $server_result -ne 0 ] || [ $client_result -ne 0 ]; then
            echo "‚ùå App packaging failed"
            exit 1
          fi

          echo "üöÄ Both apps packaged successfully with Developer ID signing using M3 Max parallel processing!"

      - name: ‚ö° Create optimized PKG installers
        id: pkg_creation
        shell: bash
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Use the optimized PKG creation script
          if ./.github/scripts/create-macos-pkg.sh \
            "${{ steps.version.outputs.version }}" \
            "${{ inputs.build-type }}" \
            "${{ secrets.APPLE_ID }}" \
            "${{ secrets.APPLE_ID_PASSWORD }}" \
            "${{ secrets.APPLE_TEAM_ID }}"; then
            echo "pkg_success=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Optimized PKG creation successful"
          else
            echo "pkg_success=false" >> $GITHUB_OUTPUT
            echo "‚ùå Optimized PKG creation failed"
            exit 1
          fi

      - name: ‚ö° Organize artifacts (fast)
        shell: bash
        run: |
          echo "üì¶ Quick artifact organization..."

          # Simple file counting and verification
          pkg_count=$(find artifacts/ -name "*.pkg" 2>/dev/null | wc -l)

          if [ "$pkg_count" -gt 0 ]; then
            echo "‚úÖ $pkg_count PKG installer(s) ready"
            find artifacts/ -name "*.pkg" | while read pkg; do
              size=$(du -h "$pkg" | cut -f1)
              echo "  üì¶ $(basename "$pkg") ($size)"
            done
          else
            echo "‚ùå No PKG files found"
            exit 1
          fi

      - name: ‚ö° Quick validation (skip deep checks)
        shell: bash
        run: |
          echo "üîç Quick validation..."

          # Fast signature check only
          find artifacts/ -name "*.pkg" | while read file; do
            echo "Checking $(basename "$file")..."
            if pkgutil --check-signature "$file" 2>/dev/null | grep -q "signed"; then
              echo "  ‚úÖ Signature OK"
            else
              echo "  ‚ö†Ô∏è Signature check failed"
            fi
          done

          echo "‚úÖ Quick validation complete"

      - name: Upload artifacts
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: macos-optimized-${{ inputs.build-type }}-${{ github.run_number }}
          path: artifacts/
          retention-days: ${{ inputs.build-type == 'production' && 90 || 30 }}
          compression-level: 6

      - name: ‚ö° Build summary (M3 Max Performance)
        shell: bash
        run: |
          echo "üöÄ M3 MAX OPTIMIZED macOS build complete!"
          echo ""
          echo "üñ•Ô∏è SELF-HOSTED RUNNER ADVANTAGES:"
          echo "  ‚úÖ M3 Max performance (faster than GitHub runners)"
          echo "  ‚úÖ No queue waiting time"
          echo "  ‚úÖ Persistent environment and caching"
          echo "  ‚úÖ Full control over build environment"
          echo ""
          echo "‚ö° OPTIMIZATIONS APPLIED:"
          echo "  ‚úÖ Uses existing Python environment"
          echo "  ‚úÖ M3 Max parallel app building"
          echo "  ‚úÖ Skipped unnecessary setup steps"
          echo "  ‚úÖ Self-hosted dependency optimization"
          echo "  ‚úÖ Native Apple Silicon performance"
          echo ""
          echo "üìà ESTIMATED TIME SAVINGS:"
          echo "  Before (GitHub runner): ~60 minutes"
          echo "  After (M3 Max self-hosted): ~8-12 minutes"
          echo ""
          echo "üì¶ CREATED FILES:"
          find artifacts/ -name "*.pkg" | while read pkg; do
            size=$(du -h "$pkg" | cut -f1)
            echo "  üì¶ $(basename "$pkg") ($size) - Ready for distribution"
          done

      - name: üßπ Self-Hosted Runner Cleanup
        if: always()
        shell: bash
        run: |
          echo "üßπ Comprehensive self-hosted runner cleanup..."

          # Remove temporary certificates and signing materials
          rm -f *.p12 2>/dev/null || true
          rm -f /tmp/signing_identities.sh 2>/dev/null || true

          # Clean up temporary keychains
          if [ -n "${TEMP_KEYCHAIN:-}" ]; then
            security delete-keychain "$TEMP_KEYCHAIN" 2>/dev/null || true
          fi

          # Clean up any leftover build artifacts in temp locations
          rm -rf /tmp/pkg_*/ 2>/dev/null || true

          echo "‚úÖ Self-hosted runner cleanup complete"
          echo "üñ•Ô∏è Runner ready for next build"
