name: Build macOS

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
        description: 'Application version'
      build-type:
        required: false
        type: string
        default: 'production'
        description: 'Build type (dev, staging, production)'
    outputs:
      artifact-name:
        description: "Name of the uploaded artifact"
        value: ${{ jobs.build-macos.outputs.artifact-name }}
    secrets:
      # Support both individual certificates (preferred) and combined P12 (legacy)
      APPLE_DEVELOPER_ID_APPLICATION_CERT:
        required: false
      APPLE_DEVELOPER_ID_INSTALLER_CERT:
        required: false
      APPLE_CERT_PASSWORD:
        required: false
      # GitHub workflow standard format (alternative)
      APPLE_CERTIFICATE_P12:
        required: false
      APPLE_CERTIFICATE_PASSWORD:
        required: false
      # Required for notarization
      APPLE_ID:
        required: true
      APPLE_ID_PASSWORD:
        required: true
      APPLE_TEAM_ID:
        required: true
  workflow_dispatch:
    inputs:
      build-type:
        description: 'Build type'
        required: false
        type: choice
        options:
          - dev
          - staging
          - production
        default: 'dev'

jobs:
  build-macos:
    name: Build macOS Apps (Signed & Notarized)
    runs-on: macos-14
    timeout-minutes: 90
    outputs:
      artifact-name: ${{ steps.upload.outputs.artifact-name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            r2midi_client/requirements.txt

      - name: Extract version information
        id: version
        shell: bash
        run: |
          ./.github/scripts/extract-version.sh "${{ inputs.version }}"

      - name: Validate build environment
        shell: bash
        run: |
          ./.github/scripts/validate-build-environment.sh macos

      - name: Install system dependencies
        shell: bash
        run: |
          ./.github/scripts/install-system-dependencies.sh macos

      - name: Install Python dependencies
        shell: bash
        run: |
          ./.github/scripts/install-python-dependencies.sh production

      - name: Setup Apple Developer certificates
        shell: bash
        env:
          # Support both certificate formats
          APPLE_DEVELOPER_ID_APPLICATION_CERT: ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION_CERT }}
          APPLE_DEVELOPER_ID_INSTALLER_CERT: ${{ secrets.APPLE_DEVELOPER_ID_INSTALLER_CERT }}
          APPLE_CERT_PASSWORD: ${{ secrets.APPLE_CERT_PASSWORD }}
          APPLE_CERTIFICATE_P12: ${{ secrets.APPLE_CERTIFICATE_P12 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          ./.github/scripts/setup-certificates.sh

      - name: Build applications
        shell: bash
        run: |
          ./.github/scripts/build-briefcase-apps.sh macos signed

      - name: Sign and notarize applications
        shell: bash
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          ./.github/scripts/sign-and-notarize-macos.sh \
            "${{ steps.version.outputs.version }}" \
            "${{ inputs.build-type }}" \
            "${{ secrets.APPLE_ID }}" \
            "${{ secrets.APPLE_ID_PASSWORD }}" \
            "${{ secrets.APPLE_TEAM_ID }}"

      - name: Package final artifacts
        shell: bash
        run: |
          ./.github/scripts/package-macos-apps.sh "${{ steps.version.outputs.version }}" "${{ inputs.build-type }}"

      - name: Validate signed packages
        shell: bash
        run: |
          echo "🔍 Validating all signed packages..."
          find artifacts/ -name "*.dmg" -o -name "*.pkg" | while read file; do
            if [ -f "$file" ]; then
              echo "Validating: $(basename "$file")"
              
              # Check code signature
              if codesign --verify --deep --strict "$file" 2>/dev/null; then
                echo "  ✅ Code signature valid"
              else
                echo "  ❌ Code signature invalid"
              fi
              
              # Check Gatekeeper compatibility
              if spctl --assess --type install "$file" 2>/dev/null; then
                echo "  ✅ Gatekeeper accepts package"
              else
                echo "  ⚠️ Gatekeeper assessment failed (may be normal before distribution)"
              fi
              
              # Check notarization stapling
              if xcrun stapler validate "$file" 2>/dev/null; then
                echo "  ✅ Notarization ticket stapled"
              else
                echo "  ⚠️ No notarization ticket found"
              fi
              
              echo ""
            fi
          done

      - name: Upload artifacts
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ inputs.build-type }}-${{ github.run_number }}
          path: artifacts/
          retention-days: ${{ inputs.build-type == 'production' && 90 || 30 }}
          compression-level: 6

      - name: Build summary
        shell: bash
        run: |
          ./.github/scripts/generate-build-summary.sh macos "${{ inputs.build-type }}" "${{ steps.version.outputs.version }}" signed

      - name: Cleanup signing materials
        if: always()
        shell: bash
        run: |
          echo "🧹 Cleaning up signing materials..."
          
          # Remove temporary certificates
          rm -f *.p12 2>/dev/null || true
          
          # Remove temporary keychain
          if [ -n "${TEMP_KEYCHAIN:-}" ]; then
            security delete-keychain "$TEMP_KEYCHAIN" 2>/dev/null || true
          fi
          
          # Remove signing identities file
          rm -f /tmp/signing_identities.sh 2>/dev/null || true
          
          # List remaining keychains for verification
          echo "Remaining keychains:"
          security list-keychains -d user
          
          echo "✅ Cleanup complete"
