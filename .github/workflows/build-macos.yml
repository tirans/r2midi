name: Build macOS (Simplified with macOS-Pkg-Builder)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build-type:
        description: 'Build type'
        required: false
        type: choice
        options: [dev, staging, production]
        default: 'production'
  workflow_call:
    inputs:
      version:
        description: 'Version to build'
        required: true
        type: string
      build-type:
        description: 'Build type'
        required: false
        type: string
        default: 'production'
      runner-type:
        description: 'Runner type to use'
        required: false
        type: string
        default: 'self-hosted'
    secrets:
      APPLE_DEVELOPER_ID_APPLICATION_CERT:
        required: true
      APPLE_DEVELOPER_ID_INSTALLER_CERT:
        required: true
      APPLE_CERT_PASSWORD:
        required: true
      APPLE_ID:
        required: true
      APPLE_ID_PASSWORD:
        required: true
      APPLE_TEAM_ID:
        required: true
      APP_STORE_CONNECT_KEY_ID:
        required: false
      APP_STORE_CONNECT_ISSUER_ID:
        required: false
      APP_STORE_CONNECT_API_KEY:
        required: false

jobs:
  build-macos-simplified:
    name: 🍎 macOS Build (Simplified with macOS-Pkg-Builder)
    runs-on: ${{ inputs.runner-type || 'self-hosted' }}
    timeout-minutes: 45

    steps:
      - name: Pre-build cleanup (self-hosted runner)
        if: contains(inputs.runner-type || 'self-hosted', 'self-hosted')
        shell: bash
        run: |
          echo "🧹 Cleaning up self-hosted runner environment..."
          
          # Clean up old keychains from previous runs
          if security list-keychains -d user | grep -q "r2midi-"; then
            security list-keychains -d user | grep "r2midi-" | sed 's/"//g' | while read keychain; do
              echo "Removing old keychain: $keychain"
              security delete-keychain "$keychain" 2>/dev/null || true
            done
          fi
          
          # Clean up certificate files
          rm -rf /tmp/github_certs 2>/dev/null || true
          
          # Clean up old build artifacts
          rm -rf build_client build_server artifacts 2>/dev/null || true
          
          echo "✅ Pre-build cleanup completed"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install system dependencies
        shell: bash
        run: |
          echo "📦 Installing system dependencies..."
          
          # Update pip and install core dependencies
          python -m pip install --upgrade pip wheel setuptools
          
          # Install macos-pkg-builder for PKG creation
          pip install macos-pkg-builder
          
          # Install required dependencies for build environment setup
          pip install virtualenv
          
          echo "✅ System dependencies installed"

      - name: Make scripts executable
        shell: bash
        run: |
          echo "🔧 Making scripts executable..."
          chmod +x *.sh 2>/dev/null || true
          chmod +x .github/scripts/*.sh 2>/dev/null || true
          chmod +x scripts/*.py 2>/dev/null || true
          chmod +x scripts/*.sh 2>/dev/null || true
          echo "✅ Scripts made executable"

      - name: Verify macos-pkg-builder installation
        shell: bash
        run: |
          echo "🔍 Verifying macOS-Pkg-Builder installation..."
          python3 -c "
          try:
              from macos_pkg_builder import Packages
              print('✅ macOS-Pkg-Builder is available')
              print('✅ Packages class imported successfully')
          except ImportError as e:
              print(f'❌ macOS-Pkg-Builder import failed: {e}')
              exit(1)
          "

      - name: Build with new PKG system
        shell: bash
        env:
          APPLE_DEVELOPER_ID_APPLICATION_CERT: ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION_CERT }}
          APPLE_DEVELOPER_ID_INSTALLER_CERT: ${{ secrets.APPLE_DEVELOPER_ID_INSTALLER_CERT }}
          APPLE_CERT_PASSWORD: ${{ secrets.APPLE_CERT_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        run: |
          VERSION="${{ inputs.version || '1.0.0-ci' }}"
          BUILD_TYPE="${{ inputs.build-type || 'production' }}"
          
          echo "🚀 Starting R2MIDI macOS build with PKG system..."
          echo "Version: $VERSION"
          echo "Build Type: $BUILD_TYPE"
          
          # Debug: Check if required secrets are available
          echo "🔍 Checking environment variables..."
          [ -n "$APPLE_DEVELOPER_ID_APPLICATION_CERT" ] && echo "✅ APPLE_DEVELOPER_ID_APPLICATION_CERT is set" || echo "❌ APPLE_DEVELOPER_ID_APPLICATION_CERT is missing"
          [ -n "$APPLE_DEVELOPER_ID_INSTALLER_CERT" ] && echo "✅ APPLE_DEVELOPER_ID_INSTALLER_CERT is set" || echo "❌ APPLE_DEVELOPER_ID_INSTALLER_CERT is missing"
          [ -n "$APPLE_CERT_PASSWORD" ] && echo "✅ APPLE_CERT_PASSWORD is set" || echo "❌ APPLE_CERT_PASSWORD is missing"
          [ -n "$APPLE_ID" ] && echo "✅ APPLE_ID is set" || echo "❌ APPLE_ID is missing"
          [ -n "$APPLE_ID_PASSWORD" ] && echo "✅ APPLE_ID_PASSWORD is set" || echo "❌ APPLE_ID_PASSWORD is missing"
          [ -n "$APPLE_TEAM_ID" ] && echo "✅ APPLE_TEAM_ID is set" || echo "❌ APPLE_TEAM_ID is missing"
          [ -n "$APP_STORE_CONNECT_KEY_ID" ] && echo "✅ APP_STORE_CONNECT_KEY_ID is set" || echo "ℹ️  APP_STORE_CONNECT_KEY_ID is not set (will use Apple ID auth)"
          [ -n "$APP_STORE_CONNECT_ISSUER_ID" ] && echo "✅ APP_STORE_CONNECT_ISSUER_ID is set" || echo "ℹ️  APP_STORE_CONNECT_ISSUER_ID is not set"
          [ -n "$APP_STORE_CONNECT_API_KEY" ] && echo "✅ APP_STORE_CONNECT_API_KEY is set" || echo "ℹ️  APP_STORE_CONNECT_API_KEY is not set"
          
          # Run the new build system directly
          if [ "$BUILD_TYPE" = "dev" ]; then
            python3 build-pkg.py --component both --no-notarize --version "$VERSION"
          else
            python3 build-pkg.py --component both --version "$VERSION"
          fi

      - name: Verify build artifacts
        shell: bash
        run: |
          echo "🔍 Verifying build artifacts..."
          
          if [ -d "artifacts" ]; then
            echo "📦 Found artifacts directory:"
            ls -la artifacts/
            
            for pkg in artifacts/*.pkg; do
              if [ -f "$pkg" ]; then
                echo ""
                echo "📋 Checking $(basename "$pkg"):"
                
                # Check file size
                size=$(du -sh "$pkg" | cut -f1)
                echo "  📏 Size: $size"
                
                # Check package signature
                if pkgutil --check-signature "$pkg" >/dev/null 2>&1; then
                  echo "  ✅ Package is signed"
                  
                  # Get certificate details
                  pkgutil --check-signature "$pkg" | grep "Certificate" | head -3
                else
                  echo "  ⚠️  Package is not signed"
                fi
                
                # Check Gatekeeper assessment
                if spctl --assess --type install "$pkg" >/dev/null 2>&1; then
                  echo "  ✅ Package passes Gatekeeper"
                else
                  echo "  ⚠️  Package may not pass Gatekeeper"
                fi
              fi
            done
          else
            echo "❌ No artifacts directory found"
            exit 1
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-simplified-${{ github.run_number }}
          path: |
            artifacts/
            logs/
          retention-days: 30

      - name: Generate final summary
        shell: bash
        run: |
          echo "📋 Build Summary"
          echo "=============="
          echo "Build completed successfully using macOS-Pkg-Builder"
          echo ""
          
          if [ -d "artifacts" ]; then
            pkg_count=$(find artifacts -name "*.pkg" | wc -l)
            echo "📦 Generated $pkg_count package(s):"
            
            for pkg in artifacts/*.pkg; do
              if [ -f "$pkg" ]; then
                size=$(du -sh "$pkg" | cut -f1)
                name=$(basename "$pkg")
                
                # Check signing status
                if pkgutil --check-signature "$pkg" >/dev/null 2>&1; then
                  status="✅ Signed"
                else
                  status="⚠️  Unsigned"
                fi
                
                echo "  • $name ($size) - $status"
              fi
            done
          fi
          
          echo ""
          echo "🎉 macOS build completed successfully!"
          echo "The packages are ready for distribution."

      - name: Post-build cleanup
        if: always()
        shell: bash
        run: |
          echo "🧹 Performing post-build cleanup..."
          
          # Clean up any temporary keychains created by the Python script
          if security list-keychains -d user | grep -q "r2midi-github"; then
            security list-keychains -d user | grep "r2midi-github" | sed 's/"//g' | while read keychain; do
              echo "Removing temporary keychain: $keychain"
              security delete-keychain "$keychain" 2>/dev/null || true
            done
          fi
          
          # Clean up certificate files
          rm -rf /tmp/github_certs 2>/dev/null || true
          
          echo "✅ Cleanup completed"