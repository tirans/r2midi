name: Build macOS
on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
        description: 'Application version'
      build-type:
        required: false
        type: string
        default: 'production'
        description: 'Build type (dev, staging, production)'
    outputs:
      artifact-name:
        description: "Name of the uploaded artifact"
        value: ${{ jobs.build-macos.outputs.artifact-name }}
    secrets:
      # Support both individual certificates (preferred) and combined P12 (legacy)
      APPLE_DEVELOPER_ID_APPLICATION_CERT:
        required: false
      APPLE_DEVELOPER_ID_INSTALLER_CERT:
        required: false
      APPLE_CERT_PASSWORD:
        required: false
      # GitHub workflow standard format (alternative)
      APPLE_CERTIFICATE_P12:
        required: false
      APPLE_CERTIFICATE_PASSWORD:
        required: false
      # Required for notarization
      APPLE_ID:
        required: true
      APPLE_ID_PASSWORD:
        required: true
      APPLE_TEAM_ID:
        required: true
  workflow_dispatch:
    inputs:
      build-type:
        description: 'Build type'
        required: false
        type: choice
        options:
          - dev
          - staging
          - production
        default: 'dev'

jobs:
  build-macos:
    name: Build macOS Apps (Signed & Notarized) - Runner: ${{ vars.MACOS_RUNNER || 'self-hosted' }}
    runs-on: ${{ vars.MACOS_RUNNER || 'self-hosted' }}
    timeout-minutes: 60
    outputs:
      artifact-name: ${{ steps.upload.outputs.artifact-name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            r2midi_client/requirements.txt

      - name: Make scripts executable
        shell: bash
        run: |
          echo "üîß Ensuring all scripts are executable..."
          find .github/scripts/ -name "*.sh" -type f -exec chmod +x {} \;
          echo "‚úÖ All scripts are now executable"

      - name: Extract version information
        id: version
        shell: bash
        run: |
          ./.github/scripts/extract-version.sh "${{ inputs.version }}"

      - name: Validate build environment
        shell: bash
        run: |
          ./.github/scripts/validate-build-environment.sh macos

      - name: Install system dependencies
        shell: bash
        run: |
          ./.github/scripts/install-system-dependencies.sh macos

      - name: Install Python dependencies
        shell: bash
        run: |
          ./.github/scripts/install-python-dependencies.sh production

      - name: Setup Apple Developer certificates
        shell: bash
        env:
          # Support both certificate formats
          APPLE_DEVELOPER_ID_APPLICATION_CERT: ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION_CERT }}
          APPLE_DEVELOPER_ID_INSTALLER_CERT: ${{ secrets.APPLE_DEVELOPER_ID_INSTALLER_CERT }}
          APPLE_CERT_PASSWORD: ${{ secrets.APPLE_CERT_PASSWORD }}
          APPLE_CERTIFICATE_P12: ${{ secrets.APPLE_CERTIFICATE_P12 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          ./.github/scripts/setup-certificates.sh

      - name: Build applications
        shell: bash
        run: |
          ./.github/scripts/build-briefcase-apps.sh macos signed

      - name: Create signed and notarized PKG installers
        id: pkg_creation
        shell: bash
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Load Apple credentials (GitHub secrets or local config)
          source ./.github/scripts/load-apple-credentials.sh

          # Try PKG creation first
          if ./.github/scripts/create-macos-pkg.sh \
            "${{ steps.version.outputs.version }}" \
            "${{ inputs.build-type }}" \
            "$APPLE_ID_FINAL" \
            "$APPLE_ID_PASSWORD_FINAL" \
            "$APPLE_TEAM_ID_FINAL"; then
            echo "pkg_success=true" >> $GITHUB_OUTPUT
            echo "‚úÖ PKG creation successful"
          else
            echo "pkg_success=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è PKG creation failed, will try DMG fallback"
          fi
        continue-on-error: true

      - name: Fallback to DMG creation
        if: steps.pkg_creation.outputs.pkg_success != 'true'
        shell: bash
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Load Apple credentials (GitHub secrets or local config)
          source ./.github/scripts/load-apple-credentials.sh

          echo "üíø PKG creation failed, creating DMG files as fallback..."
          ./.github/scripts/create-macos-dmg-fallback.sh \
            "${{ steps.version.outputs.version }}" \
            "${{ inputs.build-type }}" \
            "$APPLE_ID_FINAL" \
            "$APPLE_ID_PASSWORD_FINAL" \
            "$APPLE_TEAM_ID_FINAL"

      - name: Organize final artifacts
        shell: bash
        run: |
          echo "üì¶ Organizing final distribution packages..."

          # Check what was actually created
          pkg_count=$(find artifacts/ -name "*.pkg" 2>/dev/null | wc -l)
          dmg_count=$(find artifacts/ -name "*.dmg" 2>/dev/null | wc -l)

          if [ "$pkg_count" -gt 0 ]; then
            echo "‚úÖ PKG Installers created (primary distribution format):"
            find artifacts/ -name "*.pkg" | while read pkg; do
              if [ -f "$pkg" ]; then
                size=$(du -h "$pkg" | cut -f1)
                echo "  üì¶ $(basename "$pkg") ($size) - READY FOR DISTRIBUTION"
              fi
            done
          fi

          if [ "$dmg_count" -gt 0 ]; then
            if [ "$pkg_count" -gt 0 ]; then
              echo ""
              echo "üìç Optional DMG files:"
            else
              echo "‚úÖ DMG Files created (fallback distribution format):"
            fi
            find artifacts/ -name "*.dmg" | while read dmg; do
              if [ -f "$dmg" ]; then
                size=$(du -h "$dmg" | cut -f1)
                echo "  üíø $(basename "$dmg") ($size)"
              fi
            done
          fi

          if [ "$pkg_count" -eq 0 ] && [ "$dmg_count" -eq 0 ]; then
            echo "‚ùå No distribution packages were created"
            exit 1
          fi

          echo ""
          echo "‚úÖ Distribution packages ready"

      - name: Validate distribution packages
        shell: bash
        run: |
          echo "üîç Validating distribution packages..."

          # Validate PKG installers (primary format)
          pkg_count=$(find artifacts/ -name "*.pkg" 2>/dev/null | wc -l)
          if [ "$pkg_count" -gt 0 ]; then
            echo "üì¶ Validating PKG installers (primary distribution format)..."

            find artifacts/ -name "*.pkg" | while read file; do
              if [ -f "$file" ]; then
                echo "Validating PKG: $(basename "$file")"

                # Check PKG signature
                if pkgutil --check-signature "$file" 2>/dev/null | grep -q "signed"; then
                  echo "  ‚úÖ PKG signature valid"
                else
                  echo "  ‚ùå PKG signature invalid"
                fi

                # Check Gatekeeper compatibility
                if spctl --assess --type install "$file" 2>/dev/null; then
                  echo "  ‚úÖ PKG passes Gatekeeper assessment"
                else
                  echo "  ‚ö†Ô∏è PKG Gatekeeper assessment failed (may be normal before distribution)"
                fi

                # Check notarization stapling
                if xcrun stapler validate "$file" 2>/dev/null; then
                  echo "  ‚úÖ Notarization ticket stapled"
                else
                  echo "  ‚ö†Ô∏è No notarization ticket found"
                fi

                echo ""
              fi
            done
          fi

          # Validate DMG files
          dmg_count=$(find artifacts/ -name "*.dmg" 2>/dev/null | wc -l)
          if [ "$dmg_count" -gt 0 ]; then
            if [ "$pkg_count" -gt 0 ]; then
              echo "üìç Validating optional DMG files..."
            else
              echo "üíø Validating DMG files (fallback distribution format)..."
            fi

            find artifacts/ -name "*.dmg" | while read file; do
              if [ -f "$file" ]; then
                echo "Validating DMG: $(basename "$file")"

                # Check DMG signature
                if codesign --verify --deep --strict "$file" 2>/dev/null; then
                  echo "  ‚úÖ DMG signature valid"
                else
                  echo "  ‚ö†Ô∏è DMG signature verification failed"
                fi

                # Check notarization stapling
                if xcrun stapler validate "$file" 2>/dev/null; then
                  echo "  ‚úÖ Notarization ticket stapled"
                else
                  echo "  ‚ö†Ô∏è No notarization ticket found"
                fi

                echo ""
              fi
            done
          fi

          # Summary
          if [ "$pkg_count" -gt 0 ]; then
            echo "‚úÖ PKG installer validation complete - ready for distribution"
          elif [ "$dmg_count" -gt 0 ]; then
            echo "‚úÖ DMG validation complete - fallback distribution ready"
          else
            echo "‚ùå No packages found to validate"
            exit 1
          fi

      - name: Upload artifacts
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ inputs.build-type }}-${{ github.run_number }}
          path: artifacts/
          retention-days: ${{ inputs.build-type == 'production' && 90 || 30 }}
          compression-level: 6

      - name: Build summary
        shell: bash
        run: |
          echo "‚úÖ macOS PKG installer build complete!"
          echo ""
          echo "üì¶ PRIMARY DISTRIBUTION FILES (PKG Installers):"
          find artifacts/ -name "*.pkg" | while read pkg; do
            if [ -f "$pkg" ]; then
              size=$(du -h "$pkg" | cut -f1)
              echo "  üì¶ $(basename "$pkg") ($size) - READY FOR DISTRIBUTION"
            fi
          done

          echo ""
          echo "üíø OPTIONAL FILES (DMG Images):"
          find artifacts/ -name "*.dmg" | while read dmg; do
            if [ -f "$dmg" ]; then
              size=$(du -h "$dmg" | cut -f1)
              echo "  üíø $(basename "$dmg") ($size) - Manual installation option"
            fi
          done

          echo ""
          echo "üìã Distribution Status:"
          echo "  ‚úÖ PKG installers are signed with Developer ID Installer"
          echo "  ‚úÖ PKG installers are notarized by Apple"
          echo "  ‚úÖ PKG installers will install to /Applications automatically"
          echo "  ‚úÖ No security warnings will appear to users"
          echo "  ‚úÖ Ready for public distribution"

          # Generate traditional build summary for compatibility
          ./.github/scripts/generate-build-summary.sh macos "${{ inputs.build-type }}" "${{ steps.version.outputs.version }}" pkg-focused

      - name: Cleanup signing materials
        if: always()
        shell: bash
        run: |
          echo "üßπ Cleaning up signing materials..."

          # Remove temporary certificates
          rm -f *.p12 2>/dev/null || true

          # Remove temporary keychain
          if [ -n "${TEMP_KEYCHAIN:-}" ]; then
            security delete-keychain "$TEMP_KEYCHAIN" 2>/dev/null || true
          fi

          # Remove signing identities file
          rm -f /tmp/signing_identities.sh 2>/dev/null || true

          # List remaining keychains for verification
          echo "Remaining keychains:"
          security list-keychains -d user

          echo "‚úÖ Cleanup complete"
