name: Build All Platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_call:
    inputs:
      build_type:
        description: 'Build type'
        required: false
        type: string
        default: 'production'
    secrets:
      APPLE_DEVELOPER_ID_APPLICATION_CERT:
        required: false
      APPLE_DEVELOPER_ID_INSTALLER_CERT:
        required: false
      APPLE_CERT_PASSWORD:
        required: false
      APPLE_ID:
        required: false
      APPLE_ID_PASSWORD:
        required: false
      APPLE_TEAM_ID:
        required: false
      APP_STORE_CONNECT_KEY_ID:
        required: false
      APP_STORE_CONNECT_ISSUER_ID:
        required: false
      APP_STORE_CONNECT_API_KEY:
        required: false
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: false
        type: choice
        options: [dev, staging, production]
        default: 'production'

permissions:
  contents: write
  id-token: write

jobs:
  version-increment:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    outputs:
      version: ${{ steps.version.outputs.new_version }}
      changed: ${{ steps.version.outputs.changed }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Increment version
        id: version
        run: |
          chmod +x .github/scripts/update-version.sh
          # Set GITHUB_OUTPUT for the script
          export GITHUB_OUTPUT=$GITHUB_OUTPUT
          ./.github/scripts/update-version.sh "patch"

  test-server:
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Create server virtual environment
        run: |
          python -m venv venv_server_test
          source venv_server_test/bin/activate
          python -m pip install --upgrade pip
          pip install -r server/requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Test server components
        run: |
          source venv_server_test/bin/activate
          export PYTHONPATH=$PWD:${PYTHONPATH:-}
          python -m pytest tests/unit/server/ -v --cov=server --cov-report=xml:coverage-server.xml

      - name: Upload server coverage
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage-server.xml
          flags: server-tests

  test-client:
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install Qt system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            xvfb \
            libegl1-mesa-dev \
            libgl1-mesa-dev \
            libglib2.0-0 \
            libxkbcommon-x11-0 \
            libxcb-icccm4 \
            libxcb-image0 \
            libxcb-keysyms1 \
            libxcb-randr0 \
            libxcb-render-util0 \
            libxcb-xinerama0 \
            libxcb-xfixes0 \
            libxcb-shape0 \
            x11-utils \
            libasound2-dev \
            libjack-jackd2-dev \
            build-essential \
            pkg-config

      - name: Create client virtual environment
        run: |
          python -m venv venv_client_test
          source venv_client_test/bin/activate
          python -m pip install --upgrade pip
          pip install -r r2midi_client/requirements.txt
          pip install pytest pytest-cov pytest-qt

      - name: Test client components
        run: |
          source venv_client_test/bin/activate
          export PYTHONPATH=$PWD:${PYTHONPATH:-}
          export QT_QPA_PLATFORM=offscreen
          export DISPLAY=:99
          # Only test client if there are client tests and Qt is working
          if [ -d "tests/unit/r2midi_client" ] && python -c "import PyQt6.QtCore; print('Qt available')" 2>/dev/null; then
            xvfb-run -a python -m pytest tests/unit/r2midi_client/ -v --cov=r2midi_client --cov-report=xml:coverage-client.xml
          else
            echo "Skipping client tests - Qt not available or no client tests found"
            # Create empty coverage file
            echo '<?xml version="1.0" ?><coverage></coverage>' > coverage-client.xml
          fi

      - name: Upload client coverage
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage-client.xml
          flags: client-tests

  extract-version:
    runs-on: ubuntu-latest
    needs: [version-increment]
    if: always()
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version
        id: version
        run: |
          # For pushes to master, use incremented version if available
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/master" ] && [ "${{ needs.version-increment.outputs.version }}" != "" ]; then
            VERSION="${{ needs.version-increment.outputs.version }}"
            echo "Using incremented version: $VERSION"
          else
            # Extract from server/version.py for PRs or if increment failed
            VERSION=$(python -c "exec(open('server/version.py').read()); print(__version__)")
            echo "Using current version: $VERSION"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  build-windows:
    runs-on: windows-latest
    needs: [test-server, test-client, extract-version]
    if: github.event_name == 'push'
    timeout-minutes: 60
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Create server virtual environment and build
        run: |
          python -m venv venv_server_build
          venv_server_build\Scripts\activate
          python -m pip install --upgrade pip
          pip install -r server/requirements.txt
          pip install pyinstaller
          pyinstaller --onefile --name "R2MIDI-Server" --distpath "dist/server" server/main.py

      - name: Create client virtual environment and build
        run: |
          python -m venv venv_client_build
          venv_client_build\Scripts\activate
          python -m pip install --upgrade pip
          pip install -r r2midi_client/requirements.txt
          pip install pyinstaller
          pyinstaller --onefile --name "R2MIDI-Client" --distpath "dist/client" r2midi_client/main.py

      - name: Package artifacts
        shell: bash
        run: |
          mkdir -p artifacts
          VERSION="${{ needs.extract-version.outputs.version }}"
          
          # Create Server package
          mkdir -p "R2MIDI-Server-$VERSION-windows"
          cp dist/server/R2MIDI-Server.exe "R2MIDI-Server-$VERSION-windows/"
          cp README.md "R2MIDI-Server-$VERSION-windows/" || true
          powershell Compress-Archive -Path "R2MIDI-Server-$VERSION-windows" -DestinationPath "artifacts/R2MIDI-Server-$VERSION-windows.zip"
          
          # Create Client package  
          mkdir -p "R2MIDI-Client-$VERSION-windows"
          cp dist/client/R2MIDI-Client.exe "R2MIDI-Client-$VERSION-windows/"
          cp README.md "R2MIDI-Client-$VERSION-windows/" || true
          powershell Compress-Archive -Path "R2MIDI-Client-$VERSION-windows" -DestinationPath "artifacts/R2MIDI-Client-$VERSION-windows.zip"

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-builds
          path: artifacts/
          retention-days: 30

  build-linux:
    runs-on: ubuntu-latest
    needs: [test-server, test-client, extract-version]
    if: github.event_name == 'push'
    timeout-minutes: 60
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Use centralized version
        run: |
          VERSION="${{ needs.extract-version.outputs.version }}"
          echo "Building version: $VERSION"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            pkg-config \
            libasound2-dev \
            libjack-jackd2-dev \
            python3-dev

      - name: Create server virtual environment and build
        run: |
          python -m venv venv_server_build
          source venv_server_build/bin/activate
          python -m pip install --upgrade pip
          pip install -r server/requirements.txt
          pip install pyinstaller
          pyinstaller --onefile --name "r2midi-server" --distpath "dist/server" server/main.py

      - name: Create client virtual environment and build
        run: |
          python -m venv venv_client_build
          source venv_client_build/bin/activate
          python -m pip install --upgrade pip
          pip install -r r2midi_client/requirements.txt
          pip install pyinstaller
          pyinstaller --onefile --name "r2midi-client" --distpath "dist/client" r2midi_client/main.py

      - name: Package artifacts
        run: |
          mkdir -p artifacts
          VERSION="${{ needs.extract-version.outputs.version }}"
          
          # Create Server package
          mkdir -p "r2midi-server-$VERSION-linux"
          cp dist/server/r2midi-server "r2midi-server-$VERSION-linux/"
          cp README.md "r2midi-server-$VERSION-linux/" || true
          tar -czf "artifacts/R2MIDI-Server-$VERSION-linux.tar.gz" "r2midi-server-$VERSION-linux"
          
          # Create Client package
          mkdir -p "r2midi-client-$VERSION-linux" 
          cp dist/client/r2midi-client "r2midi-client-$VERSION-linux/"
          cp README.md "r2midi-client-$VERSION-linux/" || true
          tar -czf "artifacts/R2MIDI-Client-$VERSION-linux.tar.gz" "r2midi-client-$VERSION-linux"

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-builds
          path: artifacts/
          retention-days: 30

  build-macos:
    runs-on: self-hosted
    needs: [test-server, test-client, extract-version]
    if: github.event_name == 'push'
    timeout-minutes: 60
    
    steps:
      - name: Pre-build cleanup
        run: |
          echo "🧹 Cleaning up self-hosted runner environment..."
          # Clean up old keychains
          if security list-keychains -d user | grep -q "r2midi-"; then
            security list-keychains -d user | grep "r2midi-" | sed 's/"//g' | while read keychain; do
              echo "Removing old keychain: $keychain"
              security delete-keychain "$keychain" 2>/dev/null || true
            done
          fi
          # Clean up certificate files
          rm -rf /tmp/github_certs 2>/dev/null || true
          # Clean up old build artifacts
          rm -rf build_client build_server artifacts 2>/dev/null || true
          echo "✅ Pre-build cleanup completed"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Use centralized version
        run: |
          VERSION="${{ needs.extract-version.outputs.version }}"
          echo "Building version: $VERSION"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install macos-pkg-builder

      - name: Build macOS PKGs
        env:
          APPLE_DEVELOPER_ID_APPLICATION_CERT: ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION_CERT }}
          APPLE_DEVELOPER_ID_INSTALLER_CERT: ${{ secrets.APPLE_DEVELOPER_ID_INSTALLER_CERT }}
          APPLE_CERT_PASSWORD: ${{ secrets.APPLE_CERT_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        run: |
          VERSION="${{ needs.extract-version.outputs.version }}"
          BUILD_TYPE="${{ inputs.build_type || github.event.inputs.build_type || 'production' }}"
          
          echo "🚀 Starting R2MIDI macOS build..."
          echo "Version: $VERSION"
          echo "Build Type: $BUILD_TYPE"
          
          if [ "$BUILD_TYPE" = "dev" ]; then
            python3 build-pkg.py --component both --no-notarize --version "$VERSION"
          else
            python3 build-pkg.py --component both --version "$VERSION"
          fi

      - name: Verify build artifacts
        run: |
          echo "🔍 Verifying build artifacts..."
          if [ -d "artifacts" ]; then
            echo "📦 Found artifacts directory:"
            ls -la artifacts/
            
            for pkg in artifacts/*.pkg; do
              if [ -f "$pkg" ]; then
                echo ""
                echo "📋 Checking $(basename "$pkg"):"
                size=$(du -sh "$pkg" | cut -f1)
                echo "  📏 Size: $size"
                
                if pkgutil --check-signature "$pkg" >/dev/null 2>&1; then
                  echo "  ✅ Package is signed"
                else
                  echo "  ⚠️  Package is unsigned"
                fi
                
                if spctl --assess --type install "$pkg" >/dev/null 2>&1; then
                  echo "  ✅ Package passes Gatekeeper"
                else
                  echo "  ⚠️  Package may not pass Gatekeeper"
                fi
              fi
            done
          else
            echo "❌ No artifacts directory found"
            exit 1
          fi

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-builds
          path: artifacts/
          retention-days: 30

      - name: Post-build cleanup
        if: always()
        run: |
          echo "🧹 Performing post-build cleanup..."
          # Clean up temporary keychains
          if security list-keychains -d user | grep -q "r2midi-github"; then
            security list-keychains -d user | grep "r2midi-github" | sed 's/"//g' | while read keychain; do
              echo "Removing temporary keychain: $keychain"
              security delete-keychain "$keychain" 2>/dev/null || true
            done
          fi
          # Clean up certificate files
          rm -rf /tmp/github_certs 2>/dev/null || true
          echo "✅ Cleanup completed"

  create-release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux, build-macos, extract-version]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all_builds

      - name: Organize release artifacts
        run: |
          echo "📦 Organizing artifacts for release..."
          mkdir -p release_artifacts
          
          # Copy all artifacts
          find all_builds/ -type f \( -name "*.zip" -o -name "*.tar.gz" -o -name "*.pkg" \) -exec cp {} release_artifacts/ \;
          
          echo "📦 Release artifacts:"
          ls -la release_artifacts/

      - name: Use centralized version
        run: |
          VERSION="${{ needs.extract-version.outputs.version }}"
          echo "Using version: $VERSION"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.extract-version.outputs.version }}
          name: "R2MIDI v${{ needs.extract-version.outputs.version }}"
          draft: true
          prerelease: false
          files: release_artifacts/*
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ## 🚀 R2MIDI v${{ needs.extract-version.outputs.version }}
            
            ### 📦 Downloads
            
            **🍎 macOS (Recommended)**
            - `R2MIDI-Server-${{ needs.extract-version.outputs.version }}.pkg` - Signed & Notarized Server Package
            - `R2MIDI-Client-${{ needs.extract-version.outputs.version }}.pkg` - Signed & Notarized Client Package
            
            **🐧 Linux**
            - `R2MIDI-Server-${{ needs.extract-version.outputs.version }}-linux.tar.gz` - Server Portable Package
            - `R2MIDI-Client-${{ needs.extract-version.outputs.version }}-linux.tar.gz` - Client Portable Package
            
            **🪟 Windows**
            - `R2MIDI-Server-${{ needs.extract-version.outputs.version }}-windows.zip` - Server Portable Package
            - `R2MIDI-Client-${{ needs.extract-version.outputs.version }}-windows.zip` - Client Portable Package
            
            ### 📋 Installation
            
            **macOS:** Double-click the `.pkg` files to install. No security warnings!
            
            **Linux:** Extract `.tar.gz` files and run the executables.
            
            **Windows:** Extract `.zip` files and run the `.exe` files.
            
            ### 🔒 Security Status
            
            | Platform | Status |
            |----------|--------|
            | 🍎 macOS | ✅ Signed & Notarized |
            | 🐧 Linux | ✅ Ready to use |
            | 🪟 Windows | ⚠️ Unsigned (may show security warnings) |