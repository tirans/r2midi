name: Production Release
on:
  workflow_run:
    workflows: ["Build and Test"]
    types: [completed]
    branches: [master]

permissions:
  contents: write
  id-token: write

jobs:
  check-build-success:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      should_app_store: ${{ steps.check.outputs.should_app_store }}
      version: ${{ steps.get_version.outputs.version }}
      build_status: ${{ steps.check_build_status.outputs.build_status }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Check build status
        id: check_build_status
        run: |
          if [ "${{ github.event.workflow_run.conclusion }}" == "success" ]; then
            echo "build_status=success" >> $GITHUB_OUTPUT
            echo "✅ Previous build was successful"
          else
            echo "build_status=failure" >> $GITHUB_OUTPUT
            echo "❌ Previous build failed - will create a release anyway"
          fi

      - name: Check if release needed
        id: check
        run: |
          # Check if we have signing certificates (only macOS required now)
          if [ -n "${{ secrets.APPLE_CERTIFICATE_P12 }}" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "✅ macOS code signing certificates available - proceeding with release"
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "⚠️ No macOS signing certificates available - skipping signed release"
          fi

          # Check if we should submit to App Store
          if [ -n "${{ secrets.APP_STORE_CONNECT_API_KEY }}" ] && [ -n "${{ secrets.APPLE_APP_STORE_CERTIFICATE_P12 }}" ]; then
            echo "should_app_store=true" >> $GITHUB_OUTPUT
            echo "🏪 App Store Connect API key and certificates available - will submit to App Store"
          else
            echo "should_app_store=false" >> $GITHUB_OUTPUT
            echo "ℹ️ App Store submission disabled (missing API key or certificates)"
          fi

      - name: Get version
        id: get_version
        run: |
          VERSION=$(grep -o '__version__ = "[^"]*"' server/version.py | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  build-signed-releases:
    needs: check-build-success
    if: needs.check-build-success.outputs.should_release == 'true'
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, windows-latest, ubuntu-latest]
        include:
          - os: macos-13
            platform: macOS
            platform_name: macos
            briefcase_platform: macOS
            briefcase_format: app
          - os: windows-latest
            platform: windows
            platform_name: windows
            briefcase_platform: windows
            briefcase_format: app
          - os: ubuntu-latest
            platform: linux
            platform_name: linux
            briefcase_platform: linux
            briefcase_format: system
    runs-on: ${{ matrix.os }}
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Fix submodules
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git submodule deinit -f server/midi-presets || true
          rm -rf .git/modules/server/midi-presets || true
          git rm -rf server/midi-presets || true
          git submodule add https://github.com/tirans/midi-presets.git server/midi-presets
          git submodule init
          git submodule update --init --recursive
        shell: bash

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Configure app metadata
        env:
          BUNDLE_PREFIX: ${{ secrets.APP_BUNDLE_ID_PREFIX }}
          SERVER_NAME: ${{ secrets.APP_DISPLAY_NAME_SERVER }}
          CLIENT_NAME: ${{ secrets.APP_DISPLAY_NAME_CLIENT }}
          AUTHOR_NAME: ${{ secrets.APP_AUTHOR_NAME }}
          AUTHOR_EMAIL: ${{ secrets.APP_AUTHOR_EMAIL }}
        run: |
          echo "BUNDLE_PREFIX=${BUNDLE_PREFIX:-com.r2midi}" >> $GITHUB_ENV
          echo "SERVER_NAME=${SERVER_NAME:-R2MIDI Server}" >> $GITHUB_ENV
          echo "CLIENT_NAME=${CLIENT_NAME:-R2MIDI Client}" >> $GITHUB_ENV
          echo "AUTHOR_NAME=${AUTHOR_NAME:-R2MIDI Team}" >> $GITHUB_ENV
          echo "AUTHOR_EMAIL=${AUTHOR_EMAIL:-tiran@tirans.com}" >> $GITHUB_ENV

          VERSION=$(grep -o '__version__ = "[^"]*"' server/version.py | cut -d'"' -f2)
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
        shell: bash

      - name: Import Code Signing Certificates (macOS)
        if: matrix.platform == 'macOS'
        env:
          APPLE_CERTIFICATE_P12: ${{ secrets.APPLE_CERTIFICATE_P12 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          if [ -z "$APPLE_CERTIFICATE_P12" ]; then
            echo "❌ No macOS signing certificates provided"
            exit 1
          fi

          # Mask sensitive values in logs
          echo "::add-mask::$APPLE_CERTIFICATE_PASSWORD"
          echo "::add-mask::$APPLE_ID"
          echo "::add-mask::$APPLE_ID_PASSWORD"
          echo "::add-mask::$APPLE_TEAM_ID"

          # Import certificate
          echo "$APPLE_CERTIFICATE_P12" | base64 --decode > developer_id_cert.p12

          # Create a temporary keychain for briefcase to use
          security create-keychain -p briefcase briefcase.keychain
          security default-keychain -s briefcase.keychain
          security unlock-keychain -p briefcase briefcase.keychain

          # Import the certificate
          security import developer_id_cert.p12 -k briefcase.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          rm -f developer_id_cert.p12

          security set-key-partition-list -S apple-tool:,apple: -s -k briefcase briefcase.keychain

          # Find the signing identity
          SIGNING_IDENTITY=$(security find-identity -v -p codesigning briefcase.keychain | grep "Developer ID Application" | head -1 | awk -F'"' '{print $2}')

          if [ -z "$SIGNING_IDENTITY" ]; then
            echo "❌ No valid signing identity found"
            exit 1
          fi

          echo "BRIEFCASE_SIGNING_IDENTITY=$SIGNING_IDENTITY" >> $GITHUB_ENV
          echo "BRIEFCASE_APPLE_ID=$APPLE_ID" >> $GITHUB_ENV
          echo "BRIEFCASE_APPLE_ID_PASSWORD=$APPLE_ID_PASSWORD" >> $GITHUB_ENV
          echo "BRIEFCASE_APPLE_TEAM_ID=$APPLE_TEAM_ID" >> $GITHUB_ENV
          echo "✅ Signing identity configured: $SIGNING_IDENTITY"

      - name: Install system dependencies
        run: |
          if [ "${{ matrix.platform }}" = "macOS" ]; then
            echo "Installing macOS dependencies..."
          elif [ "${{ matrix.platform }}" = "linux" ]; then
            sudo apt-get update
            sudo apt-get install -y \
              libasound2-dev libegl1 libjack-dev librtmidi-dev \
              libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 \
              libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 \
              libxcb-xinerama0 libxcb-xfixes0
          fi
        shell: bash

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install briefcase
          pip install -r requirements.txt
          if [ -f r2midi_client/requirements.txt ]; then
            pip install -r r2midi_client/requirements.txt
          fi
        shell: bash

      - name: Update pyproject.toml
        run: |
          # Update bundle ID if needed
          if [ "${BUNDLE_PREFIX}" != "com.r2midi" ]; then
            sed -i.bak "s|bundle = \"com\.r2midi\"|bundle = \"${BUNDLE_PREFIX}\"|g" pyproject.toml
          fi

          # Update version and metadata
          sed -i.bak "s|version = \"0\.1\.64\"|version = \"${APP_VERSION}\"|g" pyproject.toml
          sed -i.bak "s|author = \".*\"|author = \"${AUTHOR_NAME}\"|g" pyproject.toml
          sed -i.bak "s|author_email = \".*\"|author_email = \"${AUTHOR_EMAIL}\"|g" pyproject.toml

          # Update formal names
          sed -i.bak "s|formal_name = \"R2MIDI Server\"|formal_name = \"${SERVER_NAME}\"|g" pyproject.toml
          sed -i.bak "s|formal_name = \"R2MIDI Client\"|formal_name = \"${CLIENT_NAME}\"|g" pyproject.toml

          # Add signing configuration for macOS
          if [ "${{ matrix.platform }}" = "macOS" ] && [ -n "$BRIEFCASE_SIGNING_IDENTITY" ]; then
            # Update or add code signing identity
            if grep -q "codesign_identity" pyproject.toml; then
              sed -i.bak "s|codesign_identity = \".*\"|codesign_identity = \"$BRIEFCASE_SIGNING_IDENTITY\"|g" pyproject.toml
            else
              # Add to macOS section
              sed -i.bak "/\[tool\.briefcase\.app\.server\.macOS\]/a\\
codesign_identity = \"$BRIEFCASE_SIGNING_IDENTITY\"" pyproject.toml
              sed -i.bak "/\[tool\.briefcase\.app\.r2midi-client\.macOS\]/a\\
codesign_identity = \"$BRIEFCASE_SIGNING_IDENTITY\"" pyproject.toml
            fi
          fi
        shell: bash

      - name: Build with Briefcase
        run: |
          echo "🔨 Building ${{ matrix.platform }} applications with Briefcase..."

          # Create applications
          echo "Creating R2MIDI Server..."
          briefcase create ${{ matrix.briefcase_platform }} ${{ matrix.briefcase_format }} -a server

          echo "Creating R2MIDI Client..."
          briefcase create ${{ matrix.briefcase_platform }} ${{ matrix.briefcase_format }} -a r2midi-client

          # Build applications
          echo "Building R2MIDI Server..."
          briefcase build ${{ matrix.briefcase_platform }} ${{ matrix.briefcase_format }} -a server

          echo "Building R2MIDI Client..."
          briefcase build ${{ matrix.briefcase_platform }} ${{ matrix.briefcase_format }} -a r2midi-client
        shell: bash

      - name: Package with Briefcase (with signing)
        run: |
          echo "📦 Packaging ${{ matrix.platform }} applications..."

          if [ "${{ matrix.platform }}" = "macOS" ]; then
            # Package with signing and notarization
            echo "Packaging R2MIDI Server with signing..."
            briefcase package ${{ matrix.briefcase_platform }} ${{ matrix.briefcase_format }} -a server \
              --identity "$BRIEFCASE_SIGNING_IDENTITY"

            echo "Packaging R2MIDI Client with signing..."
            briefcase package ${{ matrix.briefcase_platform }} ${{ matrix.briefcase_format }} -a r2midi-client \
              --identity "$BRIEFCASE_SIGNING_IDENTITY"

            # Notarization (if credentials are available)
            if [ -n "$BRIEFCASE_APPLE_ID" ] && [ -n "$BRIEFCASE_APPLE_ID_PASSWORD" ] && [ -n "$BRIEFCASE_APPLE_TEAM_ID" ]; then
              echo "🔐 Notarizing applications..."

              # Notarize server
              briefcase package ${{ matrix.briefcase_platform }} ${{ matrix.briefcase_format }} -a server \
                --notarize \
                --identity "$BRIEFCASE_SIGNING_IDENTITY" \
                --apple-id "$BRIEFCASE_APPLE_ID" \
                --apple-id-password "$BRIEFCASE_APPLE_ID_PASSWORD" \
                --apple-team-id "$BRIEFCASE_APPLE_TEAM_ID"

              # Notarize client
              briefcase package ${{ matrix.briefcase_platform }} ${{ matrix.briefcase_format }} -a r2midi-client \
                --notarize \
                --identity "$BRIEFCASE_SIGNING_IDENTITY" \
                --apple-id "$BRIEFCASE_APPLE_ID" \
                --apple-id-password "$BRIEFCASE_APPLE_ID_PASSWORD" \
                --apple-team-id "$BRIEFCASE_APPLE_TEAM_ID"
            fi
          else
            # Package without signing for other platforms
            briefcase package ${{ matrix.briefcase_platform }} ${{ matrix.briefcase_format }} -a server
            briefcase package ${{ matrix.briefcase_platform }} ${{ matrix.briefcase_format }} -a r2midi-client
          fi
        shell: bash

      - name: Prepare release artifacts
        run: |
          mkdir -p release_files

          if [ "${{ matrix.platform }}" = "macOS" ]; then
            # Find and package DMG files
            find dist -name "*.dmg" | while read dmg; do
              if [[ "$dmg" == *"Server"* ]] || [[ "$dmg" == *"server"* ]]; then
                cp "$dmg" "release_files/R2MIDI-Server-macos-signed.dmg"
              else
                cp "$dmg" "release_files/R2MIDI-Client-macos-signed.dmg"
              fi
            done
          elif [ "${{ matrix.platform }}" = "windows" ]; then
            # Find and package MSI files
            find dist -name "*.msi" | while read msi; do
              if [[ "$msi" == *"Server"* ]] || [[ "$msi" == *"server"* ]]; then
                cp "$msi" "release_files/R2MIDI-Server-windows.msi"
              else
                cp "$msi" "release_files/R2MIDI-Client-windows.msi"
              fi
            done
          else
            # Linux - package DEB files
            find dist -name "*.deb" | while read deb; do
              if [[ "$deb" == *"server"* ]]; then
                cp "$deb" "release_files/R2MIDI-Server-linux.deb"
              else
                cp "$deb" "release_files/R2MIDI-Client-linux.deb"
              fi
            done
          fi

          echo "Release artifacts prepared:"
          ls -la release_files/
        shell: bash

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-release-${{ matrix.platform_name }}
          path: release_files/*
          retention-days: 30

      - name: Cleanup keychain (macOS)
        if: always() && matrix.platform == 'macOS'
        run: |
          security delete-keychain briefcase.keychain || true

  app-store-submission:
    needs: [check-build-success, build-signed-releases]
    if: needs.check-build-success.outputs.should_app_store == 'true'
    runs-on: macos-14
    environment: app-store

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Fix submodules
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git submodule deinit -f server/midi-presets || true
          rm -rf .git/modules/server/midi-presets || true
          git rm -rf server/midi-presets || true
          git submodule add https://github.com/tirans/midi-presets.git server/midi-presets
          git submodule init
          git submodule update --init --recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install briefcase
          pip install -r requirements.txt
          if [ -f r2midi_client/requirements.txt ]; then
            pip install -r r2midi_client/requirements.txt
          fi

      - name: Configure App Store metadata
        env:
          BUNDLE_PREFIX: ${{ secrets.APP_BUNDLE_ID_PREFIX }}
          SERVER_NAME: ${{ secrets.APP_DISPLAY_NAME_SERVER }}
          CLIENT_NAME: ${{ secrets.APP_DISPLAY_NAME_CLIENT }}
          AUTHOR_NAME: ${{ secrets.APP_AUTHOR_NAME }}
          AUTHOR_EMAIL: ${{ secrets.APP_AUTHOR_EMAIL }}
        run: |
          echo "BUNDLE_PREFIX=${BUNDLE_PREFIX:-com.r2midi}" >> $GITHUB_ENV
          echo "SERVER_NAME=${SERVER_NAME:-R2MIDI Server}" >> $GITHUB_ENV
          echo "CLIENT_NAME=${CLIENT_NAME:-R2MIDI Client}" >> $GITHUB_ENV
          echo "AUTHOR_NAME=${AUTHOR_NAME:-R2MIDI Team}" >> $GITHUB_ENV
          echo "AUTHOR_EMAIL=${AUTHOR_EMAIL:-tiran@tirans.com}" >> $GITHUB_ENV

          VERSION=$(grep -o '__version__ = "[^"]*"' server/version.py | cut -d'"' -f2)
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Import App Store certificates
        env:
          APPLE_APP_STORE_CERTIFICATE_P12: ${{ secrets.APPLE_APP_STORE_CERTIFICATE_P12 }}
          APPLE_APP_STORE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_APP_STORE_CERTIFICATE_PASSWORD }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
        run: |
          # Mask sensitive values
          echo "::add-mask::$APPLE_APP_STORE_CERTIFICATE_PASSWORD"
          echo "::add-mask::$APP_STORE_CONNECT_API_KEY"
          echo "::add-mask::$APP_STORE_CONNECT_ISSUER_ID"
          echo "::add-mask::$APP_STORE_CONNECT_KEY_ID"

          # Import App Store certificate
          echo "$APPLE_APP_STORE_CERTIFICATE_P12" | base64 --decode > app_store_cert.p12

          security create-keychain -p briefcase app_store.keychain
          security default-keychain -s app_store.keychain
          security unlock-keychain -p briefcase app_store.keychain

          security import app_store_cert.p12 -k app_store.keychain -P "$APPLE_APP_STORE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          rm -f app_store_cert.p12

          security set-key-partition-list -S apple-tool:,apple: -s -k briefcase app_store.keychain

          # Find the App Store signing identity
          APP_STORE_IDENTITY=$(security find-identity -v -p codesigning app_store.keychain | grep "3rd Party Mac Developer Application" | head -1 | awk -F'"' '{print $2}')

          if [ -z "$APP_STORE_IDENTITY" ]; then
            echo "❌ No App Store signing identity found"
            exit 1
          fi

          echo "BRIEFCASE_APP_STORE_IDENTITY=$APP_STORE_IDENTITY" >> $GITHUB_ENV

          # Setup App Store Connect API key
          mkdir -p ~/.appstoreconnect/private_keys
          echo "$APP_STORE_CONNECT_API_KEY" | base64 --decode > ~/.appstoreconnect/private_keys/AuthKey_${APP_STORE_CONNECT_KEY_ID}.p8
          chmod 600 ~/.appstoreconnect/private_keys/AuthKey_${APP_STORE_CONNECT_KEY_ID}.p8

          echo "BRIEFCASE_APP_STORE_CONNECT_KEY_ID=$APP_STORE_CONNECT_KEY_ID" >> $GITHUB_ENV
          echo "BRIEFCASE_APP_STORE_CONNECT_ISSUER_ID=$APP_STORE_CONNECT_ISSUER_ID" >> $GITHUB_ENV

      - name: Update pyproject.toml for App Store
        run: |
          # Update bundle ID and metadata
          if [ "${BUNDLE_PREFIX}" != "com.r2midi" ]; then
            sed -i.bak "s|bundle = \"com\.r2midi\"|bundle = \"${BUNDLE_PREFIX}\"|g" pyproject.toml
          fi

          sed -i.bak "s|version = \"0\.1\.64\"|version = \"${APP_VERSION}\"|g" pyproject.toml
          sed -i.bak "s|author = \".*\"|author = \"${AUTHOR_NAME}\"|g" pyproject.toml
          sed -i.bak "s|author_email = \".*\"|author_email = \"${AUTHOR_EMAIL}\"|g" pyproject.toml

          # Update macOS configuration for App Store
          sed -i.bak "s|codesign_identity = \"Developer ID Application.*\"|codesign_identity = \"$BRIEFCASE_APP_STORE_IDENTITY\"|g" pyproject.toml

      - name: Build and submit to App Store
        run: |
          if [ "${{ secrets.ENABLE_APP_STORE_SUBMISSION }}" != "true" ]; then
            echo "🏪 App Store submission disabled (set ENABLE_APP_STORE_SUBMISSION=true to enable)"
            exit 0
          fi

          echo "🏪 Building for App Store..."

          # Create and build for App Store
          briefcase create macOS app -a server
          briefcase build macOS app -a server

          briefcase create macOS app -a r2midi-client
          briefcase build macOS app -a r2midi-client

          # Package for App Store with upload
          echo "📦 Packaging and uploading to App Store Connect..."

          briefcase package macOS app -a server \
            --app-store \
            --identity "$BRIEFCASE_APP_STORE_IDENTITY" \
            --key-id "$BRIEFCASE_APP_STORE_CONNECT_KEY_ID" \
            --issuer-id "$BRIEFCASE_APP_STORE_CONNECT_ISSUER_ID"

          briefcase package macOS app -a r2midi-client \
            --app-store \
            --identity "$BRIEFCASE_APP_STORE_IDENTITY" \
            --key-id "$BRIEFCASE_APP_STORE_CONNECT_KEY_ID" \
            --issuer-id "$BRIEFCASE_APP_STORE_CONNECT_ISSUER_ID"

          echo "🎉 Apps submitted to App Store Connect!"

      - name: Cleanup App Store keychain
        if: always()
        run: |
          rm -rf ~/.appstoreconnect
          security delete-keychain app_store.keychain || true

  publish-production-release:
    needs: [build-signed-releases, check-build-success]
    runs-on: ubuntu-latest
    if: always() && needs.check-build-success.outputs.should_release == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Get version
        id: get_info
        run: |
          VERSION=$(grep -o '__version__ = "[^"]*"' server/version.py | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download all production artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: production-release-*
          path: combined_production_files
          merge-multiple: true

      - name: Create Production Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_info.outputs.version }}
          name: R2MIDI v${{ steps.get_info.outputs.version }}
          files: combined_production_files/*
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ## 🚀 R2MIDI v${{ steps.get_info.outputs.version }} - Production Release

            **Official production release built and signed with Briefcase.**

            ### 📦 Downloads

            #### 🍎 macOS (Code Signed & Notarized)
            - **R2MIDI-Server-macos-signed.dmg** - R2MIDI Server installer
            - **R2MIDI-Client-macos-signed.dmg** - R2MIDI Client installer

            #### 🪟 Windows
            - **R2MIDI-Server-windows.msi** - R2MIDI Server installer
            - **R2MIDI-Client-windows.msi** - R2MIDI Client installer

            #### 🐧 Linux
            - **R2MIDI-Server-linux.deb** - R2MIDI Server package
            - **R2MIDI-Client-linux.deb** - R2MIDI Client package

            ${{ needs.check-build-success.outputs.should_app_store == 'true' && '#### 🏪 Mac App Store\n- **R2MIDI Server** and **R2MIDI Client** submitted to App Store\n- Check App Store Connect for review status\n' || '' }}

            ### 📋 Installation

            #### macOS ✅
            1. Download the .dmg file
            2. Double-click to mount
            3. Drag the app to Applications folder
            4. First launch: right-click and select "Open"

            #### Windows ✅  
            1. Download the .msi installer
            2. Double-click to run the installer
            3. Follow the installation wizard

            #### Linux ✅
            ```bash
            # Install the .deb package
            sudo dpkg -i R2MIDI-*.deb
            # Or double-click in file manager
            ```

            ### ✨ Features
            - 🔒 macOS applications are fully code signed and notarized
            - 📦 Professional installers for all platforms
            - 🏪 Automatic App Store submission (when configured)
            - 🚀 Built with Briefcase for consistent packaging

            ### 🏪 App Store Status
            ${{ needs.check-build-success.outputs.should_app_store == 'true' && '✅ **Submitted to Mac App Store** - Check App Store Connect for review status' || '⚠️ **App Store submission disabled** - Configure APP_STORE_CONNECT_API_KEY to enable' }}

            For documentation and support, visit [GitHub](https://github.com/tirans/r2midi).
