name: CI

on:
  workflow_call:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Test (Python ${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            python-version: "3.10"
          - os: macos-latest
            python-version: "3.10"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            r2midi_client/requirements.txt

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libasound2-dev \
            portaudio19-dev \
            build-essential \
            pkg-config

      - name: Install Python dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          if [ -f r2midi_client/requirements.txt ]; then 
            pip install -r r2midi_client/requirements.txt
          fi
          
          # Install test dependencies
          python -m pip install pytest pytest-asyncio pytest-mock pytest-cov

      - name: Validate project structure
        shell: bash
        run: |
          ./.github/scripts/validate-project-structure.sh

      - name: Run unit tests
        shell: bash
        run: |
          # Run tests with coverage for Python 3.12 on Ubuntu
          if [[ "${{ matrix.python-version }}" == "3.12" && "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            python -m pytest tests/ -v --cov=server --cov=r2midi_client --cov-report=xml --cov-report=term
          else
            python -m pytest tests/ -v
          fi

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.12' && matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install black flake8 isort mypy

      - name: Run code formatting check
        run: |
          black --check --diff server/ r2midi_client/

      - name: Run import sorting check
        run: |
          isort --check-only --diff server/ r2midi_client/

      - name: Run linting
        run: |
          flake8 server/ r2midi_client/ --max-line-length=88 --extend-ignore=E203,W503

      - name: Run type checking
        run: |
          mypy server/ r2midi_client/ --ignore-missing-imports

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install safety bandit

      - name: Check for known vulnerabilities
        run: |
          safety check --json || true

      - name: Run security linting
        run: |
          bandit -r server/ r2midi_client/ -f json || true

  build-test:
    name: Build Test (${{ matrix.platform }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux
            os: ubuntu-latest
          - platform: windows
            os: windows-latest
          - platform: macos
            os: macos-14

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install system dependencies (Linux)
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev portaudio19-dev

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m pip install briefcase
          python -m pip install -r requirements.txt

      - name: Test Briefcase build (dry run)
        shell: bash
        run: |
          # Test that briefcase can at least validate the configuration
          briefcase dev --version || echo "Briefcase validation test completed"

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [test, lint, security, build-test]
    if: always()

    steps:
      - name: Check results
        run: |
          echo "## 🔍 CI Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check individual job results
          if [[ "${{ needs.test.result }}" == "success" ]]; then
            echo "✅ **Tests**: All tests passed across multiple Python versions and platforms" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Tests**: Some tests failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.lint.result }}" == "success" ]]; then
            echo "✅ **Code Quality**: Code formatting, imports, and linting checks passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Code Quality**: Code quality issues found" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.security.result }}" == "success" ]]; then
            echo "✅ **Security**: No critical security issues detected" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Security**: Security scan completed with findings" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.build-test.result }}" == "success" ]]; then
            echo "✅ **Build Test**: Build configuration validated on all platforms" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build Test**: Build configuration issues detected" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Overall status
          if [[ "${{ needs.test.result }}" == "success" && "${{ needs.lint.result }}" == "success" && "${{ needs.build-test.result }}" == "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎉 **Overall Status**: Ready for merge!" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🚫 **Overall Status**: Issues need to be resolved before merge" >> $GITHUB_STEP_SUMMARY
          fi