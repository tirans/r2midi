name: CI - Continuous Integration

on:
  push:
    branches: [ develop, feature/*, dev/*, test/* ]
  pull_request:
    branches: [ master, main, develop ]
  workflow_dispatch:
    inputs:
      run-builds:
        description: 'Run builds in addition to tests'
        required: false
        type: boolean
        default: false
      platforms:
        description: 'Platforms to build (comma-separated: linux,windows,macOS)'
        required: false
        type: string
        default: 'linux,windows,macOS'

permissions:
  contents: read
  actions: write

jobs:
  # Quick validation and tests
  validate:
    name: Validate & Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    outputs:
      should-build: ${{ steps.check.outputs.should-build }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install project dependencies
        run: |
          python -m pip install --upgrade pip
          
          # Install project dependencies for testing
          if [ -f requirements.txt ]; then
            echo "📦 Installing project requirements..."
            pip install -r requirements.txt
          fi
          
          if [ -f r2midi_client/requirements.txt ]; then
            echo "📦 Installing client requirements..."
            pip install -r r2midi_client/requirements.txt
          fi

      - name: Install test dependencies (if needed)
        run: |
          # Only install test tools if we have tests or formatting config
          INSTALL_TEST_DEPS=false
          
          if [ -d "tests" ] || [ -f "pytest.ini" ] || [ -f "pyproject.toml" ]; then
            echo "📦 Installing pytest for testing..."
            pip install pytest pytest-cov
            INSTALL_TEST_DEPS=true
          fi
          
          if [ -f ".flake8" ] || [ -f "setup.cfg" ] || grep -q "flake8" pyproject.toml 2>/dev/null; then
            echo "📦 Installing flake8 for linting..."
            pip install flake8
            INSTALL_TEST_DEPS=true
          fi
          
          if [ -f "pyproject.toml" ] && grep -q "black\|isort" pyproject.toml; then
            echo "📦 Installing formatting tools..."
            pip install black isort
            INSTALL_TEST_DEPS=true
          fi
          
          if [ "$INSTALL_TEST_DEPS" = "false" ]; then
            echo "ℹ️ No test configuration found, skipping test dependencies"
          fi

      - name: Code formatting check
        if: hashFiles('pyproject.toml') != ''
        run: |
          echo "🔍 Checking code formatting..."
          
          # Only run if black/isort are configured
          if command -v black >/dev/null 2>&1; then
            echo "Running black format check..."
            black --check --diff . || echo "⚠️ Code formatting issues found (non-blocking)"
          fi
          
          if command -v isort >/dev/null 2>&1; then
            echo "Running isort import check..."
            isort --check-only --diff . || echo "⚠️ Import sorting issues found (non-blocking)"
          fi
          
          echo "✅ Formatting check complete"

      - name: Lint code
        if: hashFiles('.flake8', 'setup.cfg') != '' || contains(hashFiles('pyproject.toml'), 'flake8')
        run: |
          echo "🔍 Linting code..."
          
          if command -v flake8 >/dev/null 2>&1; then
            # Run flake8 with reasonable defaults
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=build,dist,.git,__pycache__,.tox,.pytest_cache
            flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=build,dist,.git,__pycache__,.tox,.pytest_cache
          else
            echo "⚠️ flake8 not available, skipping lint"
          fi
          
          echo "✅ Linting complete"

      - name: Run tests
        run: |
          echo "🧪 Running tests..."
          
          if [ -d "tests" ]; then
            echo "📁 Found tests directory, running pytest..."
            if command -v pytest >/dev/null 2>&1; then
              pytest tests/ -v --tb=short
            else
              echo "⚠️ pytest not available, running tests with python -m unittest"
              python -m unittest discover tests -v
            fi
          elif [ -f "test.py" ]; then
            echo "📄 Found test.py, running it..."
            python test.py
          elif find . -name "*test*.py" -not -path "./build/*" -not -path "./dist/*" | head -1 | grep -q .; then
            echo "📄 Found test files, running with unittest..."
            python -m unittest discover . -p "*test*.py" -v
          else
            echo "ℹ️ No tests found - this is fine for projects without tests yet"
            echo "✅ Validation passed (no tests to run)"
          fi
          
          echo "✅ Test execution complete"

      - name: Get version
        id: version
        run: |
          if [ -f "server/version.py" ]; then
            VERSION=$(grep -o '__version__ = "[^"]*"' server/version.py | cut -d'"' -f2)
          elif [ -f "pyproject.toml" ]; then
            VERSION=$(grep -o 'version = "[^"]*"' pyproject.toml | cut -d'"' -f2 | head -1)
          else
            VERSION="1.0.0-dev"
          fi
          
          echo "Detected version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Verify project structure
        run: |
          echo "🔍 Verifying project structure..."
          
          # Check for basic project files
          STRUCTURE_OK=true
          
          if [ ! -f "pyproject.toml" ] && [ ! -f "setup.py" ]; then
            echo "⚠️ No pyproject.toml or setup.py found"
            STRUCTURE_OK=false
          fi
          
          if [ ! -d "server" ] && [ ! -d "r2midi_client" ] && [ ! -d "src" ]; then
            echo "⚠️ No main source directories found"
            STRUCTURE_OK=false
          fi
          
          if [ "$STRUCTURE_OK" = "true" ]; then
            echo "✅ Project structure looks good"
          else
            echo "⚠️ Project structure may need attention"
          fi
          
          echo "📁 Project contents:"
          ls -la

      - name: Check if builds should run
        id: check
        run: |
          # Determine if we should run builds
          SHOULD_BUILD="false"
          
          # Always build on workflow_dispatch if requested
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.run-builds }}" = "true" ]; then
            SHOULD_BUILD="true"
            echo "🚀 Builds requested via workflow dispatch"
          # Build on push to non-PR branches (but not PRs)
          elif [ "${{ github.event_name }}" = "push" ]; then
            SHOULD_BUILD="true"
            echo "🚀 Builds triggered by push to ${{ github.ref_name }}"
          # Skip builds on PRs by default to save resources
          else
            echo "⏭️ Skipping builds for PR (tests only)"
          fi
          
          echo "should-build=$SHOULD_BUILD" >> $GITHUB_OUTPUT

  # Development builds (conditional)
  dev-builds:
    name: Dev Build (${{ matrix.platform }})
    needs: validate
    if: needs.validate.outputs.should-build == 'true'
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux
            os: ubuntu-latest
          - platform: windows
            os: windows-latest
          - platform: macOS
            os: macos-13
    
    uses: ./.github/workflows/reusable-build.yml
    with:
      platform: ${{ matrix.platform }}
      os: ${{ matrix.os }}
      build-type: dev
      version-suffix: "-dev.${{ github.run_number }}"
      sign-builds: false

  # Job summary
  summary:
    name: CI Summary
    needs: [validate, dev-builds]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Generate CI summary
        run: |
          echo "# 🚧 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "**Repository:** \`${{ github.repository }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "${{ needs.validate.outputs.version }}" ]; then
            echo "**Version:** ${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Results" >> $GITHUB_STEP_SUMMARY
          
          # Validation results
          if [ "${{ needs.validate.result }}" = "success" ]; then
            echo "✅ **Validation & Tests:** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Validation & Tests:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Build results
          if [ "${{ needs.validate.outputs.should-build }}" = "true" ]; then
            if [ "${{ needs.dev-builds.result }}" = "success" ]; then
              echo "✅ **Development Builds:** Completed" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ needs.dev-builds.result }}" = "failure" ]; then
              echo "❌ **Development Builds:** Failed" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ needs.dev-builds.result }}" = "skipped" ]; then
              echo "⏭️ **Development Builds:** Skipped" >> $GITHUB_STEP_SUMMARY
            else
              echo "⏳ **Development Builds:** In Progress" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⏭️ **Development Builds:** Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add helpful information
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "> **Note:** Development builds are skipped for pull requests by default." >> $GITHUB_STEP_SUMMARY
            echo "> To run builds, use the 'Run workflow' button on the Actions tab." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Set final status
        run: |
          if [ "${{ needs.validate.result }}" != "success" ]; then
            echo "❌ CI validation failed"
            exit 1
          fi
          
          if [ "${{ needs.validate.outputs.should-build }}" = "true" ] && [ "${{ needs.dev-builds.result }}" = "failure" ]; then
            echo "❌ Development builds failed"
            exit 1
          fi
          
          echo "✅ CI pipeline completed successfully"
