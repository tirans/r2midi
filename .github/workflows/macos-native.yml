name: macOS Build (Native Apple Tools)

on:
  push:
    branches: [ master, macos-native ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      version-type:
        description: 'Version increment type'
        required: false
        type: choice
        options:
          - patch
          - minor
          - major
          - none
        default: 'none'

permissions:
  contents: write

jobs:
  # Build macOS applications using native Apple tools
  build-macos:
    name: Build macOS (Native Tools)
    runs-on: macos-14

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fix submodules
        run: |
          echo "🔧 Setting up Git submodules..."

          # Configure Git for safety
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

          # Clean up any problematic submodule state
          echo "🗑️ Removing existing submodule configuration..."
          git submodule deinit -f server/midi-presets || true
          rm -rf .git/modules/server/midi-presets || true
          git rm -rf server/midi-presets || true

          # Add submodule fresh
          echo "➕ Re-adding the submodule..."
          git submodule add -f https://github.com/tirans/midi-presets.git server/midi-presets

          # Initialize submodule
          echo "🔄 Initializing submodule..."
          git submodule init

          # Explicitly checkout main branch of submodule instead of specific commit
          echo "🌿 Checking out main branch of submodule..."
          mkdir -p server/midi-presets
          cd server/midi-presets || { echo "❌ Failed to enter submodule directory"; exit 1; }
          git init

          # Check if remote origin already exists
          if git remote | grep -q "^origin$"; then
            echo "Remote origin already exists, updating URL..."
            git remote set-url origin https://github.com/tirans/midi-presets.git
          else
            echo "Adding remote origin..."
            git remote add origin https://github.com/tirans/midi-presets.git
          fi

          git fetch origin
          if git show-ref --verify --quiet refs/heads/main; then
            git checkout main
          else
            git checkout -b main origin/main
          fi
          cd ../..

          echo "✅ Submodules setup complete"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Get version info
        id: version
        run: |
          VERSION=$(grep -o '__version__ = "[^"]*"' server/version.py | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Install system dependencies
        uses: ./.github/actions/install-system-deps
        with:
          platform: macOS

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pillow
          pip install -r requirements.txt
          if [ -f r2midi_client/requirements.txt ]; then 
            pip install -r r2midi_client/requirements.txt
          fi

      - name: Generate icon files
        run: |
          chmod +x scripts/generate_icons.py
          python scripts/generate_icons.py

      - name: Setup code signing
        uses: ./.github/actions/setup-macos-signing
        with:
          certificate-p12: ${{ secrets.APPLE_CERTIFICATE_P12 }}
          certificate-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          apple-id: ${{ secrets.APPLE_ID }}
          apple-id-password: ${{ secrets.APPLE_ID_PASSWORD }}
          apple-team-id: ${{ secrets.APPLE_TEAM_ID }}
          app-store-connect-api-key: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
          app-store-connect-key-id: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          app-store-connect-issuer-id: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}

      - name: Configure build metadata
        uses: ./.github/actions/configure-build
        with:
          build-type: production
          version: ${{ steps.version.outputs.version }}
          platform: macOS
          bundle-prefix: ${{ secrets.APP_BUNDLE_ID_PREFIX }}
          server-name: ${{ secrets.APP_DISPLAY_NAME_SERVER }}
          client-name: ${{ secrets.APP_DISPLAY_NAME_CLIENT }}
          author-name: ${{ secrets.APP_AUTHOR_NAME }}
          author-email: ${{ secrets.APP_AUTHOR_EMAIL }}

      - name: Build applications (Native)
        id: build-apps
        uses: ./.github/actions/build-apps
        with:
          platform: macOS
          sign: true

      - name: Package applications (Native)
        uses: ./.github/actions/package-apps
        with:
          platform: macOS
          build-type: production
          version: ${{ steps.version.outputs.version }}
          server-app-path: ${{ steps.build-apps.outputs.server-app-path }}
          client-app-path: ${{ steps.build-apps.outputs.client-app-path }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-native-${{ github.run_number }}
          path: artifacts/
          retention-days: 30
          compression-level: 6

      - name: Summary
        run: |
          echo "## 🍎 macOS Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Artifacts Created:" >> $GITHUB_STEP_SUMMARY
          if [ -d "artifacts" ]; then
            echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
            echo "|------|------|" >> $GITHUB_STEP_SUMMARY
            for file in artifacts/*; do
              if [ -f "$file" ]; then
                size=$(ls -lh "$file" | awk '{print $5}')
                name=$(basename "$file")
                echo "| $name | $size |" >> $GITHUB_STEP_SUMMARY
              fi
            done
          else
            echo "No artifacts found" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Build Method:" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Tool**: py2app (native macOS)" >> $GITHUB_STEP_SUMMARY
          echo "- **Signing**: Apple Developer ID" >> $GITHUB_STEP_SUMMARY
          echo "- **Packaging**: DMG + PKG installers" >> $GITHUB_STEP_SUMMARY
          echo "- **Notarization**: xcrun notarytool" >> $GITHUB_STEP_SUMMARY
          echo "- **No Briefcase**: Pure Apple tools only" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup
        if: always()
        uses: ./.github/actions/cleanup-signing
        with:
          platform: macOS
