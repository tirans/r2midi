name: Development Builds
on:
  push:
    branches: [ "develop", "feature/*", "dev/*", "test/*" ]
  pull_request:
    branches: [ "master", "main", "develop" ]
  workflow_dispatch:  # Manual trigger for testing

permissions:
  contents: read

env:
  PYTHON_VERSION: "3.12"

jobs:
  quick-validation:
    name: Quick Validation
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      version: ${{ steps.version.outputs.version }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install test dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y libasound2-dev libjack-dev librtmidi-dev
          python -m pip install --upgrade pip
          pip install pytest flake8 mypy
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f r2midi_client/requirements.txt ]; then pip install -r r2midi_client/requirements.txt; fi
          pip install -e ".[test]"

      - name: Fast syntax check
        run: |
          echo "🔍 Running syntax checks..."
          python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Quick test suite
        run: |
          echo "🧪 Running quick tests..."
          PYTHONPATH=$PWD python -m pytest --tb=short -v

      - name: Get version info
        id: version
        run: |
          VERSION=$(grep -o '__version__ = "[^"]*"' server/version.py | cut -d'"' -f2)
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          BRANCH_NAME=${BRANCH_NAME//\//-}
          COMMIT_SHA=${GITHUB_SHA:0:8}
          
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            DEV_VERSION="${VERSION}-pr${{ github.event.number }}.${COMMIT_SHA}"
          else
            DEV_VERSION="${VERSION}-dev.${BRANCH_NAME}.${COMMIT_SHA}"
          fi
          
          echo "version=$DEV_VERSION" >> $GITHUB_OUTPUT
          echo "Building development version: $DEV_VERSION"

      - name: Check if should build
        id: check
        run: |
          # Only build apps on push or manual trigger (not on PRs unless requested)
          if [ "${{ github.event_name }}" = "push" ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "ℹ️ Skipping app builds for PR (tests only)"
          fi

  dev-applications:
    name: Build Dev Apps
    needs: quick-validation
    if: needs.quick-validation.outputs.should_build == 'true'
    strategy:
      fail-fast: false
      matrix:
        # All platforms including macOS for dev builds with signing
        include:
          - os: ubuntu-latest
            platform: linux
            platform_name: linux
            emoji: 🐧
          - os: windows-latest
            platform: windows  
            platform_name: windows
            emoji: 🪟
          - os: macos-13
            platform: macOS
            platform_name: macos
            emoji: 🍎
    runs-on: ${{ matrix.os }}
    environment: ${{ matrix.platform == 'macOS' && 'development' || '' }}  # Only macOS needs signing environment

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # macOS Code Signing Setup for Development
      - name: Import Code Signing Certificates (macOS)
        if: matrix.platform == 'macOS'
        env:
          APPLE_CERTIFICATE_P12: ${{ secrets.APPLE_CERTIFICATE_P12 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          if [ -z "$APPLE_CERTIFICATE_P12" ]; then
            echo "⚠️ No macOS signing certificates provided for dev build"
            echo "Building unsigned macOS app (will have security warnings)"
            echo "CODE_SIGNING_AVAILABLE=false" >> $GITHUB_ENV
          else
            echo "🔐 Setting up macOS code signing for development build..."
            
            # Mask sensitive values in logs
            echo "::add-mask::$APPLE_CERTIFICATE_PASSWORD"
            
            # Create temporary keychain
            security create-keychain -p temp_password temp_dev.keychain
            security default-keychain -s temp_dev.keychain
            security unlock-keychain -p temp_password temp_dev.keychain
            
            # Import Developer ID certificate (suppress output to prevent password leaks)
            echo "$APPLE_CERTIFICATE_P12" | base64 --decode > dev_cert.p12
            security import dev_cert.p12 -k temp_dev.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign >/dev/null 2>&1
            
            if [ $? -eq 0 ]; then
              echo "✅ Certificate imported successfully"
            else
              echo "❌ Failed to import certificate (check certificate and password)"
              rm -f dev_cert.p12
              exit 1
            fi
            
            rm -f dev_cert.p12
            
            # Allow codesign to access keychain
            security set-key-partition-list -S apple-tool:,apple: -s -k temp_password temp_dev.keychain >/dev/null 2>&1
            
            echo "CODE_SIGNING_AVAILABLE=true" >> $GITHUB_ENV
            echo "✅ Code signing certificates imported for development"
            
            # List available identities (but don't show full details)
            echo "📋 Available signing identities:"
            security find-identity -v -p codesigning temp_dev.keychain | grep -c "valid identities found" | xargs echo "Found certificates:"
          fi

      - name: Install system dependencies (Linux)
        if: matrix.platform == 'linux'
        run: |
          echo "🐧 Installing Linux development dependencies..."
          sudo apt-get update
          sudo apt-get install -y \
            libasound2-dev libegl1 libjack-dev librtmidi-dev \
            libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 \
            libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 \
            libxcb-xinerama0 libxcb-xfixes0 libfontconfig1-dev \
            libfreetype6-dev libx11-dev libx11-xcb-dev libxext-dev \
            libxfixes-dev libxi-dev libxrender-dev libxcb1-dev \
            libxcb-glx0-dev libxcb-keysyms1-dev libxcb-image0-dev \
            libxcb-shm0-dev libxcb-util0-dev libxkbcommon-dev \
            libxkbcommon-x11-dev libxcb-cursor0 libxcb-shape0

      - name: Install system dependencies (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          Write-Host "🪟 Installing Windows development dependencies..."
          # Add any Windows-specific dependencies here

      - name: Install system dependencies (macOS)
        if: matrix.platform == 'macOS'
        run: |
          echo "🍎 Installing macOS development dependencies..."
          # Add any macOS-specific dependencies here

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install briefcase
          pip install -r requirements.txt
          if [ -f r2midi_client/requirements.txt ]; then 
            pip install -r r2midi_client/requirements.txt
          fi
        shell: bash

      - name: Configure development build
        env:
          DEV_VERSION: ${{ needs.quick-validation.outputs.version }}
        run: |
          echo "🔧 Configuring development build for ${{ matrix.platform }}..."
          
          # Development-specific configuration
          echo "APP_VERSION=$DEV_VERSION" >> $GITHUB_ENV
          echo "BUNDLE_PREFIX=dev.r2midi.test" >> $GITHUB_ENV
          echo "SERVER_NAME=R2MIDI Server (DEV)" >> $GITHUB_ENV
          echo "CLIENT_NAME=R2MIDI Client (DEV)" >> $GITHUB_ENV
          echo "AUTHOR_NAME=R2MIDI Dev Team" >> $GITHUB_ENV
          echo "AUTHOR_EMAIL=dev@r2midi.test" >> $GITHUB_ENV
          
          echo "📋 Development build configuration:"
          echo "  Version: $DEV_VERSION"
          echo "  Platform: ${{ matrix.platform }}"
          echo "  Bundle: dev.r2midi.test"
        shell: bash

      - name: Update pyproject.toml for development
        run: |
          echo "📝 Updating pyproject.toml for development build..."
          
          # Update with development metadata  
          sed -i.bak "s|bundle = \"com\.r2midi\"|bundle = \"${BUNDLE_PREFIX}\"|g" pyproject.toml
          sed -i.bak "s|version = \"0\.1\.64\"|version = \"${APP_VERSION}\"|g" pyproject.toml
          sed -i.bak "s|author = \".*\"|author = \"${AUTHOR_NAME}\"|g" pyproject.toml
          sed -i.bak "s|author_email = \".*\"|author_email = \"${AUTHOR_EMAIL}\"|g" pyproject.toml
          sed -i.bak "s|formal_name = \"R2MIDI Server\"|formal_name = \"${SERVER_NAME}\"|g" pyproject.toml
          sed -i.bak "s|formal_name = \"R2MIDI Client\"|formal_name = \"${CLIENT_NAME}\"|g" pyproject.toml
          
          echo "✅ pyproject.toml updated for development"
        shell: bash

      - name: Create development entitlements (macOS)
        if: matrix.platform == 'macOS'
        run: |
          echo "📝 Creating development entitlements..."
          cat > dev_entitlements.plist << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>com.apple.security.app-sandbox</key>
              <false/>
              <key>com.apple.security.network.server</key>
              <true/>
              <key>com.apple.security.network.client</key>
              <true/>
              <key>com.apple.security.device.audio-input</key>
              <true/>
              <key>com.apple.security.files.user-selected.read-write</key>
              <true/>
              <key>com.apple.security.temporary-exception.audio-unit-host</key>
              <true/>
          </dict>
          </plist>
          EOF
          
          # Update pyproject.toml to use development entitlements
          sed -i.bak 's|entitlements.plist|dev_entitlements.plist|g' pyproject.toml

      - name: Create development applications
        run: |
          echo "${{ matrix.emoji }} Creating ${{ matrix.platform }} development applications..."
          
          echo "🔨 Creating R2MIDI Server..."
          briefcase create ${{ matrix.platform }} app -a server -v
          
          echo "🔨 Creating R2MIDI Client..."
          briefcase create ${{ matrix.platform }} app -a r2midi_client -v
        shell: bash

      - name: Build development applications
        run: |
          echo "${{ matrix.emoji }} Building ${{ matrix.platform }} applications..."
          
          echo "⚙️ Building R2MIDI Server..."
          briefcase build ${{ matrix.platform }} app -a server -v
          
          echo "⚙️ Building R2MIDI Client..."
          briefcase build ${{ matrix.platform }} app -a r2midi_client -v
        shell: bash

      - name: Package development applications
        run: |
          echo "${{ matrix.emoji }} Packaging ${{ matrix.platform }} applications..."
          
          if [ "${{ matrix.platform }}" = "macOS" ] && [ "$CODE_SIGNING_AVAILABLE" = "true" ]; then
            echo "📦 Packaging with code signing..."
            briefcase package ${{ matrix.platform }} app -a server -v
            briefcase package ${{ matrix.platform }} app -a r2midi_client -v
          else
            echo "📦 Packaging without signing..."
            briefcase package ${{ matrix.platform }} app -a server --no-sign -v
            briefcase package ${{ matrix.platform }} app -a r2midi_client --no-sign -v
          fi
        shell: bash

      - name: Prepare development artifacts
        env:
          DEV_VERSION: ${{ needs.quick-validation.outputs.version }}
        run: |
          echo "📁 Preparing development artifacts..."
          mkdir -p dev_artifacts
          
          # Create descriptive filenames with dev version
          DEV_SUFFIX=$(echo "$DEV_VERSION" | sed 's/[^a-zA-Z0-9.-]/_/g')
          
          if [ "${{ matrix.platform }}" = "macOS" ]; then
            echo "🍎 Packaging macOS development builds..."
            
            for app in build/*/macos/app/*.app; do
              if [ -d "$app" ]; then
                app_name=$(basename "$app" .app)
                cd "$(dirname "$app")"
                zip -r "$GITHUB_WORKSPACE/dev_artifacts/${app_name}-macos-${DEV_SUFFIX}.zip" "$(basename "$app")"
                cd "$GITHUB_WORKSPACE"
                echo "✅ ${app_name} packaged"
              fi
            done
            
          elif [ "${{ matrix.platform }}" = "windows" ]; then
            echo "🪟 Packaging Windows development builds..."
            
            if [ -d "build/server/windows/app" ]; then
              cd build/server/windows/app
              zip -r "$GITHUB_WORKSPACE/dev_artifacts/R2MIDI-Server-windows-${DEV_SUFFIX}.zip" . -x "*.log"
              cd "$GITHUB_WORKSPACE"
              echo "✅ Server packaged"
            fi
            
            if [ -d "build/r2midi_client/windows/app" ]; then
              cd build/r2midi_client/windows/app  
              zip -r "$GITHUB_WORKSPACE/dev_artifacts/R2MIDI-Client-windows-${DEV_SUFFIX}.zip" . -x "*.log"
              cd "$GITHUB_WORKSPACE"
              echo "✅ Client packaged"
            fi
            
          elif [ "${{ matrix.platform }}" = "linux" ]; then
            echo "🐧 Packaging Linux development builds..."
            
            if [ -d "build/server/linux/app" ]; then
              tar -czf "dev_artifacts/R2MIDI-Server-linux-${DEV_SUFFIX}.tar.gz" \
                  -C build/server/linux/app . --exclude="*.log"
              echo "✅ Server packaged"
            fi
            
            if [ -d "build/r2midi_client/linux/app" ]; then
              tar -czf "dev_artifacts/R2MIDI-Client-linux-${DEV_SUFFIX}.tar.gz" \
                  -C build/r2midi_client/linux/app . --exclude="*.log"
              echo "✅ Client packaged"
            fi
          fi
          
          echo "📦 Development artifacts created:"
          ls -la dev_artifacts/
          
          # Create a build info file
          cat > dev_artifacts/BUILD_INFO.txt << EOF
          R2MIDI Development Build Information
          ===================================
          
          Version: $DEV_VERSION
          Platform: ${{ matrix.platform }}
          Built: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          Commit: ${{ github.sha }}
          Branch: ${{ github.ref_name }}
          Workflow: ${{ github.workflow }}
          Run: ${{ github.run_number }}
          Code Signing: ${{ matrix.platform == 'macOS' && env.CODE_SIGNING_AVAILABLE || 'N/A' }}
          
          Platform Notes:
          ${{ matrix.platform == 'windows' && '- Windows: Unsigned executable, may show security warnings' || '' }}
          ${{ matrix.platform == 'linux' && '- Linux: Ready to use, no signing required' || '' }}
          ${{ matrix.platform == 'macOS' && (env.CODE_SIGNING_AVAILABLE == 'true' && '- macOS: Signed with Developer ID, ready for testing' || '- macOS: Unsigned, will show security warnings') || '' }}
          
          Installation:
          ${{ matrix.platform == 'windows' && '1. Extract ZIP file\n2. Allow through Windows Defender if prompted\n3. Run the .exe files' || '' }}
          ${{ matrix.platform == 'linux' && '1. Extract tar.gz: tar -xzf filename.tar.gz\n2. Make executable: chmod +x r2midi-*\n3. Run: ./r2midi-*' || '' }}
          ${{ matrix.platform == 'macOS' && '1. Extract ZIP file\n2. Move .app to Applications\n3. Right-click and Open on first launch' || '' }}
          
          Support:
          - This is a development build for testing only
          - Report issues on GitHub with build info above
          - For production use, wait for signed releases
          EOF
        shell: bash

      - name: Upload development artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dev-builds-${{ matrix.platform_name }}-${{ github.run_number }}
          path: dev_artifacts/
          retention-days: 14
          compression-level: 6

      # Cleanup keychain (macOS only)
      - name: Cleanup keychain (macOS)
        if: always() && matrix.platform == 'macOS'
        run: |
          security delete-keychain temp_dev.keychain || true

  development-summary:
    name: Development Build Summary
    needs: [quick-validation, dev-applications]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Generate development build summary
        env:
          VALIDATION_RESULT: ${{ needs.quick-validation.result }}
          BUILD_RESULT: ${{ needs.dev-applications.result }}
          DEV_VERSION: ${{ needs.quick-validation.outputs.version }}
          SHOULD_BUILD: ${{ needs.quick-validation.outputs.should_build }}
        run: |
          echo "# 🚧 Development Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`$DEV_VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Validation status
          if [ "$VALIDATION_RESULT" = "success" ]; then
            echo "✅ **Tests & Validation:** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Tests & Validation:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Build status
          if [ "$SHOULD_BUILD" = "true" ]; then
            if [ "$BUILD_RESULT" = "success" ]; then
              echo "✅ **Application Builds:** Completed" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### 📦 Available Development Builds:" >> $GITHUB_STEP_SUMMARY
              echo "- 🐧 **Linux**: Fully functional, ready for testing" >> $GITHUB_STEP_SUMMARY
              echo "- 🪟 **Windows**: Unsigned, for internal testing (security warnings expected)" >> $GITHUB_STEP_SUMMARY
              echo "- 🍎 **macOS**: Signed for development (if certificates configured)" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### 📋 Next Steps:" >> $GITHUB_STEP_SUMMARY
              echo "1. Download artifacts from this workflow run" >> $GITHUB_STEP_SUMMARY
              echo "2. Test applications on target platforms" >> $GITHUB_STEP_SUMMARY
              echo "3. For production releases, merge to master branch" >> $GITHUB_STEP_SUMMARY
            elif [ "$BUILD_RESULT" = "failure" ]; then
              echo "❌ **Application Builds:** Failed" >> $GITHUB_STEP_SUMMARY
            else
              echo "⏸️ **Application Builds:** Skipped or cancelled" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⏭️ **Application Builds:** Skipped (PR test-only mode)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "💡 **Tip:** Use workflow_dispatch to manually trigger builds on PRs" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔒 Code Signing Status:" >> $GITHUB_STEP_SUMMARY
          echo "- **Linux**: No signing required ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **Windows**: Unsigned development builds ⚠️" >> $GITHUB_STEP_SUMMARY
          echo "- **macOS**: Signed if certificates configured 🔐" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 For Production Builds:" >> $GITHUB_STEP_SUMMARY
          echo "Merge to master branch to trigger fully signed production builds"
