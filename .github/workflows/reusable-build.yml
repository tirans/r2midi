name: Reusable Build Workflow

on:
  workflow_call:
    inputs:
      platform:
        required: true
        type: string
        description: 'Target platform (linux, windows, macOS)'
      os:
        required: true
        type: string
        description: 'GitHub runner OS'
      python-version:
        required: false
        type: string
        default: "3.12"
        description: 'Python version to use'
      build-type:
        required: true
        type: string
        description: 'Build type (dev, staging, production)'
      version-suffix:
        required: false
        type: string
        default: ""
        description: 'Version suffix for development builds'
      sign-builds:
        required: false
        type: boolean
        default: false
        description: 'Whether to sign builds (macOS only)'
    secrets:
      APPLE_CERTIFICATE_P12:
        required: false
      APPLE_CERTIFICATE_PASSWORD:
        required: false
      APPLE_ID:
        required: false
      APPLE_ID_PASSWORD:
        required: false
      APPLE_TEAM_ID:
        required: false
    outputs:
      artifact-name:
        description: "Name of the uploaded artifact"
        value: ${{ jobs.build.outputs.artifact-name }}

jobs:
  build:
    runs-on: ${{ inputs.os }}
    timeout-minutes: 60
    outputs:
      artifact-name: ${{ steps.upload.outputs.artifact-name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup Git submodules
        shell: bash
        run: |
          echo "🔧 Setting up Git submodules..."
          
          # Configure Git for safety
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          
          # Handle submodules safely
          if [ -f ".gitmodules" ]; then
            echo "📁 Found .gitmodules, initializing submodules..."
            
            # Clean up any problematic submodule state
            git submodule deinit -f server/midi-presets 2>/dev/null || true
            rm -rf .git/modules/server/midi-presets 2>/dev/null || true
            git rm -rf server/midi-presets 2>/dev/null || true
            
            # Add submodule fresh
            if ! git submodule add https://github.com/tirans/midi-presets.git server/midi-presets 2>/dev/null; then
              echo "ℹ️ Submodule already exists or failed to add"
            fi
            
            # Initialize and update
            git submodule init
            git submodule update --init --recursive --force
            
            echo "✅ Submodules setup complete"
          else
            echo "ℹ️ No .gitmodules found, skipping submodule setup"
          fi

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            r2midi_client/requirements.txt

      - name: Get application version
        id: version
        shell: bash
        run: |
          echo "📋 Determining application version..."
          
          # Extract version from server/version.py
          if [ -f "server/version.py" ]; then
            VERSION=$(grep -o '__version__ = "[^"]*"' server/version.py | cut -d'"' -f2)
          elif [ -f "pyproject.toml" ]; then
            VERSION=$(grep -o 'version = "[^"]*"' pyproject.toml | cut -d'"' -f2)
          else
            echo "⚠️ No version file found, using default"
            VERSION="1.0.0"
          fi
          
          # Add suffix if provided
          if [ -n "${{ inputs.version-suffix }}" ]; then
            FULL_VERSION="${VERSION}${{ inputs.version-suffix }}"
          else
            FULL_VERSION="${VERSION}"
          fi
          
          echo "Version: $FULL_VERSION"
          echo "version=$FULL_VERSION" >> $GITHUB_OUTPUT
          echo "APP_VERSION=$FULL_VERSION" >> $GITHUB_ENV

      - name: Setup build environment
        uses: ./.github/actions/setup-environment
        with:
          platform: ${{ inputs.platform }}
          python-version: ${{ inputs.python-version }}
          build-type: ${{ inputs.build-type }}

      - name: Generate application icons
        shell: bash
        run: |
          echo "🎨 Generating application icons..."
          
          if [ -f "scripts/generate_icons.py" ]; then
            chmod +x scripts/generate_icons.py
            
            # Run with retry mechanism
            for attempt in {1..3}; do
              echo "🔄 Icon generation attempt $attempt/3"
              if python scripts/generate_icons.py; then
                echo "✅ Icons generated successfully"
                break
              else
                if [ $attempt -lt 3 ]; then
                  echo "⏳ Waiting 5s before retry..."
                  sleep 5
                fi
              fi
            done
          else
            echo "⚠️ Icon generation script not found, using default icons"
          fi

      - name: Setup code signing (macOS)
        if: inputs.sign-builds && inputs.platform == 'macOS'
        uses: ./.github/actions/setup-macos-signing
        with:
          certificate-p12: ${{ secrets.APPLE_CERTIFICATE_P12 }}
          certificate-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          apple-id: ${{ secrets.APPLE_ID }}
          apple-id-password: ${{ secrets.APPLE_ID_PASSWORD }}
          apple-team-id: ${{ secrets.APPLE_TEAM_ID }}

      - name: Build applications
        id: build
        uses: ./.github/actions/build-apps
        with:
          platform: ${{ inputs.platform }}
          build-type: ${{ inputs.build-type }}
          version: ${{ steps.version.outputs.version }}
          sign: ${{ inputs.sign-builds }}

      - name: Create installers and packages
        if: inputs.build-type == 'production' || inputs.build-type == 'staging'
        uses: ./.github/actions/package-apps
        with:
          platform: ${{ inputs.platform }}
          build-type: ${{ inputs.build-type }}
          version: ${{ steps.version.outputs.version }}
          server-app-path: ${{ steps.build.outputs.server-app-path }}
          client-app-path: ${{ steps.build.outputs.client-app-path }}

      - name: Prepare artifacts
        shell: bash
        run: |
          echo "📦 Preparing artifacts..."
          
          # Create artifacts directory
          mkdir -p artifacts
          
          # Copy build outputs
          if [ -d "${{ steps.build.outputs.artifacts-path }}" ]; then
            cp -r "${{ steps.build.outputs.artifacts-path }}"/* artifacts/ 2>/dev/null || echo "No artifacts to copy"
          fi
          
          # Copy installers/packages if they exist
          find . -maxdepth 1 -name "*.dmg" -exec cp {} artifacts/ \; 2>/dev/null || true
          find . -maxdepth 1 -name "*.pkg" -exec cp {} artifacts/ \; 2>/dev/null || true
          find . -maxdepth 1 -name "*.msi" -exec cp {} artifacts/ \; 2>/dev/null || true
          find . -maxdepth 1 -name "*.deb" -exec cp {} artifacts/ \; 2>/dev/null || true
          find . -maxdepth 1 -name "*.zip" -exec cp {} artifacts/ \; 2>/dev/null || true
          find . -maxdepth 1 -name "*.tar.gz" -exec cp {} artifacts/ \; 2>/dev/null || true
          
          # Generate comprehensive build info
          cat > artifacts/BUILD_INFO.md << EOF
          # R2MIDI Build Information
          
          ## Build Details
          - **Version**: ${{ steps.version.outputs.version }}
          - **Platform**: ${{ inputs.platform }}
          - **Build Type**: ${{ inputs.build-type }}
          - **Python Version**: ${{ inputs.python-version }}
          - **Built**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - **Runner OS**: ${{ inputs.os }}
          - **Commit**: ${{ github.sha }}
          - **Branch**: ${{ github.ref_name }}
          - **Workflow**: ${{ github.workflow }}
          - **Run Number**: ${{ github.run_number }}
          
          ## Build Method
          EOF
          
          case "${{ inputs.platform }}" in
            macOS)
              echo "- **Method**: Native macOS (py2app)" >> artifacts/BUILD_INFO.md
              echo "- **Code Signing**: ${{ inputs.sign-builds }}" >> artifacts/BUILD_INFO.md
              ;;
            *)
              echo "- **Method**: Cross-platform (Briefcase)" >> artifacts/BUILD_INFO.md
              ;;
          esac
          
          # List all artifacts
          echo "" >> artifacts/BUILD_INFO.md
          echo "## Artifacts" >> artifacts/BUILD_INFO.md
          find artifacts -type f -not -name "BUILD_INFO.md" | sort | while read file; do
            echo "- \`$(basename "$file")\` ($(du -h "$file" | cut -f1))" >> artifacts/BUILD_INFO.md
          done
          
          echo "📋 Artifacts prepared:"
          ls -la artifacts/ || echo "No artifacts found"

      - name: Upload build artifacts
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.build-type }}-${{ inputs.platform }}-${{ github.run_number }}
          path: artifacts/
          retention-days: ${{ inputs.build-type == 'production' && 90 || 30 }}
          compression-level: 6
          if-no-files-found: warn

      - name: Build summary
        shell: bash
        run: |
          echo "## 🎯 Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Platform:** ${{ inputs.platform }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build Type:** ${{ inputs.build-type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Artifacts:** ${{ steps.upload.outputs.artifact-name }}" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "${{ steps.build.outputs.server-app-path }}" ]; then
            echo "**Server App:** \`${{ steps.build.outputs.server-app-path }}\`" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -n "${{ steps.build.outputs.client-app-path }}" ]; then
            echo "**Client App:** \`${{ steps.build.outputs.client-app-path }}\`" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Cleanup on failure
        if: failure()
        shell: bash
        run: |
          echo "🧹 Cleaning up after build failure..."
          
          # Clean up any temporary files
          rm -rf build/temp* 2>/dev/null || true
          rm -rf dist/temp* 2>/dev/null || true
          
          # Log debug information
          echo "📋 Debug information:"
          echo "Working directory: $(pwd)"
          echo "Python version: $(python --version)"
          echo "Pip version: $(pip --version)"
          
          if [ "${{ inputs.platform }}" = "macOS" ]; then
            echo "Xcode version: $(xcode-select --print-path 2>/dev/null || echo 'Not available')"
          fi
          
          echo "Environment variables:"
          env | grep -E "(APP_|BUILD_|PLATFORM)" | sort
