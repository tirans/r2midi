name: Python package
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  id-token: write
  contents: write

jobs:
  increment-version:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    outputs:
      version: ${{ steps.increment_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git user
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Increment version and commit changes
        id: increment_version
        run: |
          # Ensure we're up to date before making changes
          git fetch origin master
          git rebase origin/master

          CURRENT_VERSION=$(grep -o '__version__ = "[^"]*"' version.py | cut -d'"' -f2)
          echo "Current version: $CURRENT_VERSION"

          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "New version: $NEW_VERSION"

          sed -i "s/__version__ = \"$CURRENT_VERSION\"/__version__ = \"$NEW_VERSION\"/" version.py
          sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml

          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

          git add version.py pyproject.toml
          git commit -m "Bump version from $CURRENT_VERSION to $NEW_VERSION [skip ci]"

          # More robust push with retry mechanism
          MAX_RETRIES=3
          RETRY_COUNT=0

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            # Check if there are any changes to stash
            if git diff --quiet; then
              echo "No local changes to save"
            else
              # Stash any local changes
              git stash save "Temporary stash before pull"
              echo "Local changes stashed"
            fi

            # Pull latest changes with rebase
            git pull --rebase origin master
            PULL_STATUS=$?

            # Apply stashed changes if they exist
            if git stash list | grep -q "Temporary stash before pull"; then
              git stash pop
              STASH_STATUS=$?
              if [ $STASH_STATUS -ne 0 ]; then
                echo "Warning: Stash pop had conflicts, resolving..."
                git add .
                git rebase --continue
              fi
            fi

            # Try to push with force-with-lease to handle concurrent updates safely
            git push --force-with-lease origin master
            PUSH_STATUS=$?

            if [ $PUSH_STATUS -eq 0 ]; then
              echo "Successfully pushed version bump"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "Push failed, retrying ($RETRY_COUNT/$MAX_RETRIES)..."
                # Fetch the latest changes before retrying to update our reference
                git fetch origin master
                sleep 2  # Add a small delay before retrying
              else
                echo "Failed to push after $MAX_RETRIES attempts"
                exit 1
              fi
            fi
          done

  build:
    needs: [increment-version]
    if: always() && (needs.increment-version.result == 'success' || needs.increment-version.result == 'skipped' || github.event_name == 'pull_request')
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.9", "3.10", "3.11", "3.12" ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'push' && 'master' || github.ref }}  # Use master for push events, otherwise use the current ref

      # Setup Python environment and install dependencies in separate steps for clarity
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system and project dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev libegl1 

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 pytest build twine
          if [ -f requirements.txt ]; then 
            pip install -r requirements.txt; 
          fi
          if [ -f midi_patch_client/requirements.txt ]; then 
            pip install -r midi_patch_client/requirements.txt; 
          fi
          # Install the package in development mode with test dependencies
          pip install -e ".[test]"

      # Organize testing and building into clear steps
      - name: Lint with flake8
        run: |
          # pytest --flake8 .

      - name: Test with pytest
        run: |
          PYTHONPATH=$PWD pytest

      - name: Build package
        run: |
          git submodule sync
          python -m build

      - name: Debug dist directory
        run: ls -al dist/
      - name: Store build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.python-version }}
          path: dist/
          retention-days: 1
  release:
    needs: [build, increment-version]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master' && needs.increment-version.result == 'success'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning
          ref: master  # Ensure we're using the latest commit with the version bump

      - name: Get version
        id: get_version
        run: |
          VERSION=$(grep -o '__version__ = "[^"]*"' version.py | cut -d'"' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION (from increment-version job: ${{ needs.increment-version.outputs.version }})"

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare distributions for PyPI
        run: |
          mkdir -p combined_dist
          find artifacts -type f -exec cp {} combined_dist/ \;

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: combined_dist/
          # OpenID Connect (OIDC) is used automatically, no credentials needed

  build-executables:
    needs: [release, increment-version]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master' && needs.increment-version.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest
            platform: macos
          - os: windows-latest
            platform: windows
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          ref: master  # Ensure we're using the latest commit with the version bump

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies (Linux/macOS)
        if: matrix.platform == 'linux' || matrix.platform == 'macos'
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt
          if [ -f midi_patch_client/requirements.txt ]; then 
            pip install -r midi_patch_client/requirements.txt
          fi

      - name: Install dependencies (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt
          if (Test-Path "midi_patch_client\requirements.txt") {
            pip install -r midi_patch_client\requirements.txt
          }

      - name: Install platform-specific dependencies (Linux)
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev

      - name: Create themes directory and placeholder icons (Linux/macOS)
        if: matrix.platform == 'linux' || matrix.platform == 'macos'
        run: |
          # Create themes directory if it doesn't exist
          mkdir -p midi_patch_client/themes

          # Create placeholder icon files if they don't exist
          if [ "${{ matrix.platform }}" = "macos" ] && [ ! -f "midi_patch_client/themes/icon.icns" ]; then
            echo "Creating placeholder icon.icns file"
            # Use a simple command to create a minimal .icns file
            python -c "with open('midi_patch_client/themes/icon.icns', 'wb') as f: f.write(b'icns\x00\x00\x00\x10')"
          fi

          if [ ! -f "midi_patch_client/themes/icon.ico" ]; then
            echo "Creating placeholder icon.ico file"
            # Use a simple command to create a minimal .ico file
            python -c "with open('midi_patch_client/themes/icon.ico', 'wb') as f: f.write(b'\x00\x00\x01\x00\x01\x00\x10\x10\x00\x00\x01\x00\x04\x00\x28\x01\x00\x00\x16\x00\x00\x00\x28\x00\x00\x00\x10\x00\x00\x00\x20\x00\x00\x00\x01\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')"
          fi

      - name: Ensure spec file is in the correct location (Linux/macOS)
        if: matrix.platform == 'linux' || matrix.platform == 'macos'
        run: |
          # Check if spec file exists in the root directory
          if [ ! -f "r2midi.spec" ]; then
            echo "r2midi.spec not found in root directory, checking in workflows folder"
            # Check if spec file exists in the workflows folder
            if [ -f ".github/workflows/r2midi.spec" ]; then
              echo "Copying r2midi.spec from workflows folder to root directory"
              cp .github/workflows/r2midi.spec r2midi.spec
            else
              echo "r2midi.spec not found in workflows folder either, build will likely fail"
            fi
          else
            echo "r2midi.spec found in root directory"
          fi

      - name: Create themes directory and placeholder icons (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          # Create themes directory if it doesn't exist
          New-Item -ItemType Directory -Force -Path midi_patch_client\themes

          # Create placeholder icon.ico file if it doesn't exist
          if (-not (Test-Path "midi_patch_client\themes\icon.ico")) {
            Write-Host "Creating placeholder icon.ico file"
            # Use Python to create a minimal .ico file
            python -c "with open('midi_patch_client/themes/icon.ico', 'wb') as f: f.write(b'\x00\x00\x01\x00\x01\x00\x10\x10\x00\x00\x01\x00\x04\x00\x28\x01\x00\x00\x16\x00\x00\x00\x28\x00\x00\x00\x10\x00\x00\x00\x20\x00\x00\x00\x01\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')"
          }

      - name: Ensure spec file is in the correct location (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          # Check if spec file exists in the root directory
          if (-not (Test-Path "r2midi.spec")) {
            Write-Host "r2midi.spec not found in root directory, checking in workflows folder"
            # Check if spec file exists in the workflows folder
            if (Test-Path ".github\workflows\r2midi.spec") {
              Write-Host "Copying r2midi.spec from workflows folder to root directory"
              Copy-Item ".github\workflows\r2midi.spec" -Destination "r2midi.spec"
            } else {
              Write-Host "r2midi.spec not found in workflows folder either, build will likely fail"
            }
          } else {
            Write-Host "r2midi.spec found in root directory"
          }

      - name: Build executable (Linux/macOS)
        if: matrix.platform == 'linux' || matrix.platform == 'macos'
        run: |
          # Print current directory and list files to help diagnose issues
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la
          echo "Checking if r2midi.spec exists:"
          if [ -f "r2midi.spec" ]; then
            echo "r2midi.spec exists in current directory"
            # Create a backup of the spec file
            cp r2midi.spec r2midi.spec.bak
          else
            echo "r2midi.spec does not exist in current directory"
          fi

          # Create a new spec file directly in the workflow
          echo "Creating a new spec file directly in the workflow"
          python -c "
with open('r2midi.spec', 'w') as f:
    f.write('''# -*- mode: python ; coding: utf-8 -*-
import os

block_cipher = None

a = Analysis(
    ['main.py'],
    pathex=[],
    binaries=[],
    datas=[
        # Include any necessary resources
        ('midi_patch_client/themes', 'midi_patch_client/themes'),
        ('midi_patch_client/ui', 'midi_patch_client/ui'),
    ],
    hiddenimports=[
        'PyQt6.QtCore',
        'PyQt6.QtWidgets',
        'PyQt6.QtGui',
        'asyncio',
        'httpx',
        'logging',
        'json',
        'git',
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(
    a.pure, 
    a.zipped_data,
    cipher=block_cipher
)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name=\"r2midi\",
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,
    disable_windowed_traceback=False,
    argv_emulation=True,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon=\"midi_patch_client/themes/icon.ico\" if os.path.exists(\"midi_patch_client/themes/icon.ico\") else None,
)

# For macOS, create a .app bundle
app = BUNDLE(
    exe,
    name=\"r2midi.app\",
    icon=\"midi_patch_client/themes/icon.icns\" if os.path.exists(\"midi_patch_client/themes/icon.icns\") else None,
    bundle_identifier=\"com.r2midi.app\",
    info_plist={
        \"CFBundleShortVersionString\": \"1.0.0\",
        \"CFBundleVersion\": \"1.0.0\",
        \"NSHighResolutionCapable\": \"True\",
        \"NSRequiresAquaSystemAppearance\": \"False\",  # Allow dark mode
        \"CFBundleName\": \"r2midi\",
        \"CFBundleDisplayName\": \"r2midi\",
        \"CFBundleExecutable\": \"r2midi\",
    },
)
''')"

          # Verify the spec file was created
          echo "Verifying the spec file was created:"
          ls -la r2midi.spec
          echo "Content of the first few lines of the spec file:"
          head -n 10 r2midi.spec

          # Run PyInstaller with the spec file
          echo "Running PyInstaller with the spec file"
          pyinstaller r2midi.spec

      - name: Build executable (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          # Print current directory and list files to help diagnose issues
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "Files in current directory:"
          Get-ChildItem -Force
          Write-Host "Checking if r2midi.spec exists:"
          if (Test-Path "r2midi.spec") {
            Write-Host "r2midi.spec exists in current directory"
            # Create a backup of the spec file
            Copy-Item r2midi.spec r2midi.spec.bak
          } else {
            Write-Host "r2midi.spec does not exist in current directory"
          }

          # Create a new spec file directly in the workflow
          Write-Host "Creating a new spec file directly in the workflow"
          python -c "
with open('r2midi.spec', 'w') as f:
    f.write('''# -*- mode: python ; coding: utf-8 -*-
import os

block_cipher = None

a = Analysis(
    ['main.py'],
    pathex=[],
    binaries=[],
    datas=[
        # Include any necessary resources
        ('midi_patch_client/themes', 'midi_patch_client/themes'),
        ('midi_patch_client/ui', 'midi_patch_client/ui'),
    ],
    hiddenimports=[
        'PyQt6.QtCore',
        'PyQt6.QtWidgets',
        'PyQt6.QtGui',
        'asyncio',
        'httpx',
        'logging',
        'json',
        'git',
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(
    a.pure, 
    a.zipped_data,
    cipher=block_cipher
)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name=\"r2midi\",
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,
    disable_windowed_traceback=False,
    argv_emulation=True,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon=\"midi_patch_client/themes/icon.ico\" if os.path.exists(\"midi_patch_client/themes/icon.ico\") else None,
)

# For macOS, create a .app bundle
app = BUNDLE(
    exe,
    name=\"r2midi.app\",
    icon=\"midi_patch_client/themes/icon.icns\" if os.path.exists(\"midi_patch_client/themes/icon.icns\") else None,
    bundle_identifier=\"com.r2midi.app\",
    info_plist={
        \"CFBundleShortVersionString\": \"1.0.0\",
        \"CFBundleVersion\": \"1.0.0\",
        \"NSHighResolutionCapable\": \"True\",
        \"NSRequiresAquaSystemAppearance\": \"False\",  # Allow dark mode
        \"CFBundleName\": \"r2midi\",
        \"CFBundleDisplayName\": \"r2midi\",
        \"CFBundleExecutable\": \"r2midi\",
    },
)
''')"

          # Verify the spec file was created
          Write-Host "Verifying the spec file was created:"
          Get-Item r2midi.spec
          Write-Host "Content of the first few lines of the spec file:"
          Get-Content r2midi.spec -Head 10

          # Run PyInstaller with the spec file
          Write-Host "Running PyInstaller with the spec file"
          pyinstaller r2midi.spec

      - name: Upload executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: r2midi-${{ matrix.platform }}
          path: |
            dist/r2midi*
          retention-days: 7

      - name: Get version
        id: get_version
        run: |
          VERSION=$(grep -o '__version__ = "[^"]*"' version.py | cut -d'"' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION (from increment-version job: ${{ needs.increment-version.outputs.version }})"
        shell: bash

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          files: dist/r2midi*
          token: ${{ secrets.GITHUB_TOKEN }}
