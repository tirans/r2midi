name: Python package

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

# Permission needed for OIDC token authentication with PyPI
permissions:
  id-token: write
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"] #3.13 fails

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper versioning

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    # Install system dependencies
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev

    - name: Install dependencies
      run: |
         python -m pip install --upgrade pip
         python -m pip install flake8 pytest build twine
         if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
         # stop the build if there are Python syntax errors or undefined names
         #flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
         # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
         # flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
         pytest

    - name: Build package
      run: |
         python -m build

    - name: Debug dist directory
      run: ls -al dist/

    - name: Store build artifacts
      uses: actions/upload-artifact@v4
      with:
         name: dist-${{ matrix.python-version }}
         path: dist/
         retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper versioning
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Git user
      run: |
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"

    - name: Increment version
      id: increment_version
      run: |
        # Get the current version from version.py
        CURRENT_VERSION=$(grep -o '__version__ = "[^"]*"' version.py | cut -d'"' -f2)
        echo "Current version: $CURRENT_VERSION"

        # Split the version into major, minor, and patch components
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

        # Increment the patch version
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
        echo "New version: $NEW_VERSION"

        # Update the version in version.py
        sed -i "s/__version__ = \"$CURRENT_VERSION\"/__version__ = \"$NEW_VERSION\"/" version.py

        # Update the version in pyproject.toml
        sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml

        # Set the new version as output
        echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

        # Commit the changes
        git add version.py pyproject.toml
        git commit -m "Bump version from $CURRENT_VERSION to $NEW_VERSION [skip ci]"
        git push

    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare distributions for PyPI
      run: |
        mkdir -p combined_dist
        find artifacts -type f -exec cp {} combined_dist/ \;

    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        name: Release v${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: combined_dist/
        # OpenID Connect (OIDC) is used automatically, no credentials needed
