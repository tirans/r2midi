name: Python package
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  id-token: write
  contents: write

jobs:
  increment-version:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    outputs:
      version: ${{ steps.increment_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git user
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Increment version and commit changes
        id: increment_version
        run: |
          # Ensure we're up to date before making changes
          git fetch origin master
          git rebase origin/master

          CURRENT_VERSION=$(grep -o '__version__ = "[^"]*"' version.py | cut -d'"' -f2)
          echo "Current version: $CURRENT_VERSION"

          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "New version: $NEW_VERSION"

          sed -i "s/__version__ = \"$CURRENT_VERSION\"/__version__ = \"$NEW_VERSION\"/" version.py
          sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml

          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

          git add version.py pyproject.toml
          git commit -m "Bump version from $CURRENT_VERSION to $NEW_VERSION [skip ci]"

          # More robust push with retry mechanism
          MAX_RETRIES=3
          RETRY_COUNT=0

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            # Check if there are any changes to stash
            if git diff --quiet; then
              echo "No local changes to save"
            else
              # Stash any local changes
              git stash save "Temporary stash before pull"
              echo "Local changes stashed"
            fi

            # Pull latest changes with rebase
            git pull --rebase origin master
            PULL_STATUS=$?

            # Apply stashed changes if they exist
            if git stash list | grep -q "Temporary stash before pull"; then
              git stash pop
              STASH_STATUS=$?
              if [ $STASH_STATUS -ne 0 ]; then
                echo "Warning: Stash pop had conflicts, resolving..."
                git add .
                git rebase --continue
              fi
            fi

            # Try to push with force-with-lease to handle concurrent updates safely
            git push --force-with-lease origin master
            PUSH_STATUS=$?

            if [ $PUSH_STATUS -eq 0 ]; then
              echo "Successfully pushed version bump"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "Push failed, retrying ($RETRY_COUNT/$MAX_RETRIES)..."
                # Fetch the latest changes before retrying to update our reference
                git fetch origin master
                sleep 2  # Add a small delay before retrying
              else
                echo "Failed to push after $MAX_RETRIES attempts"
                exit 1
              fi
            fi
          done

  build:
    needs: [increment-version]
    if: always() && (needs.increment-version.result == 'success' || needs.increment-version.result == 'skipped' || github.event_name == 'pull_request')
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.9", "3.10", "3.11", "3.12" ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'push' && 'master' || github.ref }}  # Use master for push events, otherwise use the current ref

      # Setup Python environment and install dependencies in separate steps for clarity
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system and project dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev libegl1 libjack-dev librtmidi-dev
      - name: Check ALSA header
        run: ls /usr/include/alsa/asoundlib.h || { echo "ALSA header missing"; exit 1; }
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 pytest build twine
          if [ -f requirements.txt ]; then 
            pip install -r requirements.txt; 
          fi
          if [ -f midi_preset_client/requirements.txt ]; then 
            pip install -r midi_preset_client/requirements.txt; 
          fi
          # Install the package in development mode with test dependencies
          pip install -e ".[test]"

      # Organize testing and building into clear steps
      - name: Lint with flake8
        run: |
          # pytest --flake8 .

      - name: Test with pytest
        run: |
          PYTHONPATH=$PWD pytest

      - name: Build package
        run: |
          git submodule sync
          python -m build

      - name: Debug dist directory
        run: ls -al dist/
      - name: Store build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.python-version }}
          path: dist/
          retention-days: 1
  release:
    needs: [build, increment-version]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master' && needs.increment-version.result == 'success'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning
          ref: master  # Ensure we're using the latest commit with the version bump

      - name: Get version
        id: get_version
        run: |
          VERSION=$(grep -o '__version__ = "[^"]*"' version.py | cut -d'"' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION (from increment-version job: ${{ needs.increment-version.outputs.version }})"

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare distributions for PyPI
        run: |
          mkdir -p combined_dist
          find artifacts -type f -exec cp {} combined_dist/ \;

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: combined_dist/
          # OpenID Connect (OIDC) is used automatically, no credentials needed

  build-executables:
    needs: [release, increment-version]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master' && needs.increment-version.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
        include:
          - os: macos-latest
            platform: macos
          - os: windows-latest
            platform: windows
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          ref: master  # Ensure we're using the latest commit with the version bump

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies (macOS)
        if: matrix.platform == 'macos'
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller

          pip install -r requirements.txt
          if [ -f midi_preset_client/requirements.txt ]; then 
            pip install -r midi_preset_client/requirements.txt
          fi

      - name: Install dependencies (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt
          if (Test-Path "midi_preset_client\requirements.txt") {
            pip install -r midi_preset_client\requirements.txt
          }


      - name: Create themes directory and placeholder icons (macOS)
        if: matrix.platform == 'macos'
        run: |
          # Create themes directory if it doesn't exist
          mkdir -p midi_preset_client/themes

          # Create placeholder icon files if they don't exist
          if [ ! -f "midi_preset_client/themes/icon.icns" ]; then
            echo "Creating placeholder icon.icns file"
            # Use a simple command to create a minimal .icns file
            python -c "with open('midi_preset_client/themes/icon.icns', 'wb') as f: f.write(b'icns\x00\x00\x00\x10')"
          fi

          if [ ! -f "midi_preset_client/themes/icon.ico" ]; then
            echo "Creating placeholder icon.ico file"
            # Use a simple command to create a minimal .ico file
            python -c "with open('midi_preset_client/themes/icon.ico', 'wb') as f: f.write(b'\x00\x00\x01\x00\x01\x00\x10\x10\x00\x00\x01\x00\x04\x00\x28\x01\x00\x00\x16\x00\x00\x00\x28\x00\x00\x00\x10\x00\x00\x00\x20\x00\x00\x00\x01\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')"
          fi


      - name: Create themes directory and placeholder icons (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          # Create themes directory if it doesn't exist
          New-Item -ItemType Directory -Force -Path midi_preset_client\themes

          # Create placeholder icon.ico file if it doesn't exist
          if (-not (Test-Path "midi_preset_client\themes\icon.ico")) {
            Write-Host "Creating placeholder icon.ico file"
            # Use Python to create a minimal .ico file
            python -c "with open('midi_preset_client/themes/icon.ico', 'wb') as f: f.write(b'\x00\x00\x01\x00\x01\x00\x10\x10\x00\x00\x01\x00\x04\x00\x28\x01\x00\x00\x16\x00\x00\x00\x28\x00\x00\x00\x10\x00\x00\x00\x20\x00\x00\x00\x01\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')"
          }


      - name: Build executable (macOS)
        if: matrix.platform == 'macos'
        run: |
          # Print current directory and list files to help diagnose issues
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la

          # Run PyInstaller directly with command line options
          echo "Running PyInstaller with command line options"
          # For macOS, create a .app bundle
          pyinstaller --name=r2midi \
            --windowed \
            --noconfirm \
            --clean \
            --add-data="midi_preset_client/themes:midi_preset_client/themes" \
            --add-data="midi_preset_client/ui:midi_preset_client/ui" \
            --hidden-import=PyQt6.QtCore \
            --hidden-import=PyQt6.QtWidgets \
            --hidden-import=PyQt6.QtGui \
            --hidden-import=asyncio \
            --hidden-import=httpx \
            --hidden-import=logging \
            --hidden-import=json \
            --hidden-import=git \
            --icon="midi_preset_client/themes/icon.icns" \
            --osx-bundle-identifier="com.r2midi.app" \
            main.py

      - name: Build executable (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          # Print current directory and list files to help diagnose issues
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "Files in current directory:"
          Get-ChildItem -Force

          # Check if PyInstaller is installed
          Write-Host "PyInstaller version:"
          python -m PyInstaller --version

          # Check if main.py exists
          if (Test-Path "main.py") {
            Write-Host "main.py exists"
          } else {
            Write-Host "main.py does not exist"
            Get-ChildItem -Path . -Filter *.py -Recurse | Select-Object FullName
          }

          # Check if theme directories exist
          if (Test-Path "midi_preset_client\themes") {
            Write-Host "midi_preset_client\themes exists"
            Get-ChildItem -Path "midi_preset_client\themes" -Force
          } else {
            Write-Host "midi_preset_client\themes does not exist"
          }

          if (Test-Path "midi_preset_client\ui") {
            Write-Host "midi_preset_client\ui exists"
            Get-ChildItem -Path "midi_preset_client\ui" -Force
          } else {
            Write-Host "midi_preset_client\ui does not exist"
          }

          # Run PyInstaller directly with command line options
          Write-Host "Running PyInstaller with command line options"

          # Create a spec file first
          Write-Host "Creating spec file"
          python -m PyInstaller --name=r2midi --windowed --noconfirm --clean main.py

          # Check if spec file was created
          if (Test-Path "r2midi.spec") {
            Write-Host "r2midi.spec created successfully"
            Get-Content "r2midi.spec"
          } else {
            Write-Host "r2midi.spec was not created"
          }

          # Run PyInstaller with the spec file
          Write-Host "Running PyInstaller with spec file"
          python -m PyInstaller r2midi.spec

          # If that doesn't work, try the direct command line approach
          if (-not (Test-Path "dist\r2midi.exe")) {
            Write-Host "Spec file approach failed, trying direct command line"
            python -m PyInstaller --name=r2midi `
              --windowed `
              --noconfirm `
              --clean `
              --add-data="midi_preset_client\themes;midi_preset_client\themes" `
              --add-data="midi_preset_client\ui;midi_preset_client\ui" `
              --hidden-import=PyQt6.QtCore `
              --hidden-import=PyQt6.QtWidgets `
              --hidden-import=PyQt6.QtGui `
              --hidden-import=asyncio `
              --hidden-import=httpx `
              --hidden-import=logging `
              --hidden-import=json `
              --hidden-import=git `
              --icon="midi_preset_client\themes\icon.ico" `
              main.py
          }

      - name: Upload executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: r2midi-${{ matrix.platform }}
          path: |
            dist/r2midi*
          retention-days: 7

      - name: Get version
        id: get_version
        run: |
          VERSION=$(grep -o '__version__ = "[^"]*"' version.py | cut -d'"' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION (from increment-version job: ${{ needs.increment-version.outputs.version }})"
        shell: bash

      - name: List files in dist directory (macOS)
        if: matrix.platform == 'macos'
        run: |
          echo "Files in dist directory:"
          ls -la dist/
        shell: bash

      - name: List files in dist directory (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          Write-Host "Files in dist directory:"
          if (Test-Path "dist") {
            Get-ChildItem -Path "dist" -Force -Recurse

            # Check if r2midi.exe exists
            if (Test-Path "dist\r2midi.exe") {
              Write-Host "r2midi.exe exists"
              $fileInfo = Get-Item "dist\r2midi.exe"
              Write-Host "r2midi.exe size: $($fileInfo.Length) bytes"
            } else {
              Write-Host "r2midi.exe does not exist"
            }

            # Check if _internal directory exists
            if (Test-Path "dist\_internal") {
              Write-Host "_internal directory exists"
              Get-ChildItem -Path "dist\_internal" -Force | Measure-Object | Select-Object -ExpandProperty Count
            } else {
              Write-Host "_internal directory does not exist"
            }
          } else {
            Write-Host "dist directory does not exist"
          }

      - name: Prepare release files (macOS)
        if: matrix.platform == 'macos'
        run: |
          # Create a directory for release files
          mkdir -p release_files

          # For macOS, zip the .app bundle
          if [ -d "dist/r2midi.app" ]; then
            echo "Zipping macOS .app bundle"
            cd dist
            zip -r ../release_files/r2midi-macos.zip r2midi.app
            cd ..
          fi

          # List files in release_files directory
          echo "Files prepared for release:"
          ls -la release_files/
        shell: bash

      - name: Prepare release files (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          # Create a directory for release files
          New-Item -ItemType Directory -Force -Path release_files

          # Check what's in the dist directory
          Write-Host "Contents of dist directory before zipping:"
          Get-ChildItem -Path "dist" -Force -Recurse

          # For Windows, zip the .exe file and all necessary files
          # Check both possible locations for the executable
          if ((Test-Path "dist\r2midi.exe") -or (Test-Path "dist\r2midi\r2midi.exe")) {
            Write-Host "Zipping Windows executable and dependencies"

            # Zip the entire dist directory regardless of the structure
            Compress-Archive -Path "dist\*" -DestinationPath "release_files\r2midi-windows.zip" -Force

            # Verify the zip file was created and has content
            if (Test-Path "release_files\r2midi-windows.zip") {
              $zipInfo = Get-Item "release_files\r2midi-windows.zip"
              Write-Host "Created zip file: $($zipInfo.FullName), Size: $($zipInfo.Length) bytes"
            } else {
              Write-Host "Failed to create zip file"
            }
          } else {
            # If neither location has the executable, try to find it anywhere in the dist directory
            $exeFiles = Get-ChildItem -Path "dist" -Filter "*.exe" -Recurse
            if ($exeFiles.Count -gt 0) {
              Write-Host "Found executable files in different location:"
              $exeFiles | ForEach-Object { Write-Host $_.FullName }

              # Zip the entire dist directory
              Compress-Archive -Path "dist\*" -DestinationPath "release_files\r2midi-windows.zip" -Force

              # Verify the zip file was created and has content
              if (Test-Path "release_files\r2midi-windows.zip") {
                $zipInfo = Get-Item "release_files\r2midi-windows.zip"
                Write-Host "Created zip file: $($zipInfo.FullName), Size: $($zipInfo.Length) bytes"
              } else {
                Write-Host "Failed to create zip file"
              }
            } else {
              Write-Host "ERROR: No executable files found in dist directory. Cannot create release package."
              exit 1
            }
          }

          # List files in release_files directory
          Write-Host "Files prepared for release:"
          Get-ChildItem -Path release_files -Force

      - name: Debug release files
        run: |
          echo "Contents of release_files directory:"
          ls -la release_files/ || dir release_files
        shell: bash

      - name: Upload release files as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-files-${{ matrix.platform }}
          path: release_files/*
          retention-days: 7

  publish-release:
    needs: [build-executables, increment-version]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master' && needs.increment-version.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: master

      - name: Get version
        id: get_version
        run: |
          VERSION=$(grep -o '__version__ = "[^"]*"' version.py | cut -d'"' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      - name: Download all release artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: release-files-*
          path: combined_release_files
          merge-multiple: true

      - name: Debug combined release files
        run: |
          echo "Contents of combined_release_files directory:"
          ls -la combined_release_files/

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          files: combined_release_files/*
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
