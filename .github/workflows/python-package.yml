name: Python package
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  id-token: write
  contents: write

jobs:
  increment-version:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    outputs:
      version: ${{ steps.increment_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git user
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Increment version and commit changes
        id: increment_version
        run: |
          # Ensure we're up to date before making changes
          git fetch origin master
          git rebase origin/master

          CURRENT_VERSION=$(grep -o '__version__ = "[^"]*"' server/version.py | cut -d'"' -f2)
          echo "Current version: $CURRENT_VERSION"

          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "New version: $NEW_VERSION"

          sed -i "s/__version__ = \"$CURRENT_VERSION\"/__version__ = \"$NEW_VERSION\"/" server/version.py
          sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml
          # Also update the Briefcase version
          sed -i "/\[tool.briefcase\]/,/version = / s/version = \"[^\"]*\"/version = \"$NEW_VERSION\"/" pyproject.toml

          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

          git add server/version.py pyproject.toml
          git commit -m "Bump version from $CURRENT_VERSION to $NEW_VERSION [skip ci]"

          # More robust push with retry mechanism
          MAX_RETRIES=3
          RETRY_COUNT=0

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            # Check if there are any changes to stash
            if git diff --quiet; then
              echo "No local changes to save"
            else
              # Stash any local changes
              git stash save "Temporary stash before pull"
              echo "Local changes stashed"
            fi

            # Pull latest changes with rebase
            git pull --rebase origin master
            PULL_STATUS=$?

            # Apply stashed changes if they exist
            if git stash list | grep -q "Temporary stash before pull"; then
              git stash pop
              STASH_STATUS=$?
              if [ $STASH_STATUS -ne 0 ]; then
                echo "Warning: Stash pop had conflicts, resolving..."
                git add .
                git rebase --continue
              fi
            fi

            # Try to push with force-with-lease to handle concurrent updates safely
            git push --force-with-lease origin master
            PUSH_STATUS=$?

            if [ $PUSH_STATUS -eq 0 ]; then
              echo "Successfully pushed version bump"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "Push failed, retrying ($RETRY_COUNT/$MAX_RETRIES)..."
                # Fetch the latest changes before retrying to update our reference
                git fetch origin master
                sleep 2  # Add a small delay before retrying
              else
                echo "Failed to push after $MAX_RETRIES attempts"
                exit 1
              fi
            fi
          done

  build:
    needs: [increment-version]
    if: always() && (needs.increment-version.result == 'success' || needs.increment-version.result == 'skipped' || github.event_name == 'pull_request')
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.12" ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          ref: ${{ github.event_name == 'push' && 'master' || github.ref }}  # Use master for push events, otherwise use the current ref

      # Setup Python environment and install dependencies in separate steps for clarity
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system and project dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev libegl1 libjack-dev librtmidi-dev

      - name: Check ALSA header
        run: ls /usr/include/alsa/asoundlib.h || { echo "ALSA header missing"; exit 1; }

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 pytest build twine
          if [ -f requirements.txt ]; then 
            pip install -r requirements.txt; 
          fi
          if [ -f r2midi_client/requirements.txt ]; then 
            pip install -r r2midi_client/requirements.txt; 
          fi
          # Install the package in development mode with test dependencies
          pip install -e ".[test]"

      # Organize testing and building into clear steps
      - name: Lint with flake8
        run: |
          # pytest --flake8 .

      - name: Test with pytest
        run: |
          PYTHONPATH=$PWD pytest

      - name: Build package
        run: |
          git submodule sync
          python -m build

      - name: Debug dist directory
        run: ls -al dist/

      - name: Store build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.python-version }}
          path: dist/
          retention-days: 1

  release:
    needs: [build, increment-version]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master' && needs.increment-version.result == 'success'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning
          submodules: recursive
          ref: master  # Ensure we're using the latest commit with the version bump

      - name: Get version
        id: get_version
        run: |
          VERSION=$(grep -o '__version__ = "[^"]*"' server/version.py | cut -d'"' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION (from increment-version job: ${{ needs.increment-version.outputs.version }})"

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare distributions for PyPI
        run: |
          mkdir -p combined_dist
          find artifacts -type f -exec cp {} combined_dist/ \;

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: combined_dist/
          # OpenID Connect (OIDC) is used automatically, no credentials needed

  build-briefcase-packages:
    needs: [release, increment-version]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master' && needs.increment-version.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, windows-latest, ubuntu-latest]
        include:
          - os: macos-13
            platform: macOS
            platform_name: macos
          - os: windows-latest
            platform: windows
            platform_name: windows
          - os: ubuntu-latest
            platform: linux
            platform_name: linux
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          ref: master  # Ensure we're using the latest commit with the version bump

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      # Platform-specific system dependencies
      - name: Install system dependencies (macOS)
        if: matrix.platform == 'macOS'
        run: |
          # Install any macOS-specific dependencies if needed
          echo "Installing macOS dependencies..."

      - name: Install system dependencies (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          # Install any Windows-specific dependencies if needed
          Write-Host "Installing Windows dependencies..."

      - name: Install system dependencies (Linux)
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libasound2-dev \
            libegl1 \
            libjack-dev \
            librtmidi-dev \
            libxkbcommon-x11-0 \
            libxcb-icccm4 \
            libxcb-image0 \
            libxcb-keysyms1 \
            libxcb-randr0 \
            libxcb-render-util0 \
            libxcb-xinerama0 \
            libxcb-xfixes0 \
            libfontconfig1-dev \
            libfreetype6-dev \
            libx11-dev \
            libx11-xcb-dev \
            libxext-dev \
            libxfixes-dev \
            libxi-dev \
            libxrender-dev \
            libxcb1-dev \
            libxcb-glx0-dev \
            libxcb-keysyms1-dev \
            libxcb-image0-dev \
            libxcb-shm0-dev \
            libxcb-util0-dev \
            libxcb-util-dev \
            libxkbcommon-dev \
            libxkbcommon-x11-dev \
            libxcb-cursor0 \
            libxcb-shape0 \
            libgstreamer-plugins-base1.0-0 \
            libgstreamer1.0-0

      # Install Python dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install briefcase
          pip install -r requirements.txt
          if [ -f r2midi_client/requirements.txt ]; then 
            pip install -r r2midi_client/requirements.txt
          fi
        shell: bash

      # Build Server Application (server)
      - name: Create Server Application
        run: |
          echo "Creating R2MIDI Server application..."
          briefcase create ${{ matrix.platform }} app -a server
        shell: bash

      - name: Build Server Application
        run: |
          echo "Building R2MIDI Server application..."
          briefcase build ${{ matrix.platform }} app -a server
        shell: bash

      - name: Package Server Application
        run: |
          echo "Packaging R2MIDI Server application..."
          briefcase package ${{ matrix.platform }} app -a server --no-sign
        shell: bash

      # Build Client Application (r2midi_client)
      - name: Create Client Application
        run: |
          echo "Creating R2MIDI Client application..."
          briefcase create ${{ matrix.platform }} app -a r2midi_client
        shell: bash

      - name: Build Client Application
        run: |
          echo "Building R2MIDI Client application..."
          briefcase build ${{ matrix.platform }} app -a r2midi_client
        shell: bash

      - name: Package Client Application
        run: |
          echo "Packaging R2MIDI Client application..."
          briefcase package ${{ matrix.platform }} app -a r2midi_client --no-sign
        shell: bash

      # Debug: List build outputs
      - name: Debug build outputs
        run: |
          echo "Contents of build directory:"
          find build -type f -name "*" | head -20
          echo ""
          echo "Contents of dist directory (if exists):"
          if [ -d "dist" ]; then
            find dist -type f -name "*" | head -20
          else
            echo "No dist directory found"
          fi
        shell: bash

      # Prepare release files for each platform
      - name: Prepare release files (macOS)
        if: matrix.platform == 'macOS'
        run: |
          mkdir -p release_files

          # Look for DMG files first (preferred distribution format)
          find build -name "*.dmg" -exec cp {} release_files/ \;

          # If no DMG found, package the .app bundles
          if [ -z "$(ls -A release_files/*.dmg 2>/dev/null)" ]; then
            for app in build/*/macos/app/*.app; do
              if [ -d "$app" ]; then
                app_name=$(basename "$app" .app)
                cd "$(dirname "$app")"
                zip -r "$GITHUB_WORKSPACE/release_files/${app_name}-macos.zip" "$(basename "$app")"
                cd "$GITHUB_WORKSPACE"
              fi
            done
          fi

          echo "macOS release files:"
          ls -la release_files/
        shell: bash

      - name: Prepare release files (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path release_files

          # Look for MSI installers first
          Get-ChildItem -Path "build" -Filter "*.msi" -Recurse | ForEach-Object {
            Copy-Item $_.FullName "release_files\"
          }

          # If no MSI found, look for exe files
          if (-not (Get-ChildItem -Path "release_files" -Filter "*.msi")) {
            Get-ChildItem -Path "build" -Filter "*.exe" -Recurse | ForEach-Object {
              Copy-Item $_.FullName "release_files\"
            }
          }

          # If still no installers found, package the app directories
          if (-not ((Get-ChildItem -Path "release_files" -Filter "*.msi") -or (Get-ChildItem -Path "release_files" -Filter "*.exe"))) {
            if (Test-Path "build\server\windows\app") {
              Write-Host "Packaging R2MIDI Server for Windows..."
              Compress-Archive -Path "build\server\windows\app\*" -DestinationPath "release_files\R2MIDI-Server-windows.zip" -Force
            }

            if (Test-Path "build\r2midi_client\windows\app") {
              Write-Host "Packaging R2MIDI Client for Windows..."
              Compress-Archive -Path "build\r2midi_client\windows\app\*" -DestinationPath "release_files\R2MIDI-Client-windows.zip" -Force
            }
          }

          Write-Host "Windows release files:"
          Get-ChildItem -Path release_files -Force

      - name: Prepare release files (Linux)
        if: matrix.platform == 'linux'
        run: |
          mkdir -p release_files

          # Look for AppImage files first
          find build -name "*.AppImage" -exec cp {} release_files/ \;

          # Also look for .deb packages
          find build -name "*.deb" -exec cp {} release_files/ \;

          # If neither found, create tar.gz of the build
          if [ -z "$(ls -A release_files/*.AppImage 2>/dev/null)" ] && [ -z "$(ls -A release_files/*.deb 2>/dev/null)" ]; then
            for app_dir in build/*/linux/app; do
              if [ -d "$app_dir" ]; then
                app_name=$(basename "$(dirname "$(dirname "$app_dir")")")
                tar -czf "release_files/${app_name}-linux.tar.gz" -C "$app_dir" .
              fi
            done
          fi

          echo "Linux release files:"
          ls -la release_files/
        shell: bash

      # Upload platform-specific artifacts
      - name: Upload release files as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: briefcase-release-${{ matrix.platform_name }}
          path: release_files/*
          retention-days: 7

      # Get version for later use
      - name: Get version
        id: get_version
        run: |
          VERSION=$(grep -o '__version__ = "[^"]*"' server/version.py | cut -d'"' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"
        shell: bash

  publish-briefcase-release:
    needs: [build-briefcase-packages, increment-version]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master' && needs.increment-version.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: master

      - name: Get version
        id: get_version
        run: |
          VERSION=$(grep -o '__version__ = "[^"]*"' server/version.py | cut -d'"' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      - name: Download all briefcase release artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: briefcase-release-*
          path: combined_briefcase_files
          merge-multiple: true

      - name: Debug combined briefcase release files
        run: |
          echo "Contents of combined_briefcase_files directory:"
          ls -la combined_briefcase_files/
          echo ""
          echo "File sizes:"
          du -h combined_briefcase_files/*

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          files: combined_briefcase_files/*
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          body: |
            ## R2MIDI Release v${{ steps.get_version.outputs.version }}

            ### Cross-Platform Applications

            This release includes pre-built applications for all major platforms:

            #### Server Applications
            - **R2MIDI-Server-macos.zip** - macOS .app bundle
            - **R2MIDI-Server-windows.zip** - Windows executable and dependencies  
            - **R2MIDI-Server-linux.tar.gz** - Linux executable and dependencies

            #### Client Applications  
            - **R2MIDI-Client-macos.zip** - macOS .app bundle
            - **R2MIDI-Client-windows.zip** - Windows executable and dependencies
            - **R2MIDI-Client-linux.tar.gz** - Linux executable and dependencies

            ### Installation Instructions

            1. **Download** the appropriate package for your platform
            2. **Extract** the archive 
            3. **Run** the application:
               - macOS: Double-click the .app bundle
               - Windows: Run the .exe file
               - Linux: Make executable and run the binary

            ### What's New
            - Built with Briefcase for better cross-platform compatibility
            - Improved packaging and distribution
            - All dependencies included in packages

            For detailed installation and usage instructions, see the [README](https://github.com/tirans/r2midi/blob/master/README.md).
