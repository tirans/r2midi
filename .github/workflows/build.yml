name: Build and Test

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

# Prevent concurrent runs on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel in-progress runs

permissions:
  contents: write
  id-token: write

jobs:
  # Check if we should skip based on commit message
  check-skip:
    name: Check Skip Conditions
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.check.outputs.should_skip }}
      should_increment: ${{ steps.check.outputs.should_increment }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check skip conditions
        id: check
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Latest commit message: $COMMIT_MSG"
          
          # Check for skip CI
          if echo "$COMMIT_MSG" | grep -qE '\[skip ci\]|\[ci skip\]|\[skip actions\]|\[actions skip\]'; then
            echo "should_skip=true" >> $GITHUB_OUTPUT
            echo "should_increment=false" >> $GITHUB_OUTPUT
            echo "🔄 Skipping CI due to commit message directive"
          # Check for version bump commits
          elif echo "$COMMIT_MSG" | grep -qE '^chore: bump version'; then
            echo "should_skip=true" >> $GITHUB_OUTPUT
            echo "should_increment=false" >> $GITHUB_OUTPUT
            echo "🔄 Skipping CI for version bump commit"
          else
            echo "should_skip=false" >> $GITHUB_OUTPUT
            # Only increment on master push (not PR)
            if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/master" ]]; then
              echo "should_increment=true" >> $GITHUB_OUTPUT
            else
              echo "should_increment=false" >> $GITHUB_OUTPUT
            fi
            echo "✅ Proceeding with CI"
          fi

  # Run CI tests first
  ci:
    name: CI Tests
    needs: check-skip
    if: needs.check-skip.outputs.should_skip != 'true'
    uses: ./.github/workflows/ci.yml

  # Increment version after successful CI
  increment-version:
    name: Increment Version
    runs-on: ubuntu-latest
    needs: [check-skip, ci]
    if: |
      always() && 
      needs.check-skip.outputs.should_increment == 'true' && 
      needs.ci.result == 'success'
    outputs:
      version: ${{ steps.version.outputs.new_version }}
      changed: ${{ steps.version.outputs.changed }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Setup environment
        shell: bash
        run: |
          ./.github/scripts/setup-environment.sh

      - name: Increment version
        id: version
        run: |
          ./.github/scripts/update-version.sh "patch"

  # Build only after version increment (or if no increment needed)
  build-python-package:
    name: Build Python Package
    needs: [check-skip, ci, increment-version]
    runs-on: ubuntu-latest
    if: |
      always() && 
      needs.check-skip.outputs.should_skip != 'true' && 
      needs.ci.result == 'success' &&
      (needs.increment-version.result == 'success' || needs.increment-version.result == 'skipped')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # If version was incremented, checkout the new commit
          ref: ${{ needs.increment-version.outputs.changed == 'true' && 'master' || github.sha }}

      - name: Setup environment
        shell: bash
        run: |
          ./.github/scripts/setup-environment.sh

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Build Python package
        shell: bash
        run: |
          ./.github/scripts/build-python-package.sh

      - name: Check package
        run: |
          python -m twine check dist/*.whl dist/*.tar.gz

      - name: Upload Python package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/
          retention-days: 30

  build-cross-platform:
    name: Build ${{ matrix.platform_name }}
    needs: [check-skip, ci, increment-version]
    if: |
      always() && 
      needs.check-skip.outputs.should_skip != 'true' && 
      needs.ci.result == 'success' &&
      (needs.increment-version.result == 'success' || needs.increment-version.result == 'skipped')
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: windows
            platform_name: Windows
            emoji: 🪟
          - os: ubuntu-latest
            platform: linux
            platform_name: Linux
            emoji: 🐧
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # If version was incremented, checkout the new commit
          ref: ${{ needs.increment-version.outputs.changed == 'true' && 'master' || github.sha }}

      - name: Setup environment
        shell: bash
        run: |
          ./.github/scripts/setup-environment.sh

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install system dependencies
        if: matrix.platform == 'linux'
        shell: bash
        run: |
          echo "${{ matrix.emoji }} Installing Linux dependencies..."
          ./.github/scripts/install-system-dependencies.sh linux

      - name: Install Python dependencies
        shell: bash
        run: |
          ./.github/scripts/install-python-dependencies.sh production

      - name: Extract version information
        shell: bash
        run: |
          ./.github/scripts/extract-version.sh
          VERSION=${APP_VERSION}
          echo "${{ matrix.emoji }} Building version: $VERSION for ${{ matrix.platform }}"

      - name: Build applications
        run: |
          echo "${{ matrix.emoji }} Creating applications for ${{ matrix.platform }}..."
          if [ "${{ matrix.platform }}" = "windows" ]; then
            briefcase create ${{ matrix.platform }} app -a server
            briefcase build ${{ matrix.platform }} app -a server
            briefcase package ${{ matrix.platform }} app -a server

            briefcase create ${{ matrix.platform }} app -a r2midi-client
            briefcase build ${{ matrix.platform }} app -a r2midi-client
            briefcase package ${{ matrix.platform }} app -a r2midi-client
          else
            briefcase create ${{ matrix.platform }} system -a server
            briefcase build ${{ matrix.platform }} system -a server 
            briefcase package ${{ matrix.platform }} system -a server

            briefcase create ${{ matrix.platform }} system -a r2midi-client
            briefcase build ${{ matrix.platform }} system -a r2midi-client
            briefcase package ${{ matrix.platform }} system -a r2midi-client
          fi
        shell: bash

      - name: Prepare build artifacts
        shell: bash
        run: |
          ./.github/scripts/prepare-platform-artifacts.sh "${{ matrix.platform }}" "${APP_VERSION}"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-builds
          path: build_artifacts/
          retention-days: 30

  build-macos:
    name: Build macOS (Signed)
    needs: [check-skip, ci, increment-version]
    uses: ./.github/workflows/build-macos.yml
    if: |
      always() && 
      needs.check-skip.outputs.should_skip != 'true' && 
      needs.ci.result == 'success' &&
      (needs.increment-version.result == 'success' || needs.increment-version.result == 'skipped')
    with:
      # Use the incremented version if available, otherwise extract from current code
      version: ${{ needs.increment-version.outputs.version || '' }}
      build-type: "production"
    secrets:
      APPLE_DEVELOPER_ID_APPLICATION_CERT: ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION_CERT }}
      APPLE_DEVELOPER_ID_INSTALLER_CERT: ${{ secrets.APPLE_DEVELOPER_ID_INSTALLER_CERT }}
      APPLE_CERT_PASSWORD: ${{ secrets.APPLE_CERT_PASSWORD }}
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

  create-staging-release:
    name: Create Staging Release
    needs: [increment-version, build-cross-platform, build-macos, build-python-package]
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/master' &&
      needs.increment-version.result == 'success' &&
      needs.build-cross-platform.result == 'success' &&
      needs.build-macos.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Checkout the version-bumped commit
          ref: master

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all_builds

      - name: Organize artifacts for release
        run: |
          echo "📦 Organizing artifacts..."
          mkdir -p release_artifacts
          
          # Copy all platform builds
          find all_builds/ -type f \( -name "*.deb" -o -name "*.tar.gz" -o -name "*.zip" -o -name "*.pkg" -o -name "*.dmg" \) -exec cp {} release_artifacts/ \; 2>/dev/null || true
          
          echo "📦 Release artifacts:"
          ls -la release_artifacts/

      - name: Create staging release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.increment-version.outputs.version }}-staging
          name: "R2MIDI v${{ needs.increment-version.outputs.version }} - Staging"
          draft: true
          prerelease: true
          files: release_artifacts/*
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ## 🚀 R2MIDI v${{ needs.increment-version.outputs.version }} - Staging Build

            ### 📦 Available Platforms

            - 🐧 **Linux**: Production-ready packages
              - **Install**: `R2MIDI-*-linux-v${{ needs.increment-version.outputs.version }}.deb`
              - **Portable**: `R2MIDI-*-linux-v${{ needs.increment-version.outputs.version }}.tar.gz`

            - 🍎 **macOS**: Signed and Notarized ✨
              - **Installer**: `R2MIDI-*-v${{ needs.increment-version.outputs.version }}.pkg` (Recommended)
              - **Disk Image**: `R2MIDI-*-v${{ needs.increment-version.outputs.version }}.dmg`
              - ✅ **No security warnings!**

            - 🪟 **Windows**: Unsigned (Testing)
              - **Portable**: `R2MIDI-*-windows-v${{ needs.increment-version.outputs.version }}.zip`
              - ⚠️ Security warnings expected

            ### 📋 Installation

            **Linux:**
            ```bash
            sudo dpkg -i R2MIDI-*-linux-v${{ needs.increment-version.outputs.version }}.deb
            ```

            **macOS:**
            Double-click the .pkg file or mount .dmg and drag to Applications

            **Windows:**
            Extract ZIP and run .exe files

            ### 🔒 Security Status

            | Platform | Status | Production Ready |
            |----------|--------|------------------|
            | 🍎 macOS | ✅ Signed & Notarized | ✅ Yes |
            | 🐧 Linux | ✅ No signing needed | ✅ Yes |
            | 🪟 Windows | ❌ Unsigned | ⚠️ Testing only |

            ---
            **Note**: This is a staging build. Once verified, it can be promoted to a production release.
