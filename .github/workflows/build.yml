name: Build and Test
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: write  # Changed from read to write to allow version increment commits
  id-token: write  # For PyPI publishing

jobs:
  increment-version:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          # Ensure we can push back to the repository
          persist-credentials: true

      - name: Setup environment
        shell: bash
        run: |
          ./.github/scripts/setup-environment.sh

      - name: Increment version
        id: version
        run: |
          ./.github/scripts/update-version.sh "patch"

  test:
    needs: increment-version
    if: always() && (github.event_name != 'push' || github.ref != 'refs/heads/master' || success() || failure())
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup environment
        shell: bash
        run: |
          ./.github/scripts/setup-environment.sh

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        shell: bash
        run: |
          ./.github/scripts/install-system-dependencies.sh linux

      - name: Install Python dependencies
        shell: bash
        run: |
          ./.github/scripts/install-python-dependencies.sh ci

      - name: Test with pytest
        run: |
          export PYTHONPATH=$PWD:${PYTHONPATH:-}
          xvfb-run -a python -m pytest -v --cov=server --cov=r2midi_client --cov-report=xml

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.12'
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  build-python-package:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup environment
        shell: bash
        run: |
          ./.github/scripts/setup-environment.sh

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Build Python package
        shell: bash
        run: |
          ./.github/scripts/build-python-package.sh

      - name: Check package
        run: |
          python -m twine check dist/*.whl dist/*.tar.gz

      - name: Upload Python package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/
          retention-days: 30

  build-cross-platform:
    needs: test
    if: github.event_name == 'push'
    strategy:
      fail-fast: false
      matrix:
        # Windows and Linux only (macOS handled separately)
        include:
          - os: windows-latest
            platform: windows
            platform_name: windows
            emoji: 🪟
          - os: ubuntu-latest
            platform: linux
            platform_name: linux
            emoji: 🐧
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup environment
        shell: bash
        run: |
          ./.github/scripts/setup-environment.sh

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install system dependencies
        if: matrix.platform == 'linux'
        shell: bash
        run: |
          echo "${{ matrix.emoji }} Installing Linux dependencies..."
          ./.github/scripts/install-system-dependencies.sh linux

      - name: Install Python dependencies
        shell: bash
        run: |
          ./.github/scripts/install-python-dependencies.sh production
          # Install PyInstaller for alternative macOS build approach
          pip install pyinstaller

      - name: Extract version information
        shell: bash
        run: |
          ./.github/scripts/extract-version.sh
          VERSION=${APP_VERSION}
          echo "${{ matrix.emoji }} Building version: $VERSION for ${{ matrix.platform }}"

      - name: Update pyproject.toml
        run: |
          sed -i.bak "s|version = \"0\.1\.64\"|version = \"${APP_VERSION}\"|g" pyproject.toml
        shell: bash

      - name: Build applications
        run: |
          echo "${{ matrix.emoji }} Creating applications for ${{ matrix.platform }}..."
          if [ "${{ matrix.platform }}" = "windows" ]; then
            briefcase create ${{ matrix.platform }} app -a server
            briefcase build ${{ matrix.platform }} app -a server
            briefcase package ${{ matrix.platform }} app -a server

            briefcase create ${{ matrix.platform }} app -a r2midi-client
            briefcase build ${{ matrix.platform }} app -a r2midi-client
            briefcase package ${{ matrix.platform }} app -a r2midi-client
          else
            briefcase create ${{ matrix.platform }} system -a server
            briefcase build ${{ matrix.platform }} system -a server 
            briefcase package ${{ matrix.platform }} system -a server

            briefcase create ${{ matrix.platform }} system -a r2midi-client
            briefcase build ${{ matrix.platform }} system -a r2midi-client
            briefcase package ${{ matrix.platform }} system -a r2midi-client
          fi
        shell: bash

      - name: Prepare build artifacts
        run: |
          mkdir -p build_artifacts
          echo "${{ matrix.emoji }} Packaging ${{ matrix.platform }} builds..."
          
          # Debug: Show what directories exist
          echo "🔍 Checking build directories..."
          find build/ -type d -name "*windows*" -o -name "*linux*" 2>/dev/null || echo "No platform-specific build dirs found"
          
          if [ "${{ matrix.platform }}" = "linux" ]; then
            # Copy .deb packages
            find dist/ -name "*.deb" -exec cp {} build_artifacts/ \; 2>/dev/null || true
            
            # Create tar.gz files as fallback
            if [ -d "build/server/linux/system" ]; then
              echo "📦 Creating Server tar.gz..."
              tar -czf "build_artifacts/R2MIDI-Server-linux-v${APP_VERSION}.tar.gz" -C build/server/linux/system .
            fi
            if [ -d "build/r2midi-client/linux/system" ]; then
              echo "📦 Creating Client tar.gz..."
              tar -czf "build_artifacts/R2MIDI-Client-linux-v${APP_VERSION}.tar.gz" -C build/r2midi-client/linux/system .
            fi
          else
            # Windows - create archives with improved error handling
            echo "🔍 Looking for Windows app directories..."
            
            # Package Server
            if [ -d "build/server/windows/app" ]; then
              echo "📦 Packaging R2MIDI Server..."
              cd build/server/windows/app
              
              # Try PowerShell first (Windows native)
              if command -v powershell >/dev/null 2>&1; then
                echo "Using PowerShell Compress-Archive..."
                powershell -NoProfile -ExecutionPolicy Bypass -Command \
                  "Compress-Archive -Path '.\*' -DestinationPath '${GITHUB_WORKSPACE}\build_artifacts\R2MIDI-Server-windows-v${APP_VERSION}.zip' -Force"
              elif command -v zip >/dev/null 2>&1; then
                echo "Using zip command..."
                zip -r "$GITHUB_WORKSPACE/build_artifacts/R2MIDI-Server-windows-v${APP_VERSION}.zip" *
              else
                echo "Using tar as fallback..."
                tar -czf "$GITHUB_WORKSPACE/build_artifacts/R2MIDI-Server-windows-v${APP_VERSION}.tar.gz" *
              fi
              
              cd "$GITHUB_WORKSPACE"
              echo "✅ Server packaging complete"
            else
              echo "⚠️ Server app directory not found"
            fi
            
            # Package Client
            if [ -d "build/r2midi-client/windows/app" ]; then
              echo "📦 Packaging R2MIDI Client..."
              cd build/r2midi-client/windows/app
              
              # Try PowerShell first (Windows native)
              if command -v powershell >/dev/null 2>&1; then
                echo "Using PowerShell Compress-Archive..."
                powershell -NoProfile -ExecutionPolicy Bypass -Command \
                  "Compress-Archive -Path '.\*' -DestinationPath '${GITHUB_WORKSPACE}\build_artifacts\R2MIDI-Client-windows-v${APP_VERSION}.zip' -Force"
              elif command -v zip >/dev/null 2>&1; then
                echo "Using zip command..."
                zip -r "$GITHUB_WORKSPACE/build_artifacts/R2MIDI-Client-windows-v${APP_VERSION}.zip" *
              else
                echo "Using tar as fallback..."
                tar -czf "$GITHUB_WORKSPACE/build_artifacts/R2MIDI-Client-windows-v${APP_VERSION}.tar.gz" *
              fi
              
              cd "$GITHUB_WORKSPACE"
              echo "✅ Client packaging complete"
            else
              echo "⚠️ Client app directory not found"
            fi
          fi

          echo "${{ matrix.emoji }} Build artifacts:"
          ls -la build_artifacts/ || echo "No artifacts directory created"
          
          # Debug: Show total directory structure if small
          echo "🔍 Final directory structure:"
          find . -name "build_artifacts" -exec ls -la {} \; 2>/dev/null || true
        shell: bash

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-builds
          path: build_artifacts/
          retention-days: 30

  extract-version:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Extract version
        id: version
        shell: bash
        run: |
          # Extract version from pyproject.toml with multiple fallback methods
          VERSION=""
          
          # Method 1: Try tomllib (Python 3.11+)
          if [ -z "$VERSION" ]; then
            VERSION=$(python3 -c "
            try:
                import tomllib
                with open('pyproject.toml', 'rb') as f:
                    config = tomllib.load(f)
                print(config['project']['version'])
            except:
                pass
            " 2>/dev/null)
          fi
          
          # Method 2: Try regex parsing
          if [ -z "$VERSION" ]; then
            VERSION=$(python3 -c "
            import re
            with open('pyproject.toml', 'r') as f:
                content = f.read()
                match = re.search(r'version = \"([^\"]+)\"', content)
                if match:
                    print(match.group(1))
            " 2>/dev/null)
          fi
          
          # Method 3: Simple grep fallback
          if [ -z "$VERSION" ]; then
            VERSION=$(grep -E '^version = ".*"' pyproject.toml | sed 's/version = "\(.*\)"/\1/' 2>/dev/null)
          fi
          
          # Method 4: Default fallback
          if [ -z "$VERSION" ]; then
            VERSION="0.1.0"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

  build-macos-pkg-installers:
    name: 🍎 Build macOS PKG Installers (Native Tools - No Briefcase)
    needs: [test, extract-version]
    uses: ./.github/workflows/build-macos.yml
    if: github.event_name == 'push'
    with:
      version: ${{ needs.extract-version.outputs.version }}
      build-type: "production"
      runner-type: "self-hosted"  # Use your M3 Max runner
    secrets:
      APPLE_DEVELOPER_ID_APPLICATION_CERT: ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION_CERT }}
      APPLE_DEVELOPER_ID_INSTALLER_CERT: ${{ secrets.APPLE_DEVELOPER_ID_INSTALLER_CERT }}
      APPLE_CERT_PASSWORD: ${{ secrets.APPLE_CERT_PASSWORD }}
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

  create-release:
    needs: [build-cross-platform, build-macos-pkg-installers, extract-version]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set version from extract-version job
        run: |
          echo "VERSION=${{ needs.extract-version.outputs.version }}" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all_builds

      - name: Organize artifacts for release
        run: |
          echo "📦 Organizing artifacts..."
          mkdir -p release_artifacts
          
          # Copy all platform builds
          find all_builds/ -type f -name "*.deb" -o -name "*.tar.gz" -o -name "*.zip" -o -name "*.pkg" -o -name "*.dmg" | \
            xargs -I {} cp {} release_artifacts/ 2>/dev/null || true
          
          echo "📦 Release artifacts:"
          ls -la release_artifacts/

      - name: Create staging release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.extract-version.outputs.version }}-staging
          name: "R2MIDI v${{ needs.extract-version.outputs.version }} - Release"
          draft: true
          prerelease: true
          files: release_artifacts/*
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ## 🚀 R2MIDI v${{ needs.extract-version.outputs.version }} - Release

            ### 📦 Available Platforms

            - 🐧 **Linux**: Production-ready packages
              - **Install**: `R2MIDI-*-linux-v${{ needs.extract-version.outputs.version }}.deb`
              - **Portable**: `R2MIDI-*-linux-v${{ needs.extract-version.outputs.version }}.tar.gz`

            - 🍎 **macOS**: Signed and Notarized with Native Tools ✨
              - **Installer**: `R2MIDI-*-v${{ needs.extract-version.outputs.version }}.pkg` (Recommended)
              - **Disk Image**: `R2MIDI-*-v${{ needs.extract-version.outputs.version }}.dmg`
              - ✅ **No security warnings! Built with py2app + codesign + pkgbuild + notarytool**
              - 🚫 **No more Briefcase failures!**

            - 🪟 **Windows**: Unsigned (Testing)
              - **Portable**: `R2MIDI-*-windows-v${{ needs.extract-version.outputs.version }}.zip`
              - ⚠️ Security warnings expected

            ### 📋 Installation

            **Linux:**
            ```bash
            sudo dpkg -i R2MIDI-*-linux-v${{ needs.extract-version.outputs.version }}.deb
            ```

            **macOS:**
            Double-click the .pkg file or mount .dmg and drag to Applications

            **Windows:**
            Extract ZIP and run .exe files

            ### 🔒 Security Status

            | Platform | Status | Production Ready |
            |----------|--------|------------------|
            | 🍎 macOS | ✅ Signed & Notarized (Native Tools) | ✅ Yes |
            | 🐧 Linux | ✅ No signing needed | ✅ Yes |
            | 🪟 Windows | ❌ Unsigned | ⚠️ Testing only |

            ### 🔧 macOS Build Method 
           
            **Current (Working):** Native macOS tools
            - ✅ **py2app** for building applications
            - ✅ **codesign** for code signing  
            - ✅ **pkgbuild** for PKG creation
            - ✅ **notarytool** for Apple notarization
            - ✅ **M3 Max self-hosted runner** for fastest builds

            ---
            **🍎 macOS users: Fully signed and notarized with native tools - no more Briefcase failures!**  
            **🐧 Linux users: Production ready!**  
            **🪟 Windows users: Signed packages coming soon!**