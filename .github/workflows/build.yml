name: Build and Test
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: write  # Changed from read to write to allow version increment commits
  id-token: write  # For PyPI publishing

jobs:
  increment-version:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --local user.name "GitHub Action"
          git config --local user.email "action@github.com"

      - name: Increment version
        id: version
        run: |
          # Get current version
          CURRENT_VERSION=$(grep -o '__version__ = "[^"]*"' server/version.py | cut -d'"' -f2)
          echo "Current version: $CURRENT_VERSION"

          # Increment patch version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "New version: $NEW_VERSION"

          # Update version.py
          sed -i "s/__version__ = \"$CURRENT_VERSION\"/__version__ = \"$NEW_VERSION\"/" server/version.py

          # Update pyproject.toml (both occurrences)
          sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml

          # Update CHANGELOG.md with new version
          TODAY=$(date +%Y-%m-%d)
          sed -i "s/## \[$CURRENT_VERSION\] - [0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}/## [$NEW_VERSION] - $TODAY\n\n### Changed\n- Automatic version increment\n\n## [$CURRENT_VERSION] - &/" CHANGELOG.md

          # Set output for other jobs
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Commit and push version increment
        run: |
          git add server/version.py pyproject.toml CHANGELOG.md
          git commit -m "Bump version to $NEW_VERSION [skip ci]"
          git push

  test:
    needs: increment-version
    if: always() && (github.event_name != 'push' || github.ref != 'refs/heads/master' || success() || failure())
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fix submodules
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git submodule deinit -f server/midi-presets || true
          rm -rf .git/modules/server/midi-presets || true
          git rm -rf server/midi-presets || true
          git submodule add https://github.com/tirans/midi-presets.git server/midi-presets
          git submodule init
          git submodule update --init --recursive

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libasound2-dev libegl1 libjack-dev librtmidi-dev \
            libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 \
            libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 \
            libxcb-xinerama0 libxcb-xfixes0 libfontconfig1-dev \
            libfreetype6-dev libx11-dev libx11-xcb-dev libxext-dev \
            libxfixes-dev libxi-dev libxrender-dev libxcb1-dev \
            libxcb-glx0-dev libxcb-keysyms1-dev libxcb-image0-dev \
            libxcb-shm0-dev libxcb-util0-dev libxcb-util-dev \
            libxkbcommon-dev libxkbcommon-x11-dev libxcb-cursor0 \
            libxcb-shape0 portaudio19-dev build-essential \
            pkg-config libffi-dev libssl-dev libgl1-mesa-dri \
            libglib2.0-0 xvfb

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 pytest build twine
          if [ -f requirements.txt ]; then 
            pip install -r requirements.txt
          fi
          if [ -f r2midi_client/requirements.txt ]; then 
            pip install -r r2midi_client/requirements.txt
          fi
          pip install -e ".[test]"

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          #flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          #flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: |
          export PYTHONPATH=$PWD:${PYTHONPATH:-}
          xvfb-run -a python -m pytest -v --cov=server --cov=r2midi_client --cov-report=xml

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.12'
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  build-python-package:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fix submodules
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git submodule deinit -f server/midi-presets || true
          rm -rf .git/modules/server/midi-presets || true
          git rm -rf server/midi-presets || true
          git submodule add https://github.com/tirans/midi-presets.git server/midi-presets
          git submodule init
          git submodule update --init --recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine

      - name: Build Python package
        run: |
          python -m build

      - name: Check package
        run: |
          python -m twine check dist/*

      - name: Upload Python package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/
          retention-days: 30

  build-stable-cross-platform:
    needs: test
    if: github.event_name == 'push'
    strategy:
      fail-fast: false
      matrix:
        # Include all platforms: Windows, Linux, and macOS
        include:
          - os: windows-latest
            platform: windows
            platform_name: windows
            emoji: 🪟
          - os: ubuntu-latest
            platform: linux
            platform_name: linux  
            emoji: 🐧
          - os: macos-13
            platform: macOS
            platform_name: macos
            emoji: 🍎
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fix submodules
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git submodule deinit -f server/midi-presets || true
          rm -rf .git/modules/server/midi-presets || true
          git rm -rf server/midi-presets || true
          git submodule add https://github.com/tirans/midi-presets.git server/midi-presets
          git submodule init
          git submodule update --init --recursive
        shell: bash

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install system dependencies (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          Write-Host "${{ matrix.emoji }} Installing Windows dependencies..."

      - name: Install system dependencies (Linux)
        if: matrix.platform == 'linux'
        run: |
          echo "${{ matrix.emoji }} Installing Linux dependencies..."
          sudo apt-get update
          sudo apt-get install -y \
            libasound2-dev libegl1 libjack-dev librtmidi-dev \
            libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 \
            libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 \
            libxcb-xinerama0 libxcb-xfixes0 libfontconfig1-dev \
            libfreetype6-dev libx11-dev libx11-xcb-dev libxext-dev \
            libxfixes-dev libxi-dev libxrender-dev libxcb1-dev \
            libxcb-glx0-dev libxcb-keysyms1-dev libxcb-image0-dev \
            libxcb-shm0-dev libxcb-util0-dev libxcb-util-dev \
            libxkbcommon-dev libxkbcommon-x11-dev libxcb-cursor0 \
            libxcb-shape0

      - name: Install system dependencies (macOS)
        if: matrix.platform == 'macOS'
        run: |
          echo "${{ matrix.emoji }} Installing macOS dependencies..."
          # macOS typically doesn't need additional system dependencies for Python/Qt
          # but we can install any required packages here if needed in the future

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install briefcase
          pip install -r requirements.txt
          if [ -f r2midi_client/requirements.txt ]; then 
            pip install -r r2midi_client/requirements.txt
          fi
        shell: bash

      - name: Configure stable build metadata
        run: |
          # Get current version
          VERSION=$(grep -o '__version__ = "[^"]*"' server/version.py | cut -d'"' -f2)
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV

          # Set stable build metadata - keep existing bundle for compatibility
          echo "SERVER_NAME=R2MIDI Server" >> $GITHUB_ENV
          echo "CLIENT_NAME=R2MIDI Client" >> $GITHUB_ENV
          echo "AUTHOR_NAME=R2MIDI Team" >> $GITHUB_ENV
          echo "AUTHOR_EMAIL=tiran@tirans.com" >> $GITHUB_ENV

          echo "${{ matrix.emoji }} Building stable version: $VERSION for ${{ matrix.platform }}"
        shell: bash

      - name: Update pyproject.toml with stable config
        run: |
          # Update with stable metadata while preserving existing bundle structure
          sed -i.bak "s|version = \"0\.1\.64\"|version = \"${APP_VERSION}\"|g" pyproject.toml
          sed -i.bak "s|author = \".*\"|author = \"${AUTHOR_NAME}\"|g" pyproject.toml
          sed -i.bak "s|author_email = \".*\"|author_email = \"${AUTHOR_EMAIL}\"|g" pyproject.toml
          sed -i.bak "s|formal_name = \"R2MIDI Server\"|formal_name = \"${SERVER_NAME}\"|g" pyproject.toml
          sed -i.bak "s|formal_name = \"R2MIDI Client\"|formal_name = \"${CLIENT_NAME}\"|g" pyproject.toml

          echo "Updated pyproject.toml for stable build"
        shell: bash

      - name: Build stable applications (unsigned)
        run: |
          echo "${{ matrix.emoji }} Creating stable applications for ${{ matrix.platform }}..."
          if [ "${{ matrix.platform }}" = "windows" ]; then
            briefcase create ${{ matrix.platform }} app -a server
            briefcase build ${{ matrix.platform }} app -a server

            briefcase create ${{ matrix.platform }} app -a r2midi-client
            briefcase build ${{ matrix.platform }} app -a r2midi-client
          elif [ "${{ matrix.platform }}" = "macOS" ]; then
            briefcase create ${{ matrix.platform }} app -a server
            briefcase build ${{ matrix.platform }} app -a server

            briefcase create ${{ matrix.platform }} app -a r2midi-client
            briefcase build ${{ matrix.platform }} app -a r2midi-client
          else
            briefcase create ${{ matrix.platform }} system -a server
            briefcase build ${{ matrix.platform }} system -a server 

            briefcase create ${{ matrix.platform }} system -a r2midi-client
            briefcase build ${{ matrix.platform }} system -a r2midi-client
          fi
        shell: bash

      - name: Package stable applications (unsigned)
        run: |
          echo "${{ matrix.emoji }} Packaging stable applications (unsigned)..."
          if [ "${{ matrix.platform }}" = "windows" ]; then
            briefcase package ${{ matrix.platform }} app -a server  
            briefcase package ${{ matrix.platform }} app -a r2midi-client
          elif [ "${{ matrix.platform }}" = "macOS" ]; then
            briefcase package ${{ matrix.platform }} app -a server --adhoc-sign
            briefcase package ${{ matrix.platform }} app -a r2midi-client --adhoc-sign
          else
            briefcase package ${{ matrix.platform }} system -a server  
            briefcase package ${{ matrix.platform }} system -a r2midi-client
          fi
        shell: bash

      - name: Prepare stable build artifacts (Linux)
        if: matrix.platform == 'linux'
        run: |
          mkdir -p stable_builds
          echo "🐧 Packaging Linux stable builds..."

          # Copy the .deb packages from dist directory to stable_builds with proper naming
          if [ -f "dist/server_${APP_VERSION}-1~ubuntu-noble_amd64.deb" ]; then
            cp "dist/server_${APP_VERSION}-1~ubuntu-noble_amd64.deb" "stable_builds/R2MIDI-Server-linux-stable-v${APP_VERSION}.deb"
          fi

          if [ -f "dist/r2midi-client_${APP_VERSION}-1~ubuntu-noble_amd64.deb" ]; then
            cp "dist/r2midi-client_${APP_VERSION}-1~ubuntu-noble_amd64.deb" "stable_builds/R2MIDI-Client-linux-stable-v${APP_VERSION}.deb"
          fi

          # Create tar.gz files from the .deb packages for compatibility with release.yml
          if [ -f "dist/server_${APP_VERSION}-1~ubuntu-noble_amd64.deb" ]; then
            # Create a temporary directory to extract and package the .deb contents
            mkdir -p temp_extract/server
            cp "dist/server_${APP_VERSION}-1~ubuntu-noble_amd64.deb" temp_extract/server/
            cd temp_extract/server
            ar x "server_${APP_VERSION}-1~ubuntu-noble_amd64.deb"
            mkdir -p data
            tar -xf data.tar.* -C data
            cd "$GITHUB_WORKSPACE"
            tar -czf "stable_builds/R2MIDI-Server-linux-stable-v${APP_VERSION}.tar.gz" -C temp_extract/server/data .
            rm -rf temp_extract/server
          fi

          if [ -f "dist/r2midi-client_${APP_VERSION}-1~ubuntu-noble_amd64.deb" ]; then
            # Create a temporary directory to extract and package the .deb contents
            mkdir -p temp_extract/client
            cp "dist/r2midi-client_${APP_VERSION}-1~ubuntu-noble_amd64.deb" temp_extract/client/
            cd temp_extract/client
            ar x "r2midi-client_${APP_VERSION}-1~ubuntu-noble_amd64.deb"
            mkdir -p data
            tar -xf data.tar.* -C data
            cd "$GITHUB_WORKSPACE"
            tar -czf "stable_builds/R2MIDI-Client-linux-stable-v${APP_VERSION}.tar.gz" -C temp_extract/client/data .
            rm -rf temp_extract/client
          fi

          # Fallback to using build directory if .deb extraction fails
          if [ ! -f "stable_builds/R2MIDI-Server-linux-stable-v${APP_VERSION}.tar.gz" ] && [ -d "build/server/linux/system" ]; then
            tar -czf "stable_builds/R2MIDI-Server-linux-stable-v${APP_VERSION}.tar.gz" -C build/server/linux/system .
          fi

          if [ ! -f "stable_builds/R2MIDI-Client-linux-stable-v${APP_VERSION}.tar.gz" ] && [ -d "build/r2midi-client/linux/system" ]; then
            tar -czf "stable_builds/R2MIDI-Client-linux-stable-v${APP_VERSION}.tar.gz" -C build/r2midi-client/linux/system .
          fi

          echo "🐧 Stable build artifacts:"
          ls -la stable_builds/
        shell: bash

      - name: Prepare stable build artifacts (Windows)
        if: matrix.platform == 'windows'
        run: |
          mkdir -p stable_builds
          echo "🪟 Packaging Windows stable builds..."

          if (Test-Path -Path "build/server/windows/app") {
            Compress-Archive -Path "build/server/windows/app/*" -DestinationPath "stable_builds/R2MIDI-Server-windows-stable-v$env:APP_VERSION.zip" -Force
          }

          if (Test-Path -Path "build/r2midi-client/windows/app") {
            Compress-Archive -Path "build/r2midi-client/windows/app/*" -DestinationPath "stable_builds/R2MIDI-Client-windows-stable-v$env:APP_VERSION.zip" -Force
          }

          echo "🪟 Stable build artifacts:"
          Get-ChildItem -Path stable_builds
        shell: pwsh

      - name: Prepare stable build artifacts (macOS)
        if: matrix.platform == 'macOS'
        run: |
          mkdir -p stable_builds
          echo "🍎 Packaging macOS stable builds..."

          if [ -d "build/server/macOS/app" ]; then
            cd build/server/macOS/app
            zip -r "$GITHUB_WORKSPACE/stable_builds/R2MIDI-Server-macos-stable-v${APP_VERSION}.zip" *.app
            cd "$GITHUB_WORKSPACE"
          fi

          if [ -d "build/r2midi-client/macOS/app" ]; then
            cd build/r2midi-client/macOS/app
            zip -r "$GITHUB_WORKSPACE/stable_builds/R2MIDI-Client-macos-stable-v${APP_VERSION}.zip" *.app
            cd "$GITHUB_WORKSPACE"
          fi

          echo "🍎 Stable build artifacts:"
          ls -la stable_builds/
        shell: bash

      - name: Upload stable build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: stable-builds-${{ matrix.platform_name }}
          path: stable_builds/
          retention-days: 30

  create-staging-release:
    needs: [build-stable-cross-platform ]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fix submodules
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git submodule deinit -f server/midi-presets || true
          rm -rf .git/modules/server/midi-presets || true
          git rm -rf server/midi-presets || true
          git submodule add https://github.com/tirans/midi-presets.git server/midi-presets
          git submodule init
          git submodule update --init --recursive

      - name: Get version
        id: get_version
        run: |
          VERSION=$(grep -o '__version__ = "[^"]*"' server/version.py | cut -d'"' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download all stable artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: stable-builds-*
          path: all_stable_builds
          merge-multiple: true

      - name: Create staging release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}-staging
          name: Staging Release v${{ steps.get_version.outputs.version }}
          draft: true
          prerelease: true
          files: all_stable_builds/*
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ## 🚧 R2MIDI v${{ steps.get_version.outputs.version }} - Staging Release

            **This is a staging release with unsigned applications for Linux/Windows only.**

            The production-ready release with signed applications (including macOS) will be created automatically by the signing workflow.

            ### 📦 Available Platforms (Unsigned Stable Builds)

            - 🐧 **Linux**: Production-ready, no signing required
              - Download: `R2MIDI-*-linux-stable-v${{ steps.get_version.outputs.version }}.tar.gz`
              - Installation: Extract and run executables

            - 🪟 **Windows**: Unsigned, for testing only
              - Download: `R2MIDI-*-windows-stable-v${{ steps.get_version.outputs.version }}.zip`
              - Installation: Extract and run .exe files (security warnings expected)

            - 🍎 **macOS**: Unsigned, for testing only
              - Download: `R2MIDI-*-macos-stable-v${{ steps.get_version.outputs.version }}.zip`
              - Installation: Extract and open .app files (security warnings expected)

            ### 📋 Installation Instructions

            #### Linux (Ready for Use) ✅
            ```bash
            # Extract
            tar -xzf R2MIDI-*-linux-stable-v${{ steps.get_version.outputs.version }}.tar.gz

            # Make executable 
            chmod +x r2midi-*

            # Run
            ./r2midi-server  # or ./r2midi-client
            ```

            #### Windows (Testing Only) ⚠️
            1. Extract the ZIP file
            2. Allow through Windows Defender when prompted
            3. Run the .exe files
            4. **Note**: Security warnings are expected for unsigned executables

            #### macOS (Testing Only) ⚠️
            1. Extract the ZIP file
            2. Right-click on the .app file and select "Open"
            3. Click "Open" when prompted about unidentified developer
            4. **Note**: Security warnings are expected for unsigned applications

            ### 🔄 What's Next?

            - **Signed Release**: Will be created automatically with:
              - ✅ Code-signed Windows applications
              - ✅ Code-signed and notarized macOS applications  
              - ✅ All platforms ready for production use

            - **PyPI Package**: Already published at https://pypi.org/project/r2midi/

            ### 🛠️ For Developers

            - Test these builds on your platforms
            - Report issues with platform-specific behavior
            - Signed production release coming soon automatically

            ---

            **🔒 Production users: Wait for the signed release that will be published automatically.**
