name: Build and Test
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read
  id-token: write  # For PyPI publishing

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev libegl1 libjack-dev librtmidi-dev

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 pytest build twine
          if [ -f requirements.txt ]; then 
            pip install -r requirements.txt; 
          fi
          if [ -f r2midi_client/requirements.txt ]; then 
            pip install -r r2midi_client/requirements.txt; 
          fi
          pip install -e ".[test]"

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: |
          PYTHONPATH=$PWD pytest --cov=server --cov=r2midi_client --cov-report=xml

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.12'
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  build-python-package:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine

      - name: Build Python package
        run: |
          python -m build

      - name: Check package
        run: |
          python -m twine check dist/*

      - name: Upload Python package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/
          retention-days: 30

  publish-to-pypi:
    needs: [test, build-python-package]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    environment: pypi-publishing

    steps:
      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/

  build-stable-cross-platform:
    needs: test
    if: github.event_name == 'push'
    strategy:
      fail-fast: false
      matrix:
        # Only Linux and Windows for stable unsigned builds - NO macOS
        include:
          - os: windows-latest
            platform: windows
            platform_name: windows
            emoji: 🪟
          - os: ubuntu-latest
            platform: linux
            platform_name: linux  
            emoji: 🐧
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install system dependencies (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          Write-Host "${{ matrix.emoji }} Installing Windows dependencies..."

      - name: Install system dependencies (Linux)
        if: matrix.platform == 'linux'
        run: |
          echo "${{ matrix.emoji }} Installing Linux dependencies..."
          sudo apt-get update
          sudo apt-get install -y \
            libasound2-dev libegl1 libjack-dev librtmidi-dev \
            libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 \
            libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 \
            libxcb-xinerama0 libxcb-xfixes0 libfontconfig1-dev \
            libfreetype6-dev libx11-dev libx11-xcb-dev libxext-dev \
            libxfixes-dev libxi-dev libxrender-dev libxcb1-dev \
            libxcb-glx0-dev libxcb-keysyms1-dev libxcb-image0-dev \
            libxcb-shm0-dev libxcb-util0-dev libxcb-util-dev \
            libxkbcommon-dev libxkbcommon-x11-dev libxcb-cursor0 \
            libxcb-shape0

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install briefcase
          pip install -r requirements.txt
          if [ -f r2midi_client/requirements.txt ]; then 
            pip install -r r2midi_client/requirements.txt
          fi
        shell: bash

      - name: Configure stable build metadata
        run: |
          # Get current version
          VERSION=$(grep -o '__version__ = "[^"]*"' server/version.py | cut -d'"' -f2)
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
          
          # Set stable build metadata - keep existing bundle for compatibility
          echo "SERVER_NAME=R2MIDI Server" >> $GITHUB_ENV
          echo "CLIENT_NAME=R2MIDI Client" >> $GITHUB_ENV
          echo "AUTHOR_NAME=R2MIDI Team" >> $GITHUB_ENV
          echo "AUTHOR_EMAIL=tiran@tirans.com" >> $GITHUB_ENV
          
          echo "${{ matrix.emoji }} Building stable version: $VERSION for ${{ matrix.platform }}"
        shell: bash

      - name: Update pyproject.toml with stable config
        run: |
          # Update with stable metadata while preserving existing bundle structure
          sed -i.bak "s|version = \"0\.1\.64\"|version = \"${APP_VERSION}\"|g" pyproject.toml
          sed -i.bak "s|author = \".*\"|author = \"${AUTHOR_NAME}\"|g" pyproject.toml
          sed -i.bak "s|author_email = \".*\"|author_email = \"${AUTHOR_EMAIL}\"|g" pyproject.toml
          sed -i.bak "s|formal_name = \"R2MIDI Server\"|formal_name = \"${SERVER_NAME}\"|g" pyproject.toml
          sed -i.bak "s|formal_name = \"R2MIDI Client\"|formal_name = \"${CLIENT_NAME}\"|g" pyproject.toml
          
          echo "Updated pyproject.toml for stable build"
        shell: bash

      - name: Build stable applications (unsigned)
        run: |
          echo "${{ matrix.emoji }} Creating stable applications for ${{ matrix.platform }}..."
          briefcase create ${{ matrix.platform }} app -a server
          briefcase build ${{ matrix.platform }} app -a server
          
          briefcase create ${{ matrix.platform }} app -a r2midi_client
          briefcase build ${{ matrix.platform }} app -a r2midi_client
        shell: bash

      - name: Package stable applications (unsigned)
        run: |
          echo "${{ matrix.emoji }} Packaging stable applications (unsigned)..."
          briefcase package ${{ matrix.platform }} app -a server --no-sign
          briefcase package ${{ matrix.platform }} app -a r2midi_client --no-sign
        shell: bash

      - name: Prepare stable build artifacts
        run: |
          mkdir -p stable_builds
          
          if [ "${{ matrix.platform }}" = "windows" ]; then
            echo "🪟 Packaging Windows stable builds..."
            
            if [ -d "build/server/windows/app" ]; then
              cd build/server/windows/app
              zip -r "$GITHUB_WORKSPACE/stable_builds/R2MIDI-Server-windows-stable-v${APP_VERSION}.zip" .
              cd "$GITHUB_WORKSPACE"
            fi
            
            if [ -d "build/r2midi_client/windows/app" ]; then
              cd build/r2midi_client/windows/app
              zip -r "$GITHUB_WORKSPACE/stable_builds/R2MIDI-Client-windows-stable-v${APP_VERSION}.zip" .
              cd "$GITHUB_WORKSPACE"
            fi
            
          else  # Linux
            echo "🐧 Packaging Linux stable builds..."
            
            if [ -d "build/server/linux/app" ]; then
              tar -czf "stable_builds/R2MIDI-Server-linux-stable-v${APP_VERSION}.tar.gz" -C build/server/linux/app .
            fi
            
            if [ -d "build/r2midi_client/linux/app" ]; then
              tar -czf "stable_builds/R2MIDI-Client-linux-stable-v${APP_VERSION}.tar.gz" -C build/r2midi_client/linux/app .
            fi
          fi
          
          echo "${{ matrix.emoji }} Stable build artifacts:"
          ls -la stable_builds/
        shell: bash

      - name: Upload stable build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: stable-builds-${{ matrix.platform_name }}
          path: stable_builds/
          retention-days: 30

  create-staging-release:
    needs: [build-stable-cross-platform, publish-to-pypi]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          VERSION=$(grep -o '__version__ = "[^"]*"' server/version.py | cut -d'"' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download all stable artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: stable-builds-*
          path: all_stable_builds
          merge-multiple: true

      - name: Create staging release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}-staging
          name: Staging Release v${{ steps.get_version.outputs.version }}
          draft: true
          prerelease: true
          files: all_stable_builds/*
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ## 🚧 R2MIDI v${{ steps.get_version.outputs.version }} - Staging Release
            
            **This is a staging release with unsigned applications for Linux/Windows only.**
            
            The production-ready release with signed applications (including macOS) will be created automatically by the signing workflow.
            
            ### 📦 Available Platforms (Unsigned Stable Builds)
            
            - 🐧 **Linux**: Production-ready, no signing required
              - Download: `R2MIDI-*-linux-stable-v${{ steps.get_version.outputs.version }}.tar.gz`
              - Installation: Extract and run executables
              
            - 🪟 **Windows**: Unsigned, for testing only
              - Download: `R2MIDI-*-windows-stable-v${{ steps.get_version.outputs.version }}.zip`
              - Installation: Extract and run .exe files (security warnings expected)
              
            - 🍎 **macOS**: Not available in staging
              - Reason: No unsigned macOS builds (poor user experience)
              - Solution: Wait for production signed release
            
            ### 📋 Installation Instructions
            
            #### Linux (Ready for Use) ✅
            ```bash
            # Extract
            tar -xzf R2MIDI-*-linux-stable-v${{ steps.get_version.outputs.version }}.tar.gz
            
            # Make executable 
            chmod +x r2midi-*
            
            # Run
            ./r2midi-server  # or ./r2midi-client
            ```
            
            #### Windows (Testing Only) ⚠️
            1. Extract the ZIP file
            2. Allow through Windows Defender when prompted
            3. Run the .exe files
            4. **Note**: Security warnings are expected for unsigned executables
            
            ### 🔄 What's Next?
            
            - **Signed Release**: Will be created automatically with:
              - ✅ Code-signed Windows applications
              - ✅ Code-signed and notarized macOS applications  
              - ✅ All platforms ready for production use
              
            - **PyPI Package**: Already published at https://pypi.org/project/r2midi/
            
            ### 🛠️ For Developers
            
            - Test these builds on your platforms
            - Report issues with platform-specific behavior
            - Signed production release coming soon automatically
            
            ---
            
            **🔒 Production users: Wait for the signed release that will be published automatically.**
