name: Setup macOS Code Signing
description: Setup macOS code signing certificates and credentials

inputs:
  certificate-p12:
    description: 'Base64 encoded P12 certificate'
    required: false
  certificate-password:
    description: 'Certificate password'
    required: false
  apple-id:
    description: 'Apple ID for notarization'
    required: false
  apple-id-password:
    description: 'Apple ID app-specific password'
    required: false
  apple-team-id:
    description: 'Apple Developer Team ID'
    required: false
  app-store-connect-api-key:
    description: 'App Store Connect API key'
    required: false
  app-store-connect-key-id:
    description: 'App Store Connect key ID'
    required: false
  app-store-connect-issuer-id:
    description: 'App Store Connect issuer ID'
    required: false

runs:
  using: "composite"
  steps:
    - name: Setup macOS signing
      shell: bash
      run: |
        echo "üîê Setting up macOS code signing..."
        
        # Check if we have the necessary inputs
        if [ -z "${{ inputs.certificate-p12 }}" ]; then
          echo "‚ö†Ô∏è No certificate provided, signing will be skipped"
          echo "BRIEFCASE_SIGNING_IDENTITY=" >> $GITHUB_ENV
          exit 0
        fi
        
        # Create keychain
        KEYCHAIN_NAME="signing-$RANDOM"
        KEYCHAIN_PASSWORD="temp-password-$RANDOM"
        
        echo "üîë Creating temporary keychain..."
        security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
        security set-keychain-settings -lut 21600 "$KEYCHAIN_NAME"
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
        
        # Add keychain to search list
        security list-keychains -s "$KEYCHAIN_NAME" $(security list-keychains -d user | sed s/\"//g)
        
        # Import certificate
        echo "üìú Importing signing certificate..."
        echo "${{ inputs.certificate-p12 }}" | base64 --decode > certificate.p12
        
        security import certificate.p12 \
          -k "$KEYCHAIN_NAME" \
          -P "${{ inputs.certificate-password }}" \
          -T /usr/bin/codesign \
          -T /usr/bin/security
        
        # Set key partition list to allow codesign access
        security set-key-partition-list \
          -S apple-tool:,apple: \
          -s -k "$KEYCHAIN_PASSWORD" \
          "$KEYCHAIN_NAME"
        
        # Find signing identity
        SIGNING_IDENTITY=$(security find-identity -v -p codesigning "$KEYCHAIN_NAME" | head -1 | grep -o '"[^"]*"' | sed 's/"//g' || echo "")
        
        if [ -n "$SIGNING_IDENTITY" ]; then
          echo "‚úÖ Found signing identity: $SIGNING_IDENTITY"
          echo "BRIEFCASE_SIGNING_IDENTITY=$SIGNING_IDENTITY" >> $GITHUB_ENV
          echo "KEYCHAIN_NAME=$KEYCHAIN_NAME" >> $GITHUB_ENV
          echo "KEYCHAIN_PASSWORD=$KEYCHAIN_PASSWORD" >> $GITHUB_ENV
        else
          echo "‚ùå No valid signing identity found"
          echo "BRIEFCASE_SIGNING_IDENTITY=" >> $GITHUB_ENV
        fi
        
        # Setup notarization if credentials provided
        if [ -n "${{ inputs.apple-id }}" ] && [ -n "${{ inputs.apple-id-password }}" ]; then
          echo "üîî Setting up notarization credentials..."
          
          # Create notarization profile
          xcrun notarytool store-credentials "r2midi-notarization" \
            --apple-id "${{ inputs.apple-id }}" \
            --password "${{ inputs.apple-id-password }}" \
            --team-id "${{ inputs.apple-team-id }}"
          
          echo "BRIEFCASE_NOTARIZATION_PROFILE=r2midi-notarization" >> $GITHUB_ENV
        fi
        
        # Clean up certificate file
        rm -f certificate.p12
        
        echo "‚úÖ macOS signing setup complete"

    - name: Verify signing setup
      shell: bash
      run: |
        echo "üîç Verifying signing setup..."
        
        if [ -n "$BRIEFCASE_SIGNING_IDENTITY" ]; then
          echo "‚úÖ Signing identity: $BRIEFCASE_SIGNING_IDENTITY"
          
          # List available identities
          echo "üìã Available signing identities:"
          security find-identity -v -p codesigning || echo "No identities found"
        else
          echo "‚ö†Ô∏è No signing identity configured"
        fi
        
        if [ -n "$BRIEFCASE_NOTARIZATION_PROFILE" ]; then
          echo "‚úÖ Notarization profile: $BRIEFCASE_NOTARIZATION_PROFILE"
        else
          echo "‚ö†Ô∏è No notarization profile configured"
        fi
