#!/bin/bash
# verify-fix.sh - Verify that the build system fix is complete

echo "üîç R2MIDI Build System Verification"
echo "==================================="
echo ""

ISSUES_FOUND=0

# Check 1: Verify submodule is removed
echo "üìù Checking Git submodule status..."
if [ -f .gitmodules ]; then
    if grep -q "server/midi-presets" .gitmodules; then
        echo "‚ùå server/midi-presets still referenced in .gitmodules"
        ISSUES_FOUND=$((ISSUES_FOUND + 1))
    else
        echo "‚úÖ .gitmodules exists but no problematic submodules found"
    fi
else
    echo "‚úÖ .gitmodules file removed (no submodules)"
fi

# Check 2: Verify directory structure
echo "üìù Checking directory structure..."
if [ -d "server/midi-presets" ]; then
    if [ -d "server/midi-presets/.git" ]; then
        echo "‚ùå server/midi-presets still contains .git directory (submodule not cleaned)"
        ISSUES_FOUND=$((ISSUES_FOUND + 1))
    else
        echo "‚úÖ server/midi-presets exists as regular directory"
    fi
else
    echo "‚ö†Ô∏è server/midi-presets directory missing (will be created by CI)"
fi

# Check 3: Verify new action files exist
echo "üìù Checking new GitHub Actions structure..."
REQUIRED_ACTIONS=(
    ".github/actions/setup-environment/action.yml"
    ".github/actions/build-apps/action.yml"
    ".github/actions/package-apps/action.yml"
    ".github/actions/setup-macos-signing/action.yml"
    ".github/actions/cleanup-signing/action.yml"
)

for action in "${REQUIRED_ACTIONS[@]}"; do
    if [ -f "$action" ]; then
        echo "‚úÖ $action exists"
    else
        echo "‚ùå $action missing"
        ISSUES_FOUND=$((ISSUES_FOUND + 1))
    fi
done

# Check 4: Verify build scripts exist
echo "üìù Checking build scripts..."
REQUIRED_SCRIPTS=(
    ".github/scripts/build-briefcase.sh"
    ".github/scripts/build-macos.sh"
)

for script in "${REQUIRED_SCRIPTS[@]}"; do
    if [ -f "$script" ]; then
        if [ -x "$script" ]; then
            echo "‚úÖ $script exists and is executable"
        else
            echo "‚ö†Ô∏è $script exists but not executable (will fix)"
            chmod +x "$script"
        fi
    else
        echo "‚ùå $script missing"
        ISSUES_FOUND=$((ISSUES_FOUND + 1))
    fi
done

# Check 5: Verify workflows updated
echo "üìù Checking workflow files..."
if [ -f ".github/workflows/reusable-build.yml" ]; then
    if grep -q "submodule" ".github/workflows/reusable-build.yml"; then
        echo "‚ö†Ô∏è reusable-build.yml still contains submodule references"
    else
        echo "‚úÖ reusable-build.yml updated (no submodule references)"
    fi
else
    echo "‚ùå reusable-build.yml missing"
    ISSUES_FOUND=$((ISSUES_FOUND + 1))
fi

# Check 6: Verify project structure
echo "üìù Checking project files..."
REQUIRED_FILES=(
    "pyproject.toml"
    "server/main.py"
    "server/version.py"
    "requirements.txt"
)

for file in "${REQUIRED_FILES[@]}"; do
    if [ -f "$file" ]; then
        echo "‚úÖ $file exists"
    else
        echo "‚ùå $file missing"
        ISSUES_FOUND=$((ISSUES_FOUND + 1))
    fi
done

echo ""
echo "üéØ Verification Summary"
echo "====================="

if [ $ISSUES_FOUND -eq 0 ]; then
    echo "üéâ ALL CHECKS PASSED!"
    echo ""
    echo "‚úÖ Your build system is ready to use"
    echo "‚úÖ Git submodules have been properly removed"
    echo "‚úÖ New modular GitHub Actions are in place"
    echo "‚úÖ Build scripts are properly configured"
    echo ""
    echo "üöÄ Next steps:"
    echo "   1. git add ."
    echo "   2. git commit -m 'refactor: modernize build system'"
    echo "   3. git push"
    echo ""
else
    echo "‚ö†Ô∏è Found $ISSUES_FOUND issue(s) that need attention"
    echo ""
    echo "Please review the issues above and fix them before proceeding."
    echo ""
fi

exit $ISSUES_FOUND
